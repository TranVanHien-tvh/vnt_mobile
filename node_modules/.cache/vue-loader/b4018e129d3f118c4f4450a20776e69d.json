{"remainingRequest":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT Mobile\\vnt_mobile\\src\\components\\msnumber\\msNumber.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\VNT Mobile\\vnt_mobile\\src\\components\\msnumber\\msNumber.vue","mtime":1670055812043},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT_vue\\src\\views\\activities\\AddActivity.vue?vue&type=template&id=6efbdf28&scoped=true&","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\activities\\AddActivity.vue","mtime":1666430172911},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
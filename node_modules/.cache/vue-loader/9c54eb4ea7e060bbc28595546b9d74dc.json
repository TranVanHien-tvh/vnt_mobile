{"remainingRequest":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT_vue\\src\\views\\clubs\\ClubDetail.vue?vue&type=template&id=41432b33&","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\clubs\\ClubDetail.vue","mtime":1655625822442},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
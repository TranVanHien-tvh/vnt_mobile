{"remainingRequest":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT_vue\\src\\views\\clubs\\NewClub.vue?vue&type=template&id=1a6e19cc&scoped=true&","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\clubs\\NewClub.vue","mtime":1666517008157},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItY29udGFpbmVyIiB9LCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWxlZnQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi10aXRsZSIgfSwgW192bS5fdigiVOG6oW8gQ8OidSBs4bqhYyBi4buZIildKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWl0ZW0iIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgX2MoIm1zLWlucHV0IiwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICJtYXgtbGVuZ3RoIjogMjU1LAogICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiTmjhuq1wIHTDqm4gY8OidSBs4bqhYyBi4buZIiwKICAgICAgICAgICAgICBydWxlczogInJlcXVpcmVkIiwKICAgICAgICAgICAgICBuYW1lOiAiVMOqbiBjw6J1IGzhuqFjIGLhu5kiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgdmFsdWU6IF92bS5uYW1lQ2x1YiwKICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICBfdm0ubmFtZUNsdWIgPSAkJHYKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuYW1lQ2x1YiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWl0ZW0iIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoIm1zLWlucHV0IiwgewogICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIlTDqm4gdmnhur90IHThuq90IiwgIm1heC1sZW5ndGgiOiAyNTUgfSwKICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5hbWVTdWJDbHViLAogICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgIF92bS5uYW1lU3ViQ2x1YiA9ICQkdgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm5hbWVTdWJDbHViIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX20oMSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1pdGVtIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKCJtcy1kYXRlcGlja2VyIiwgewogICAgICAgICAgICBhdHRyczogeyBuYW1lOiAiTmfDoHkgdGjDoG5oIGzhuq1wIiwgcGxhY2Vob2xkZXI6ICJkZC9tbS95eXl5IiB9LAogICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3JlYXRlZERhdGUsCiAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgX3ZtLmNyZWF0ZWREYXRlID0gJCR2CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3JlYXRlZERhdGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItaXRlbSIgfSwgWwogICAgICAgIF92bS5fbSgzKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygibXMtY29tYm9ib3giLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dC1lZGl0b3IgbWItMiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZS1maWVsZCI6ICJpZCIsCiAgICAgICAgICAgICAgICAiZGlzcGxheS1maWVsZCI6ICJuYW1lIiwKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiQ2jhu41uIHRow6BuaCBwaOG7kSIsCiAgICAgICAgICAgICAgICBydWxlczogInJlcXVpcmVkIiwKICAgICAgICAgICAgICAgIG5hbWU6ICJU4buJbmgvVGjDoG5oIHBo4buRIiwKICAgICAgICAgICAgICAgIGRhdGE6IF92bS5wcm92aW5jZXMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG9uOiB7IHNlbGVjdGVkOiBfdm0ub25DaGFuZ2VQcm92aW5jZSB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnByb3ZpbmNlLmlkLAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucHJvdmluY2UsICJpZCIsICQkdikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJvdmluY2UuaWQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleHJvdyBmbGV4LWJldHdlZW4iIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1yLTIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygibXMtY29tYm9ib3giLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0LWVkaXRvciBtYi0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICJ2YWx1ZS1maWVsZCI6ICJpZCIsCiAgICAgICAgICAgICAgICAgICJkaXNwbGF5LWZpZWxkIjogIm5hbWUiLAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIkNo4buNbiBxdeG6rW4vaHV54buHbiIsCiAgICAgICAgICAgICAgICAgIHJ1bGVzOiAicmVxdWlyZWQiLAogICAgICAgICAgICAgICAgICBuYW1lOiAiUXXhuq1uL0h1eeG7h24iLAogICAgICAgICAgICAgICAgICBkYXRhOiBfdm0uZGlzdHJpY3RzCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsgc2VsZWN0ZWQ6IF92bS5vbkNoYW5nZURpc3RyaWN0IH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRpc3RyaWN0LmlkLAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmRpc3RyaWN0LCAiaWQiLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkaXN0cmljdC5pZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoIm1zLWNvbWJvYm94IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dC1lZGl0b3IgbWItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAidmFsdWUtZmllbGQiOiAiaWQiLAogICAgICAgICAgICAgICAgICAiZGlzcGxheS1maWVsZCI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgcnVsZXM6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICJYw6MvUGjGsOG7nW5nIiwKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJDaOG7jW4geMOjL3BoxrDhu51uZyIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IF92bS53YXJkcwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ud2FyZC5pZCwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS53YXJkLCAiaWQiLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ3YXJkLmlkIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygibXMtaW5wdXQiLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiTmfDtSwgU+G7kSBuaMOgLCDEkMaw4budbmcuLi4iLAogICAgICAgICAgICAgICAgIm1heC1sZW5ndGgiOiAyNTUsCiAgICAgICAgICAgICAgICBuYW1lOiAiTmfDtSwgc+G7kSBuaMOgIiwKICAgICAgICAgICAgICAgIHJ1bGVzOiAicmVxdWlyZWQiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ob21lTnVtYmVyLAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uaG9tZU51bWJlciA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJob21lTnVtYmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1pdGVtIiB9LCBbCiAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGhlbWUiLCBvbjogeyBjbGljazogX3ZtLnNob3dEcm9wZG93biB9IH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1yb3ciLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJwYWRkaW5nLWxlZnQiOiAiMTJweCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidG9waWMtaWNvbiIsCiAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICAic29jaWFsLWljb24iOiBfdm0uaWRJY29uID09IDEsCiAgICAgICAgICAgICAgICAgICJzcG9ydC1pY29uIjogX3ZtLmlkSWNvbiA9PSAyLAogICAgICAgICAgICAgICAgICAic3R1ZHktaWNvbiI6IF92bS5pZEljb24gPT0gMywKICAgICAgICAgICAgICAgICAgInBsYXktaWNvbiI6IF92bS5pZEljb24gPT0gNCwKICAgICAgICAgICAgICAgICAgIiI6IF92bS5pZEljb24gPT0gNQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGhlbWUtdG9waWMiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRoZW1lVGV4dCkpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zaG93VGhlbWUsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzaG93VGhlbWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3AtZG93bi10aGVtZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWxsZWRieSI6ICJuYXZiYXJEcm9wZG93biIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfdm0uX2woX3ZtLnRoZW1lcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkcm9wZG93bi1pdGVtIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNlbGVjdGVkVGhlbWUoaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRyb3Bkb3duLWNoaWxkIGZsZXgtcm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidG9waWMtaWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICAgICAgICAic29jaWFsLWljb24iOiBpdGVtLmlkID09IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJzcG9ydC1pY29uIjogaXRlbS5pZCA9PSAyLAogICAgICAgICAgICAgICAgICAgICAgICAic3R1ZHktaWNvbiI6IGl0ZW0uaWQgPT0gMywKICAgICAgICAgICAgICAgICAgICAgICAgInBsYXktaWNvbiI6IGl0ZW0uaWQgPT0gNCwKICAgICAgICAgICAgICAgICAgICAgICAgIiI6IGl0ZW0uaWQgPT0gNQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGhlbWUtdG9waWMiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoaXRlbS5uYW1lKSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIDAKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWl0ZW0tdGV4dEFyZWEiIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgX2MoIm1zLXRleHRhcmVhIiwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIG5hbWU6ICJDaMO6IHRow61jaCIsCiAgICAgICAgICAgICAgcnVsZXM6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICAgcm93czogMywKICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIk5o4bqtcCBjaMO6IHRow61jaCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5vdGUsCiAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgX3ZtLm5vdGUgPSAkJHYKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJub3RlIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItaXRlbS10ZXh0QXJlYSIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtc3ViIG1iLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJHaeG7m2kgdGhp4buHdSBjaHVuZyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJtcy10ZXh0YXJlYSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsgcm93czogNSwgcGxhY2Vob2xkZXI6ICJOaOG6rXAgZ2nhu5tpIHRoaeG7h3UgY2h1bmciIH0sCiAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgdmFsdWU6IF92bS5pbmZvQ2x1YiwKICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICBfdm0uaW5mb0NsdWIgPSAkJHYKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJpbmZvQ2x1YiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1pdGVtIGljb24tbGVmdCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWIgbWItMiIgfSwgWwogICAgICAgICAgX3ZtLl92KCJUaMO0bmcgVGluIExpw6puIEzhuqFjIikKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIm0tYi03IiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygibXMtaW5wdXQiLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGxlZnRJY29uOiAiaWNfZW1haWwiLAogICAgICAgICAgICAgICAgIm1heC1sZW5ndGgiOiAyNTUsCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIk5o4bqtcCBlbWFpbCIsCiAgICAgICAgICAgICAgICBydWxlczogInJlcXVpcmVkfGVtYWlsIiwKICAgICAgICAgICAgICAgIG5hbWU6ICJFbWFpbCIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVtYWlsQ2x1YiwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLmVtYWlsQ2x1YiA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlbWFpbENsdWIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibS1iLTciIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJtcy1pbnB1dCIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgbGVmdEljb246ICJpY193ZWIiLAogICAgICAgICAgICAgICAgIm1heC1sZW5ndGgiOiAyNTUsCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIk5o4bqtcCB3ZWJzaXRlIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ud2ViQ2x1YiwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLndlYkNsdWIgPSAkJHYKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAid2ViQ2x1YiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtLWItNyIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm1zLWlucHV0IiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBsZWZ0SWNvbjogImljX2NvbnRhY3QiLAogICAgICAgICAgICAgICAgIm1heC1sZW5ndGgiOiAxMCwKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiTmjhuq1wIEhvdGxpbmUiLAogICAgICAgICAgICAgICAgcnVsZXM6ICJyZXF1aXJlZHxwaG9uZSIsCiAgICAgICAgICAgICAgICBuYW1lOiAiSG90bGluZSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBob25lQ2x1YiwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLnBob25lQ2x1YiA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwaG9uZUNsdWIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWl0ZW0iIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtc3ViIG1iLTIiIH0sIFtfdm0uX3YoIlRhZ3MiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibS1iLTciIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJtcy1pbnB1dCIsIHsKICAgICAgICAgICAgICBhdHRyczogeyAibWF4LWxlbmd0aCI6IDI1NSwgcGxhY2Vob2xkZXI6ICIiIH0sCiAgICAgICAgICAgICAgb246IHsga2V5ZG93bjogX3ZtLnRhZ0NoYW5nZSB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRhZywKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLnRhZyA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0YWciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmxleC1yb3ciIH0sCiAgICAgICAgICBfdm0uX2woX3ZtLnRhZ3MsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGluZGV4LCBzdGF0aWNDbGFzczogIml0ZW0tdGFncyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KF92bS5fcyhpdGVtKSldKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24xNSBpY19jbG9zZV9ibHVlIGNsb3NlLXRhZyIgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIH0pLAogICAgICAgICAgMAogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmbGV4LXJvdyIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygibXMtYnV0dG9uIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInctMTAwIHZudC1hZGQtYnRuIiwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRoaXJkIiwgdGV4dDogIlThuqFvIiB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnN1Ym1pdCB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJtcy1idXR0b24iLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy0xMDAgdm50LWNhbmNlbC1idG4iLAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGhpcmQiLCB0ZXh0OiAiSOG7p3kiIH0sCiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uY2FuY2VsQWRkIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1yaWdodCIgfSwgWwogICAgICBfYygiZGl2IiwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItYmFubmVyIiB9LCBbCiAgICAgICAgICBfdm0uaW1hZ2VVcmwKICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctYmFubmVyIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmltYWdlVXJsLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInNlbGVjdC1iYW5uZXItaWNvbiB1cGxvYWQtYnRuIiwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImZpbGUiLCBhY2NlcHQ6ICJpbWFnZS8qIiwgaWQ6ICJmaWxlLWlucHV0IiB9LAogICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5zZWxlY3RBdmF0YXIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInNlbGVjdC1iYW5uZXItaWNvbiIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvaWNvbnMvdm50L0dyb3VwIDEzODIuc3ZnIiksCiAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1iYWNrIiB9KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24tcGhvdG8iIH0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IGZsZXgtYmV0d2VlbiBwLXQtMjkgcC1iLTQ4IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1hdmF0YXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItbG9nbyIgfSwgWwogICAgICAgICAgICBfdm0ubG9nb1VybAogICAgICAgICAgICAgID8gX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsb2dvLWNsdWIiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5sb2dvVXJsLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VsZWN0LWxvZ28taWNvbiB1cGxvYWQtYnRuIiwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImZpbGUiLCBhY2NlcHQ6ICJpbWFnZS8qIiwgaWQ6ICJmaWxlLWlucHV0LWxvZ28iIH0sCiAgICAgICAgICAgIG9uOiB7IGNoYW5nZTogX3ZtLnNlbGVjdExvZ28gfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInNlbGVjdC1sb2dvLWljb24iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2ljb25zL3ZudC9Hcm91cCAxMzgyLnN2ZyIpLAogICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICAhX3ZtLm5hbWVTdWJDbHViCiAgICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubmFtZUNsdWIpKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICBfdm0ubmFtZVN1YkNsdWIKICAgICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5uYW1lQ2x1YikgKwogICAgICAgICAgICAgICAgICAgICIgKCIgKwogICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0ubmFtZVN1YkNsdWIpICsKICAgICAgICAgICAgICAgICAgICAiKSAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgIF0pLAogICAgICAgIF92bS5fbSg2KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1jb250ZW50LWluZm8iIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWNvbnRlbnQtbGVmdCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItY29udGVudC1pdGVtIGZsZXgtcm93IGZsZXgtYmV0d2VlbiIgfSwKICAgICAgICAgICAgW192bS5fbSg3KSwgX2MoImRpdiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50VXNlci5uYW1lKSldKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1jb250ZW50LWl0ZW0gZmxleC1yb3cgZmxleC1iZXR3ZWVuIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl9tKDgpLAogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kb3B0aW9ucy5maWx0ZXJzLmZvcm1hdERhdGUoX3ZtLmNyZWF0ZWREYXRlKSkpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV3LWNsdWItY29udGVudC1pdGVtIiB9LCBbCiAgICAgICAgICAgIF92bS5fbSg5KSwKICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5ub3RlKSldKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhYmVsLXRleHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkdp4bubaSB0aGnhu4d1IGNodW5nIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkZXRhaWwtaW5mbyIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uaW5mb0NsdWIpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5pbmZvQ2x1Yi5sZW5ndGggPj0gMTEwCiAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hvdy1tb3JlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgWGVtIHRow6ptICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicC10LTI2IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWwtdGV4dCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVGjDtG5nIHRpbiBsacOqbiBs4bqhYyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1yb3cgZmxleC1hbC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbjI0IGljX2VtYWlsIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW5mby10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiRW1haWw6ICIgKyBfdm0uX3MoX3ZtLmVtYWlsQ2x1YikpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1yb3cgZmxleC1hbC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbjI0IGljX3dlYiIgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImluZm8tdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIndlYnNpdGU6ICIgKyBfdm0uX3MoX3ZtLndlYkNsdWIpKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IGZsZXgtYWwtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24yNCBpY19jb250YWN0IiB9KSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW5mby10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiSG90bGluZTogIiArIF92bS5fcyhfdm0ucGhvbmVDbHViKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwLXQtMjAiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC10ZXh0IHAtYi0xMSIgfSwgW192bS5fdigiVGFnIildKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IiB9LAogICAgICAgICAgICAgIF92bS5fbChfdm0udGFncywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGluZGV4LCBzdGF0aWNDbGFzczogIml0ZW0tdGFncyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0pICsgIiAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuZXctY2x1Yi1jb250ZW50LXJpZ2h0IiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygibXMtYnV0dG9uIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy0xMDAgYWRkLWJ0bi1hY3QiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJmb3VyIiwgdGV4dDogIlThuqFvIGhv4bqhdCDEkeG7mW5nIG3hu5tpIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1YiBtYi0yIiB9LCBbCiAgICAgIF92bS5fdigiIFTDqm4gY8OidSBs4bqhYyBi4buZICIpLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xvci1yZWQiIH0sIFtfdm0uX3YoIioiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5ldy1jbHViLWl0ZW0iIH0sIFsKICAgICAgX3ZtLl92KAogICAgICAgICIgRMO5bmcgdMOqbiBj4bunYSBkb2FuaCBuZ2hp4buHcCwgdGjGsMahbmcgaGnhu4d1IGhv4bq3YyB04buVIGNo4bupYyBoYXkgdMOqbiBnaeG6o2kgdGjDrWNoIG7hu5lpIGR1bmcgY+G7p2EgdHJhbmcuICIKICAgICAgKSwKICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJUw6xtIGhp4buDdSB0aMOqbSIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWIgbWItMiIgfSwgWwogICAgICBfdm0uX3YoIiBOZ8OgeSB0aMOgbmggbOG6rXAgIiksCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImNvbG9yLXJlZCIgfSwgW192bS5fdigiKiIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWIgbWItMiIgfSwgWwogICAgICBfdm0uX3YoIiDEkOG7i2EgxJFp4buDbSAiKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY29sb3ItcmVkIiB9LCBbX3ZtLl92KCIqIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1YiBtYi0yIiB9LCBbCiAgICAgIF92bS5fdigiIENo4bunIMSR4buBIGPDonUgbOG6oWMgYuG7mSAiKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY29sb3ItcmVkIiB9LCBbX3ZtLl92KCIqIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1YiBtYi0yIiB9LCBbCiAgICAgIF92bS5fdigiIENo4bunIHRow61jaCAiKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY29sb3ItcmVkIiB9LCBbX3ZtLl92KCIqIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LXJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IGZsZXgtY2VudGVyIG5ldy1jbHViLXR5cGUiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb240MCBpY29uLWhlYXJ0IiB9KSwKICAgICAgICBfYygiZGl2IiwgW192bS5fdigiQ8O0bmcgw61jaCAtIFjDoyBo4buZaSIpXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGluZS1icmVhayIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1yb3cgZmxleC1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24tYWRkLXVzZXIiIH0pLAogICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCIwIHRow6BuaCB2acOqbiIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1yb3cgZmxleC1jZW50ZXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uMzUgaWNvbi1mbHVlbnQtc3RhciIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dCIgfSwgW192bS5fdigiQ2jhu6cgbmhp4buHbSBDTEIiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IGZsZXgtY2VudGVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1jYWxlbmRhci1zdGFyIG0tci02IiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0IiB9LCBbX3ZtLl92KCJUaOG7nWkgZ2lhbiB0aMOgbmggbOG6rXAiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtcm93IGZsZXgtYWwtY2VudGVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1jYWxlbmRhci1wZW5jaWwgbS1yLTYiIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQiIH0sIFtfdm0uX3YoIkNow7ogdGjDrWNoIildKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}
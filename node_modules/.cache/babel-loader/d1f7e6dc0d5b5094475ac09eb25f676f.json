{"remainingRequest":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT_vue\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\VNT_vue\\src\\apis\\commendation\\commendationDetailAPI.js","dependencies":[{"path":"D:\\VNT_vue\\src\\apis\\commendation\\commendationDetailAPI.js","mtime":1653205085541},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT_vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRDovVk5UX3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiRDovVk5UX3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkQ6L1ZOVF92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAiRDovVk5UX3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJEOi9WTlRfdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiRDovVk5UX3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkQ6L1ZOVF92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCBCYXNlQVBJIGZyb20gIkAvYXBpcy9iYXNlL2Jhc2VBUEkiOwppbXBvcnQgaHR0cENsaWVudCBmcm9tICJAL2FwaXMvYmFzZS9heGlvc0h0dHBDbGllbnQiOwppbXBvcnQgY29tbW9uRm4gZnJvbSAiQC9jb21tb25zL2NvbW1vbkZ1bmN0aW9uIjsKCnZhciBDb21tZW5kYXRpb25EZXRhaWxBUEkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQVBJKSB7CiAgX2luaGVyaXRzKENvbW1lbmRhdGlvbkRldGFpbEFQSSwgX0Jhc2VBUEkpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbW1lbmRhdGlvbkRldGFpbEFQSSk7CgogIGZ1bmN0aW9uIENvbW1lbmRhdGlvbkRldGFpbEFQSSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tbWVuZGF0aW9uRGV0YWlsQVBJKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFwaU5hbWUiLCAiQnVzaW5lc3MiKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjb250cm9sbGVyTmFtZSIsICJDb21tZW5kYXRpb25EZXRhaWwiKTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29tbWVuZGF0aW9uRGV0YWlsQVBJLCBbewogICAga2V5OiAiZ2V0TGlzdEFsbFJld2FyZFRpdGxlIiwKICAgIHZhbHVlOgogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCBkYW5oIGhp4buHdSB0aGkgxJF1YS9Iw6xuaCB0aOG7qWMga2hlbiB0aMaw4bufbmcNCiAgICAgKiBAcGFyYW0geyp9IHBheWxvYWQNCiAgICAgKiBAcmV0dXJucw0KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0TGlzdEFsbFJld2FyZFRpdGxlKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC1yZXdhcmRUaXRsZSIsCiAgICAgICAgZGF0YTogcGF5bG9hZAogICAgICB9OwogICAgICByZXR1cm4gaHR0cENsaWVudC5wb3N0QXN5bmMocmVxdWVzdCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBM4bqleSBkYW5oIHPDoWNoIGPDoWMgaMOsbmggdGjhu6ljIGtoZW4gdGjGsOG7n25nLi9kYW5oIGhp4buHdSB0aGkgxJF1YSBjw7MgdHJvbmcgcXV54bq/dCDEkeG7i25oDQogICAgICogQHBhcmFtIHsqfSBwYXlsb2FkDQogICAgICogQHJldHVybnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGlzdENlcnRpZmljYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXN0Q2VydGlmaWNhdGUocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgcmVxdWVzdCA9IHsKICAgICAgICB1cmw6IG1lLmdldEFQSVVybCgpICsgIi9saXN0LWNlcnRpZmljYXRlIiwKICAgICAgICBkYXRhOiBwYXlsb2FkCiAgICAgIH07CiAgICAgIHJldHVybiBodHRwQ2xpZW50LnBvc3RBc3luYyhyZXF1ZXN0KTsKICAgIH0KICAgIC8qKg0KICAgICAqIEzhuqV5IGRhbmggc8OhY2ggZGFuaCBjw6EgbmjDom4vdOG6rXAgdGjhu4MgdHJvbmcgxJHhu6N0IHF1eeG6v3QgxJHhu4tuaA0KICAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICAqIEByZXR1cm5zDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldExpc3RQZXJzb25hbE9yVGVhbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlzdFBlcnNvbmFsT3JUZWFtKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC1wZXJzb25hbE9yVGVhbSIsCiAgICAgICAgZGF0YTogcGF5bG9hZAogICAgICB9OwogICAgICByZXR1cm4gaHR0cENsaWVudC5wb3N0QXN5bmMocmVxdWVzdCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBn4butaSBTZW5kU3RhdHVzIGPhu6dhIHBob25nIHRyw6BvDQogICAgICogTlRCQU8gMDIuMTEuMjAyMQ0KICAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVDZXJ0aWZpY2F0ZURldGFpbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ2VydGlmaWNhdGVEZXRhaWwocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICB1cmw6IFt0aGlzLmdldEFQSVVybCgpLCAidXBkYXRlLWNlcnRpZmljYXRlRGV0YWlsIl0uam9pbigiLyIpLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QsIHRydWUpOwogICAgfQogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBoaeG7h3UvaMOsbmggdGjhu6ljIHbDoCB0aMO0bmcgdGluIGPDoSBuaMOibi904bqtcCB0aOG7gyBsacOqbiBxdWFuIGNobyBjaOG7qWMgbsSDbmcgbOG6pXkgdOG7qyBiw6xuaCB4w6l0IGtoZW4gdGjGsOG7n25nDQogICAgICogTlRUSEFOSDEgMjUvMTEvMjAyMQ0KICAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRMaXN0UmV3YXJkRnJvbVZvdGF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXN0UmV3YXJkRnJvbVZvdGF0aW9uKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIHZhciBwYXJhbSA9IF9vYmplY3RTcHJlYWQoe30sIHBheWxvYWQpOyAvL3jhu60gbMO9IHRoYW0gc+G7kSB0csaw4bubYyBraGkgcmVxdWVzdCBsb2FkIGThu68gbGnhu4d1CgoKICAgICAgY29tbW9uRm4ucHJvY2Vzc0NvbWJvYm94UGFyYW1SZXF1ZXN0KHBhcmFtKTsKICAgICAgdmFyIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC1yZXdhcmQtZnJvbS12b3RhdGlvbiIsCiAgICAgICAgZGF0YTogcGFyYW0KICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCDEkcahbnYgduG7iyBj4bunYSBjb21ibyB0cmVlDQogICAgICogTlRCQU8gMjUuMTEuMjAyMQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRMaXN0T3JnYW5pemF0aW9uVHJlZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlzdE9yZ2FuaXphdGlvblRyZWUocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzOyAvL3jhu60gbMO9IHRoYW0gc+G7kSB0csaw4bubYyBraGkgcmVxdWVzdCBsb2FkIGThu68gbGnhu4d1CgogICAgICBjb21tb25Gbi5wcm9jZXNzQ29tYm9ib3hQYXJhbVJlcXVlc3QocGF5bG9hZCk7CiAgICAgIHZhciByZXF1ZXN0ID0gewogICAgICAgIHVybDogbWUuZ2V0QVBJVXJsKCkgKyAiL2xpc3Qtb3JnYW5pemF0aW9uLXRyZWUiLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCBjw6EgbmjDom4gdGhlbyBjw6J5IMSRxqFuIHbhu4sgxJHGsOG7o2MgY2jhu41uDQogICAgICogQHBhcmFtIHsqfSBwYXlsb2FkDQogICAgICogQHJldHVybnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGlzdEVtcGxveWVlUGFnaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXN0RW1wbG95ZWVQYWdpbmcocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgcmVxdWVzdCA9IHsKICAgICAgICB1cmw6IG1lLmdldEFQSVVybCgpICsgIi9saXN0LWVtcGxveWVlUGFnaW5nIiwKICAgICAgICBkYXRhOiBwYXlsb2FkCiAgICAgIH07CiAgICAgIHJldHVybiBodHRwQ2xpZW50LnBvc3RBc3luYyhyZXF1ZXN0KTsKICAgIH0KICAgIC8qKg0KICAgICAqIEzhuqV5IGRhbmggc8OhY2ggdOG6rXAgdGjhu4MgdGhlbyBjw6J5IMSRxqFuIHbhu4sgxJHGsOG7o2MgY2jhu41uDQogICAgICogQHBhcmFtIHsqfSBwYXlsb2FkDQogICAgICogQHJldHVybnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGlzdFRlYW1QYWdpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpc3RUZWFtUGFnaW5nKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC10ZWFtUGFnaW5nIiwKICAgICAgICBkYXRhOiBwYXlsb2FkCiAgICAgIH07CiAgICAgIHJldHVybiBodHRwQ2xpZW50LnBvc3RBc3luYyhyZXF1ZXN0KTsKICAgIH0KICAgIC8qKg0KICAgICAqIEtp4buDbSB0cmEgcGhvbmcgdHLDoG8gdGhpIMSRdWEgxJHGsOG7o2MgY2jhu41uIGPDsyBiw6xuaCB4w6l0IGhheSBraMO0bmcgdsOgIGzhuqV5IHJhIGRhbmggc8OhY2ggYsOsbmggeMOpdCDEkcOzDQogICAgICogQHBhcmFtIHsqfSBwYXlsb2FkDQogICAgICogQHJldHVybnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGlzdFZvdGF0aW9uSW5FbXVsYXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExpc3RWb3RhdGlvbkluRW11bGF0aW9uKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC12b3RhdGlvbkluRW11bGF0aW9uIiwKICAgICAgICBkYXRhOiBwYXlsb2FkCiAgICAgIH07CiAgICAgIHJldHVybiBodHRwQ2xpZW50LnBvc3RBc3luYyhyZXF1ZXN0KTsKICAgIH0KICAgIC8qKg0KICAgICAqIEFQSSBpbnNlcnQgZGFuaCBoaeG7h3UvaMOsbmggdGjhu6ljIHThu6sgYsOsbmggeMOpdA0KICAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICAqIEByZXR1cm5zDQogICAgICovCgogIH0sIHsKICAgIGtleTogImluc2VydEZyb21Wb3RhdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0RnJvbVZvdGF0aW9uKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvaW5zZXJ0LWZyb20tdm90YXRpb24iLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogQVBJIHRow6ptIGPDoSBuaMOibi904bqtcCB0aOG7gyB2w6BvIHF1eeG6v3QgxJHhu4tuaCBraGVuIHRoxrDhu59uZw0KICAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICAqIEByZXR1cm5zDQogICAgICovCgogIH0sIHsKICAgIGtleTogImluc2VydFBlcnNvbmFsT3JUZWFtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRQZXJzb25hbE9yVGVhbShwYXlsb2FkKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciByZXF1ZXN0ID0gewogICAgICAgIHVybDogbWUuZ2V0QVBJVXJsKCkgKyAiL2luc2VydC1wZXJzb25hbE9yVGVhbSIsCiAgICAgICAgZGF0YTogcGF5bG9hZAogICAgICB9OwogICAgICByZXR1cm4gaHR0cENsaWVudC5wb3N0QXN5bmMocmVxdWVzdCk7CiAgICB9CiAgICAvKioNCiAgICAgKiBBUEkgeMOzYSBjw6EgbmjDom4vdOG6rXAgdGjhu4MgdHJvbmcgcXV54bq/dCDEkeG7i25oIGtoZW4gdGjGsOG7n25nDQogICAgICogQHBhcmFtIHsqfSBwYXlsb2FkDQogICAgICogQHJldHVybnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVsZXRlUGVyc29uYWxPclRlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVBlcnNvbmFsT3JUZWFtKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvZGVsZXRlLXBlcnNvbmFsT3JUZWFtIiwKICAgICAgICBkYXRhOiBwYXlsb2FkCiAgICAgIH07CiAgICAgIHJldHVybiBodHRwQ2xpZW50LnBvc3RBc3luYyhyZXF1ZXN0KTsKICAgIH0KICAgIC8qKg0KICAgICogQVBJIHjDs2EgYWxsIGPDoSBuaMOibi904bqtcCB0aOG7gyB0cm9uZyBkYW5oIGhp4buHdSBraGVuIHRoxrDhu59uZyDEkcaw4bujYyBjaOG7jW4NCiAgICAqIEBwYXJhbSB7Kn0gcGF5bG9hZA0KICAgICogQHJldHVybnMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZWxldGVBbGxQZXJzb25hbE9yVGVhbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlQWxsUGVyc29uYWxPclRlYW0ocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICB1cmw6IG1lLmdldEFQSVVybCgpICsgIi9kZWxldGUtYWxsUGVyc29uYWxPclRlYW0iLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogVGjhu7FjIGhp4buHbiBs4bqleSByYSBkYW5oIHPDoWNoIGPDoSBuaMOibiB2w6AgdOG6rXAgdGjhu4Mga2hpIGzhuqV5IHThu6sgYsOsbmggeMOpdA0KICAgICAqIERMSHV5IDI4LjAxLjIwMjINCiAgICAgKiBAcGFyYW0geyp9IHBheWxvYWQgDQogICAgICogQHJldHVybnMgDQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFZvdGF0aW9uRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vm90YXRpb25EYXRhKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvZ2V0LXZvdGF0aW9uLWRhdGEiLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCBsb2FkIGzDqm4gY8OhYyDEkcahbiB24buLIGfhu61pIHThu50gdHLDrG5oIGzDqm4gY+G6pXAgbcOsbmgNCiAgICAgKiBAcGFyYW0geyp9IHBheWxvYWQNCiAgICAgKiBAcmV0dXJucw0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRMaXN0T3JnYW5pemF0aW9uUGFnaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXN0T3JnYW5pemF0aW9uUGFnaW5nKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIHJlcXVlc3QgPSB7CiAgICAgICAgdXJsOiBtZS5nZXRBUElVcmwoKSArICIvbGlzdC1vcmdhbml6YXRpb25QYWdpbmciLAogICAgICAgIGRhdGE6IHBheWxvYWQKICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCBwaMOybmcgYmFuIHRoZW8gxJHGoW4gduG7iyBjaG8gY29tYm8NCiAgICAgKiBAcGFyYW0geyp9IHBheWxvYWQgDQogICAgICogQHJldHVybnMgDQogICAgICovCgogIH0sIHsKICAgIGtleTogImxvYWRMaXN0RGVwYXJ0bWVudEJ5T3JnSUQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRMaXN0RGVwYXJ0bWVudEJ5T3JnSUQocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtID0gX29iamVjdFNwcmVhZCh7fSwgcGF5bG9hZCk7IC8veOG7rSBsw70gdGhhbSBz4buRIHRyxrDhu5tjIGtoaSByZXF1ZXN0IGxvYWQgZOG7ryBsaeG7h3UKCgogICAgICBjb21tb25Gbi5wcm9jZXNzQ29tYm9ib3hQYXJhbVJlcXVlc3QocGFyYW0pOwogICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICB1cmw6IG1lLmdldEFQSVVybCgpICsgIi9saXN0LWRlcGFydG1lbnQtYnlPcmdJRCIsCiAgICAgICAgZGF0YTogcGFyYW0KICAgICAgfTsKICAgICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdEFzeW5jKHJlcXVlc3QpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbW1lbmRhdGlvbkRldGFpbEFQSTsKfShCYXNlQVBJKTsKCmV4cG9ydCBkZWZhdWx0IG5ldyBDb21tZW5kYXRpb25EZXRhaWxBUEkoKTs="},null]}
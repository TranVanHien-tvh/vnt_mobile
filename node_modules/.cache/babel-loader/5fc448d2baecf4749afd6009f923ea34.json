{"remainingRequest":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\VNT Mobile\\vnt_mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT Mobile\\vnt_mobile\\src\\views\\activities\\ActivityDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\VNT Mobile\\vnt_mobile\\src\\views\\activities\\ActivityDetail.vue","mtime":1676794587876},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
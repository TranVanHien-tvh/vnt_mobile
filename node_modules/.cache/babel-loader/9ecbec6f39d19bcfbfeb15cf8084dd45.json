{"remainingRequest":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT_vue\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\VNT_vue\\src\\views\\base\\BaseListPopup.js","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\base\\BaseListPopup.js","mtime":1653205086695},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT_vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6L1ZOVF92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJEOi9WTlRfdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgQmFzZUxpc3QgZnJvbSAiQC92aWV3cy9iYXNlL0Jhc2VMaXN0IjsKaW1wb3J0IHsgcGVybWlzc2lvbiB9IGZyb20gIkAvbWl4aW5zL2NvbW1vbi9wZXJtaXNzaW9uIjsKaW1wb3J0IHsgbWFwU3RhdGUsIG1hcEFjdGlvbnMsIG1hcEdldHRlcnMgfSBmcm9tICJ2dWV4IjsKaW1wb3J0IHsgTW9kdWxlTGF5b3V0VGVtcGxhdGUsIE1vZHVsZUNvbnRleHQsIE1vZHVsZU9yZ2FuaXphdGlvbiB9IGZyb20gIkAvc3RvcmVzL21vZHVsZS1jb25zdCI7IC8vIGltcG9ydCBleHBvcnRBcGkgZnJvbSAiQC9hcGlzL2V4cG9ydEFQSSI7CgppbXBvcnQgTVNKc29uIGZyb20gIkAvY29tbW9ucy9qc29uIjsKaW1wb3J0IHsgc2hvcnRrZXlTdGF0dXNiYXIgfSBmcm9tICJAL21peGlucy9jb21tb24vc2hvcnRrZXlTdGF0dXNiYXIiOwppbXBvcnQgcG9wdXBVdGlsIGZyb20gIkAvY29tbW9ucy9wb3B1cFV0aWwiOwppbXBvcnQgY29tbW9uRm4gZnJvbSAiQC9jb21tb25zL2NvbW1vbkZ1bmN0aW9uIjsKZXhwb3J0IGRlZmF1bHQgewogIGV4dGVuZHM6IEJhc2VMaXN0LAogIG5hbWU6ICJCYXNlTGlzdFBvcHVwIiwKICBtaXhpbnM6IFtwZXJtaXNzaW9uLCBzaG9ydGtleVN0YXR1c2Jhcl0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIC8qKg0KICAgICAgICogQWN0aW9uIGPhu6dhIHThu6tuZyBi4bqjbiBnaGkga2hpIGFjdGl2ZQ0KICAgICAgICovCiAgICAgIHJvd0FjdGlvbnM6IFtdLAoKICAgICAgLyoqDQogICAgICAgKiBUw6puIGtleSBt4bqrdQ0KICAgICAgICovCiAgICAgIGxheW91dFRhZzogbnVsbCwKCiAgICAgIC8qKg0KICAgICAgICogQ8OhYyBhY3Rpb24ga2hpIGNo4buNbiBuaGnhu4F1DQogICAgICAgKi8KICAgICAgYWN0aW9uTXVsdGk6IFtdLAoKICAgICAgLyoqDQogICAgICAgKiByZWZuYW1lIGNvbnRyb2wgaGnhu4NuIHRo4buLIGFjdGlvbiBraGkgY2jhu41uIG5oaeG7gXUgYuG6o24gZ2hpDQogICAgICAgKi8KICAgICAgYWN0aW9uTXV0aWxSZWY6ICJhY3Rpb25NdWx0aSIsCgogICAgICAvKioNCiAgICAgICAqIHJlZm5hbWUgY29udHJvbCBoaeG7g24gdGjhu4sgYWN0aW9uIGtoaSBjaOG7jW4gbmhp4buBdSBi4bqjbiBnaGkgKCBtw6BuIGjDrG5oIHRvIGjGoW4gMTIwMCkNCiAgICAgICAqLwogICAgICBhY3Rpb25NdXRpbFJlZkJpZ1NjcmVlbjogImFjdGlvbk11bHRpQmlnU2NyZWVuIiwKICAgICAgbGF5b3V0OiB7fSwKICAgICAgdGl0bGU6ICIiLAoKICAgICAgLyoqDQogICAgICAgKiBjw7Mgc2hvdyB04bqldCBj4bqjIGljb24gZmlsdGVyIGhlYWRlciBncmlkIGzDqm4gaw0KICAgICAgICovCiAgICAgIHNob3dBbGxJY29uRmlsdGVyOiBmYWxzZSwKCiAgICAgIC8qKg0KICAgICAgICogU2hvdyBmaWx0ZXIgYm94DQogICAgICAgKi8KICAgICAgaXNTaG93RmlsdGVyOiBmYWxzZSwKCiAgICAgIC8qKg0KICAgICAgICogU2hvdyBtb3JlIGFjdGlvbiBib3gNCiAgICAgICAqLwogICAgICBpc1Nob3dBY3Rpb25Hcm91cDogZmFsc2UKICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoTW9kdWxlQ29udGV4dCwgWyJDb250ZXh0Il0pKSwgbWFwR2V0dGVycyh7CiAgICBvcmdzOiBNb2R1bGVPcmdhbml6YXRpb24gKyAiL3RyZWUiCiAgfSkpLCB7fSwgewogICAgLyoqDQogICAgICogxJDhu5FpIHTGsOG7o25nIHN0YXRlIGPhu6dhIHN0b3JlDQogICAgICovCiAgICBzdG9yZVN0YXRlOiBmdW5jdGlvbiBzdG9yZVN0YXRlKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGVbdGhpcy5tb2R1bGVdOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBLaMO0bmcgY8OzIGThu68gbGnhu4d1IHRyb25nIGLhuqNuZw0KICAgICAqIETDuW5nIGPhu50gbsOgeSDEkeG7gyBoaeG7g24gdGjhu4sgbeG6t2MgaMOsbmggdHLhu5FuZyB0csOqbiBkYW5oIHPDoWNoDQogICAgICovCiAgICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0b3JlU3RhdGUuZW1wdHk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEThu68gbGnhu4d1IGhp4buDbiB0aOG7iw0KICAgICAqLwogICAgaXRlbXM6IGZ1bmN0aW9uIGl0ZW1zKCkgewogICAgICByZXR1cm4gdGhpcy5zdG9yZVN0YXRlLml0ZW1zOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBU4buVbmcgc+G7kQ0KICAgICAqLwogICAgdG90YWw6IGZ1bmN0aW9uIHRvdGFsKCkgewogICAgICByZXR1cm4gdGhpcy5zdG9yZVN0YXRlLnRvdGFsOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBTdW1tYXJ5IGPhu6dhIGdyaWQNCiAgICAgKi8KICAgIHN1bW1hcnk6IGZ1bmN0aW9uIHN1bW1hcnkoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0b3JlU3RhdGUuc3VtbWFyeTsKICAgIH0sCgogICAgLyoqDQogICAgICogbG9hZGluZw0KICAgICAqLwogICAgbG9hZGluZzogZnVuY3Rpb24gbG9hZGluZygpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTdGF0ZS5sb2FkaW5nOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBsb2FkaW5nIHN1bW1hcnkNCiAgICAgKi8KICAgIGxvYWRpbmdTdW1tYXJ5OiBmdW5jdGlvbiBsb2FkaW5nU3VtbWFyeSgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTdGF0ZS5sb2FkaW5nU3VtbWFyeTsKICAgIH0sCgogICAgLyoqDQogICAgICogQ+G7mXQgdGhlbyBj4bqldSBow6xuaCBj4bunYSBt4bqrdQ0KICAgICAqLwogICAgbGF5b3V0Q29sdW1uczogZnVuY3Rpb24gbGF5b3V0Q29sdW1ucygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlW01vZHVsZUxheW91dFRlbXBsYXRlXS5hcHBseTsKICAgIH0sCgogICAgLyoqDQogICAgICogQ29udHJvbCBoaeG7g24gdGjhu4sgYWN0aW9uIGtoaSBjaOG7jW4gbmhp4buBdSBi4bqjbiBnaGkNCiAgICAgKi8KICAgIGFjdGlvbk11bHRpQ29tcG9uZW50OiBmdW5jdGlvbiBhY3Rpb25NdWx0aUNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbdGhpcy5hY3Rpb25NdXRpbFJlZl07CiAgICB9LAoKICAgIC8qKg0KICAgICAqIENvbnRyb2wgaGnhu4NuIHRo4buLIGFjdGlvbiBraGkgY2jhu41uIG5oaeG7gXUgYuG6o24gZ2hpIChtw6BuIGjDrG5oIGzhu5tuKQ0KICAgICAqLwogICAgYWN0aW9uTXVsdGlCaWdTY3JlZW5Db21wb25lbnQ6IGZ1bmN0aW9uIGFjdGlvbk11bHRpQmlnU2NyZWVuQ29tcG9uZW50KCkgewogICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGlvbk11dGlsUmVmQmlnU2NyZWVuXTsKICAgIH0KICB9KSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge30sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB3aW5kb3cuX3h4ID0gdGhpczsgLy9pbml0IGxheW91dAoKICAgIG1lLmluaXRMYXlvdXQoKTsgLy9pbml0IGV2ZW50CgogICAgbWUuaW5pdEV2ZW50KCk7CiAgfSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEFjdGlvbnMoewogICAgbG9hZEFwcGx5TGF5b3V0OiBNb2R1bGVMYXlvdXRUZW1wbGF0ZSArICIvbG9hZEFwcGx5IgogIH0pKSwge30sIHsKICAgIC8qKg0KICAgICAqIEzhuqV5IGPhuqV1IGjDrG5oIGPhu5l0IHRoZW8gbeG6q3Ugw6FwIGThu6VuZw0KICAgICAqLwogICAgZ2V0TGF5b3V0VGVtcGxhdGU6IGZ1bmN0aW9uIGdldExheW91dFRlbXBsYXRlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgbWUsIGNhY2hlTGF5b3V0VGVtcGxhdGU7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWUgPSBfdGhpczsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIG1lLmdldENhY2hlTGF5b3V0VGVtcGxhdGUoKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgY2FjaGVMYXlvdXRUZW1wbGF0ZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFjYWNoZUxheW91dFRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBjYWNoZUxheW91dFRlbXBsYXRlKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX3RoaXMubGF5b3V0Q29sdW1uc1tfdGhpcy5sYXlvdXRUYWddKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBY4butIGzDvSBj4bqldSBow6xuaCBt4bqrdSBj4bunYSBmb3JtDQogICAgICovCiAgICBpbml0TGF5b3V0OiBmdW5jdGlvbiBpbml0TGF5b3V0KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBtZSwgbGF5b3V0LCBjb2x1bW5zOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzMjsKCiAgICAgICAgICAgICAgICBpZiAoIW1lLmxheW91dFRhZykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuZ2V0TGF5b3V0VGVtcGxhdGUoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgbGF5b3V0ID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEoIWxheW91dCB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gImRldmVsb3BtZW50IikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUubG9hZEFwcGx5TGF5b3V0KG1lLmxheW91dFRhZyk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIGxheW91dCA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBtZS5sYXlvdXQgPSBtZS5jb252ZXJ0VG9MYXlvdXRUZW1wbGV0ZShsYXlvdXQpOwogICAgICAgICAgICAgICAgY29sdW1ucyA9IG1lLmdldExheW91dENvbHVtbihsYXlvdXQpOwogICAgICAgICAgICAgICAgbWUuZ3JpZC5pbml0Q29sdW1ucyhjb2x1bW5zKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIC8vbG9hZCBk4buvIGxp4buHdSBs4bqnbiDEkeG6p3UKICAgICAgICAgICAgICAgIG1lLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIG1lLnJlbG9hZCgpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBjb252ZXJ0VG9MYXlvdXRUZW1wbGV0ZTogZnVuY3Rpb24gY29udmVydFRvTGF5b3V0VGVtcGxldGUobGF5b3V0KSB7CiAgICAgIHZhciBsYXlvdXRUZW1wbGV0ZSA9IHt9OwoKICAgICAgaWYgKGxheW91dCkgewogICAgICAgIGxheW91dFRlbXBsZXRlLkxheW91dFRlbXBsYXRlSUQgPSBsYXlvdXQuTGF5b3V0VGVtcGxhdGVJRDsKICAgICAgICBsYXlvdXRUZW1wbGV0ZS5MYXlvdXRUYWcgPSBsYXlvdXQuTGF5b3V0VGFnOwogICAgICAgIGxheW91dFRlbXBsZXRlLlVzZXJJRCA9IGxheW91dC5Vc2VySUQgfHwgdGhpcy5Db250ZXh0LlVzZXJJRDsKICAgICAgICBsYXlvdXRUZW1wbGV0ZS5Jc1N5c3RlbSA9IGxheW91dC5Jc1N5c3RlbTsKICAgICAgICBsYXlvdXRUZW1wbGV0ZS5MYXlvdXRDb25maWcgPSBsYXlvdXQuQ29sdW1uczsKICAgICAgICBsYXlvdXRUZW1wbGV0ZS5MYXlvdXRUZW1wbGF0ZU5hbWUgPSBsYXlvdXQuTGF5b3V0VGVtcGxhdGVOYW1lOwogICAgICB9CgogICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbGF5b3V0VGVtcGxldGUpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBM4bqleSB0aMO0bmcgdGluIGNvbHVtbiByZW5kZXIgdOG7qyB0aMO0bmcgdGluIGPhu6dhIG3huqt1DQogICAgICovCiAgICBnZXRMYXlvdXRDb2x1bW46IGZ1bmN0aW9uIGdldExheW91dENvbHVtbihsYXlvdXQpIHsKICAgICAgaWYgKGxheW91dCAhPSB1bmRlZmluZWQpIHsKICAgICAgICB2YXIgbWUgPSB0aGlzOwogICAgICAgIHZhciBjb2x1bW5zID0gSlNPTi5wYXJzZShsYXlvdXQuQ29sdW1ucyk7IC8vbuG6v3UgbMOgIG3huqt1IG3hurdjIMSR4buLbmggdsOgIG5nw7RuIG5n4buvIGtow6FjIHRp4bq/bmcgdmnhu4d0IC0+IGPhuq1wIG5o4bqtdCBjYXB0aW9uL3RpdGxlIHRoZW8gbmfDtG4gbmfhu68KCiAgICAgICAgaWYgKGxheW91dC5Jc1N5c3RlbSkgewogICAgICAgICAgbWUubG9jYWxpemF0aW9uQ29sdW1uKGNvbHVtbnMpOwogICAgICAgIH0gLy9ubmxhbTogb3JkZXJieSBs4bqhaSB0aGVvIHNvcnRfb3JkZXIgdsOgIGxvY2suCgoKICAgICAgICBjb2x1bW5zID0gXyhjb2x1bW5zKS5jaGFpbigpLnNvcnRCeSgic29ydF9vcmRlciIpLnNvcnRCeShmdW5jdGlvbiAoY29sdW1uKSB7CiAgICAgICAgICByZXR1cm4gIWNvbHVtbi5sb2NrOwogICAgICAgIH0pLnZhbHVlKCk7CiAgICAgICAgcmV0dXJuIGNvbHVtbnM7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogR+G7jWkgcmVxdWVzdCBsb2FkIGThu68gbGnhu4d1DQogICAgICogR+G7jWkgdsOgbyBjcnVkLWJhc2UNCiAgICAgKi8KICAgIHJlcXVlc3RMb2FkRGF0YTogZnVuY3Rpb24gcmVxdWVzdExvYWREYXRhKHBheWxvYWQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIGlmIChtZS5ncmlkICYmIG1lLmdyaWQuaXNHcmlkVHJlZSkgewogICAgICAgIG1lLiRzdG9yZS5kaXNwYXRjaCgiIi5jb25jYXQobWUubW9kdWxlLCAiL2xvYWRMaXN0VHJlZSIpLCBwYXlsb2FkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZS4kc3RvcmUuZGlzcGF0Y2goIiIuY29uY2F0KG1lLm1vZHVsZSwgIi9sb2FkIiksIHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgLyoqDQogICAgICAgICAgICogZGVsYXkgxJHhu4MgxJHhu6NpIGdyaWQgc2VsZWN0IGTDsm5nIMSR4bqndQ0KICAgICAgICAgICAqIE5NVFVBTjIgMDQuMTIuMjAyMQ0KICAgICAgICAgICAqLwogICAgICAgICAgaWYgKG1lLmlzU2VhcmNoaW5nKSB7CiAgICAgICAgICAgIG1lLmlzU2VhcmNoaW5nID0gZmFsc2U7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmIChtZS5zZWFyY2hCb3ggJiYgbWUuc2VhcmNoQm94LiRyZWZzLmlucHV0KSB7CiAgICAgICAgICAgICAgICBtZS5zZWFyY2hCb3guJHJlZnMuaW5wdXQuZm9jdXMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIDIwMCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogR+G7jWkgcmVxdWVzdCBsb2FkIHN1bW1hcnkNCiAgICAgKi8KICAgIHJlcXVlc3RMb2FkRGF0YVN1bW1hcnk6IGZ1bmN0aW9uIHJlcXVlc3RMb2FkRGF0YVN1bW1hcnkocGF5bG9hZCkgewogICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgaWYgKG1lLmdyaWQgJiYgIW1lLmdyaWQuaXNHcmlkVHJlZSkgewogICAgICAgIG1lLiRzdG9yZS5kaXNwYXRjaCgiIi5jb25jYXQobWUubW9kdWxlLCAiL2xvYWRTdW1tYXJ5IiksIHBheWxvYWQpOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIGRiY2xpY2sgYuG6o24gZ2hpIHRyw6puIGdyaWQNCiAgICAgKi8KICAgIGdyaWRSb3dEYkNsaWNrOiBmdW5jdGlvbiBncmlkUm93RGJDbGljayhyZWNvcmQsIGUpIHsKICAgICAgdGhpcy5lZGl0KHJlY29yZCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIHPhu7Ega2nhu4duIOG6pW4gdsOgbyBjw6FjIGFjdGlvbiB0csOqbiBmb3JtDQogICAgICovCiAgICBidXR0b25DbGljazogZnVuY3Rpb24gYnV0dG9uQ2xpY2soY29tbWFuZCwgZSkge30sCgogICAgLyoqDQogICAgICogVGjDqm0NCiAgICAgKi8KICAgIGFkZDogZnVuY3Rpb24gYWRkKCkgewogICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgaWYgKCFtZS5jaGVja0FjdGlvblBlcm1pc3Npb25BbGVydChtZS4kdCgiaTE4blBlcm1pc3Npb24uU3ViU3lzdGVtQ29kZS5Db2RlLkFERCIpKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHBhcmFtID0gbWUuZ2V0RGV0YWlsUGFyYW1ldGVyKG1lLmZvcm1EZXRhaWxOYW1lLCB0aGlzLiRtcy5lbnVtLkZvcm1TdGF0ZS5BZGQpOwogICAgICBtZS5zaG93RGV0YWlsKG1lLmZvcm1EZXRhaWxOYW1lLCB0aGlzLiRtcy5lbnVtLkZvcm1TdGF0ZS5BZGQsIHBhcmFtKTsKICAgIH0sCgogICAgLyoqDQogICAgICogU+G7rSBk4bulbmcgY2hvIHPhu7Ega2nhu4duIGRibGljayB2w6BvIGTDsm5nIHRyw6puIGdyaWQgxJHhu4Mgc2hvdyBmb3JtIHTGsMahbmcg4bupbmcNCiAgICAgKiAqLwogICAgZWRpdDogZnVuY3Rpb24gZWRpdChyZWNvcmQpIHsKICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogIkVESVQiOwogICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgaWYgKCFtZS5jaGVja0FjdGlvblBlcm1pc3Npb25BbGVydChhY3Rpb24pKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcGFyYW0gPSBtZS5nZXREZXRhaWxQYXJhbWV0ZXIobWUuZm9ybURldGFpbE5hbWUsIHRoaXMuJG1zLmVudW0uRm9ybVN0YXRlLkVkaXQsIHJlY29yZCk7CiAgICAgIG1lLnNob3dEZXRhaWwobWUuZm9ybURldGFpbE5hbWUsIHRoaXMuJG1zLmVudW0uRm9ybVN0YXRlLkVkaXQsIHBhcmFtLCB7CiAgICAgICAgc3VibWl0OiBmdW5jdGlvbiBzdWJtaXQoc2F2ZVJlc3VsdCwgc2F2ZVBhcmFtKSB7CiAgICAgICAgICBpZiAoc2F2ZVJlc3VsdC5TdWNjZXNzKSB7CiAgICAgICAgICAgIG1lLmFmdGVyU2F2ZUVkaXQocmVjb3JkLCBzYXZlUmVzdWx0LCBzYXZlUGFyYW0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIHB2ZHV5IDI3LzAyLzIwMjE6IHRow6ptIGThu68gbGnhu4d1IGNobyBtb2RlIHZpZXcNCiAgICAgKiAqLwogICAgdmlldzogZnVuY3Rpb24gdmlldyhyZWNvcmQpIHsKICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogIldBVENIIjsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIGlmICghbWUuY2hlY2tBY3Rpb25QZXJtaXNzaW9uQWxlcnQoYWN0aW9uKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHBhcmFtID0gbWUuZ2V0RGV0YWlsUGFyYW1ldGVyKG1lLmZvcm1EZXRhaWxOYW1lLCB0aGlzLiRtcy5lbnVtLkZvcm1TdGF0ZS5WaWV3LCByZWNvcmQpOwogICAgICBtZS5zaG93RGV0YWlsKG1lLmZvcm1EZXRhaWxOYW1lLCB0aGlzLiRtcy5lbnVtLkZvcm1TdGF0ZS5WaWV3LCBwYXJhbSwgewogICAgICAgIHN1Ym1pdDogZnVuY3Rpb24gc3VibWl0KHNhdmVSZXN1bHQsIHNhdmVQYXJhbSkgewogICAgICAgICAgaWYgKHNhdmVSZXN1bHQuU3VjY2VzcykgewogICAgICAgICAgICBtZS5hZnRlclNhdmVWaWV3KHJlY29yZCwgc2F2ZVJlc3VsdCwgc2F2ZVBhcmFtKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBOaMOibiBi4bqjbiBi4bqjbiBnaGkNCiAgICAgKiAqLwogICAgZHVwbGljYXRlOiBmdW5jdGlvbiBkdXBsaWNhdGUocmVjb3JkKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CgogICAgICBpZiAoIW1lLmNoZWNrQWN0aW9uUGVybWlzc2lvbkFsZXJ0KG1lLiR0KCJpMThuUGVybWlzc2lvbi5TdWJTeXN0ZW1Db2RlLkNvZGUuQUREIikpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcGFyYW0gPSBtZS5nZXREZXRhaWxQYXJhbWV0ZXIobWUuZm9ybURldGFpbE5hbWUsIHRoaXMuJG1zLmVudW0uRm9ybVN0YXRlLkR1cGxpY2F0ZSwgcmVjb3JkKTsKICAgICAgbWUuc2hvd0RldGFpbChtZS5mb3JtRGV0YWlsTmFtZSwgdGhpcy4kbXMuZW51bS5Gb3JtU3RhdGUuRHVwbGljYXRlLCBwYXJhbSk7CiAgICB9LAogICAgcmVmcmVzaENsaWNrOiBmdW5jdGlvbiByZWZyZXNoQ2xpY2soKSB7CiAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBkcmlsbGRvd24ga2hpIGNsaWNrIHbDoG8gZ3JpZA0KICAgICAqICovCiAgICBkcmlsbGRvd25DbGljazogZnVuY3Rpb24gZHJpbGxkb3duQ2xpY2sobWV0YURhdGEpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIGlmIChtZXRhRGF0YS5kYXRhUm93KSB7CiAgICAgICAgbWUuZWRpdChtZXRhRGF0YS5kYXRhUm93KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZS4kdG9hc3QuZXJyb3IobWUuJHQoImkxOG5CYXNlRm9ybS5NZXNzYWdlLkVycm9yIikpOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEBhdXRob3IgVFZMT0kgMjAuMDUuMjAyMQ0KICAgICAqIGRyaWxsZG93biB2w6BvIGNoaSB0aeG6v3Qga2hpIOG6pW4gdsOgbyBjw6FjIGPhu5l0IGPDsyBk4bqhbmcgxJHhuqFpIGRp4buHbiBjaG8gc+G7kSBuaGnhu4F1KE5oaeG7gXUgZMOybmcgY2hpIHRp4bq/dCkNCiAgICAgKiAqLwogICAgdmlld01vcmVEZXRhaWxzOiBmdW5jdGlvbiB2aWV3TW9yZURldGFpbHMobWV0YURhdGEpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIGlmIChtZXRhRGF0YS5kYXRhUm93KSB7CiAgICAgICAgbWUudmlldyhtZXRhRGF0YS5kYXRhUm93KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZS4kdG9hc3QuZXJyb3IobWUuJHQoImkxOG5CYXNlRm9ybS5NZXNzYWdlLkVycm9yIikpOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIFjDs2ENCiAgICAgKi8KICAgIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShyZWNvcmQsIHN1YikgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBtZSwgY29uZmlnTWVzc2FnZSwgYW5zd2VyLCB0ZW1wLCBkcm9wZWRDb2x1bW5zLCBfbG9vcCwgaSwgYXVkaXRpbmdMb2csIHBhcmFtLCByZXN1bHQ7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzMzsKCiAgICAgICAgICAgICAgICBpZiAobWUuY2hlY2tBY3Rpb25QZXJtaXNzaW9uQWxlcnQoc3ViICE9PSBudWxsICYmIHN1YiAhPT0gdm9pZCAwID8gc3ViIDogbWUuJHQoImkxOG5QZXJtaXNzaW9uLlN1YlN5c3RlbUNvZGUuQ29kZS5ERUxFVEUiKSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmIChtZS52YWxpZGF0ZUJlZm9yZURlbGV0ZShyZWNvcmQsIHN1YikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBtZS5nZXREZWxldGVDb25maXJtTWVzc2FnZShyZWNvcmQpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBjb25maWdNZXNzYWdlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIG1lLiRtcy5tc2dCb3guc2hvd1F1ZXN0aW9uKGNvbmZpZ01lc3NhZ2UpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgYW5zd2VyID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEoYW5zd2VyID09ICJZZXMiKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0ZW1wID0ge307IC8vQuG7jyBi4bubdCBjw6FjIHRow7RuZyB0aW4gZ+G7rWkgbMOqbiBzdi4KCiAgICAgICAgICAgICAgICBkcm9wZWRDb2x1bW5zID0gbWUuZ2V0SWdub3JlZENvbHVtbnMoKTsKCiAgICAgICAgICAgICAgICBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHsKICAgICAgICAgICAgICAgICAgdmFyIGlzRHJvcGVkQ29sdW1uID0gZHJvcGVkQ29sdW1ucy5maW5kKGZ1bmN0aW9uIChfKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8gPT0gaTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBpZiAoIWlzRHJvcGVkQ29sdW1uKSB7CiAgICAgICAgICAgICAgICAgICAgdGVtcFtpXSA9IHJlY29yZFtpXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gcmVjb3JkKSB7CiAgICAgICAgICAgICAgICAgIF9sb29wKGkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGF1ZGl0aW5nTG9nID0gewogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTVNKc29uLnNlcmlhbGl6ZShtZS5nZW5lcmF0ZURlc2NyaXB0aW9uQXVkaXRpbmdMb2cocmVjb3JkKSksCiAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogbWUuYnVpbGRSZWZlcmVuY2UocmVjb3JkKSwKICAgICAgICAgICAgICAgICAgYWN0aW9uOiBtZS5hY3Rpb25BdWRpdGluZ0xvZywKICAgICAgICAgICAgICAgICAgZW50aXR5OiBtZS5nZXRFbnRpdHlUeXBlKCkgfHwgbWUubW9kdWxlLAogICAgICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcGFyYW0gPSB7CiAgICAgICAgICAgICAgICAgIEVudGl0eTogW3RlbXBdLAogICAgICAgICAgICAgICAgICBCeVBhc3NWYWxpZGF0ZTogbnVsbCwKICAgICAgICAgICAgICAgICAgQXVkaXRpbmdMb2c6IE1TSnNvbi5zZXJpYWxpemUoYXVkaXRpbmdMb2cpLAogICAgICAgICAgICAgICAgICBUeXBlOiBtZS4kbXMuZW51bS5EZWxldGVUeXBlLlNpbmdsZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBhcmFtID0gbWUuY3VzdG9tRGVsZXRlUGFyYW0ocmVjb3JkLCBwYXJhbSk7CiAgICAgICAgICAgICAgICBtZS4kbXMuY29tbW9uRm4ubWFzaygpOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBtZS5yZXF1ZXN0RGVsZXRlRGF0YShyZWNvcmQsIHBhcmFtKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgbWUuJG1zLmNvbW1vbkZuLnVubWFzaygpOwogICAgICAgICAgICAgICAgbWUuYWZ0ZXJEZWxldGUocmVjb3JkLCByZXN1bHQpOyAvL0xvZyBmaXJlYmFzZQoKICAgICAgICAgICAgICAgIG1lLmxvZ0RhdGFGaXJlQmFzZSgpOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEzhuqV5IHRow7RuZyB0aW4gbG9nIGZpcmViYXNlDQogICAgICogTlRUSEFOSDENCiAgICAgKi8KICAgIGxvZ0RhdGFGaXJlQmFzZTogZnVuY3Rpb24gbG9nRGF0YUZpcmVCYXNlKCkgewogICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbWVudU5hbWVDdXJyZW50ID0gbnVsbDsKICAgICAgICB2YXIgcGFyZW50ID0gbWUuJHBhcmVudDsKCiAgICAgICAgaWYgKG1lLiRyb3V0ZXIgfHwgbWUuJCRyb3V0ZXIpIHsKICAgICAgICAgIG1lbnVOYW1lQ3VycmVudCA9IG1lLiRyb3V0ZSA/IG1lLiRyb3V0ZS5uYW1lIDogbWUuJCRyb3V0ZS5uYW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAocGFyZW50ICYmIChwYXJlbnQuJHJvdXRlciB8fCBwYXJlbnQuJCRyb3V0ZXIpKSB7CiAgICAgICAgICAgIG1lbnVOYW1lQ3VycmVudCA9IHBhcmVudC4kcm91dGVyID8gcGFyZW50LiRyb3V0ZS5uYW1lIDogcGFyZW50LiQkcm91dGUubmFtZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChtZW51TmFtZUN1cnJlbnQpIHsKICAgICAgICAgIGNvbW1vbkZuLmxvZ0RhdGFGaXJlQmFzZVVwZGF0ZShtZW51TmFtZUN1cnJlbnQsIG1lLmNvbnRleHQpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICBjb25zb2xlLmxvZyhleCk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogR+G7jWkgcmVxdWVzdCB4w7NhDQogICAgICogQHJldHVybnMNCiAgICAgKi8KICAgIHJlcXVlc3REZWxldGVEYXRhOiBmdW5jdGlvbiByZXF1ZXN0RGVsZXRlRGF0YShyZWNvcmQsIHBhcmFtKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIG1lOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzNDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBtZS4kc3RvcmUuZGlzcGF0Y2goIiIuY29uY2F0KF90aGlzNC5tb2R1bGUsICIvZGVsZXRlIiksIHBhcmFtKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NC5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIG92ZXJyaWRlYWJsZSDEkeG7gyBjaGVjayBt4buZdCB2w6BpIGNhc2UgdmFsaWRhdGUgxJHGsOG7o2MgbmdheSB0csOqbiBjbGllbnQNCiAgICAgKiBAcmV0dXJucw0KICAgICAqIFRETkdISUEgMjcvMTAvMjAyMQ0KICAgICAqLwogICAgdmFsaWRhdGVCZWZvcmVEZWxldGU6IGZ1bmN0aW9uIHZhbGlkYXRlQmVmb3JlRGVsZXRlKHJlY29yZHMpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEBvdmVycmlkYWJsZSBUcuG6oyB24buBIG5o4buvbmcgdHLGsOG7nW5nIGtow7RuZyBtdeG7kW4gZ+G7rWkgbMOqbiBzZXJ2ZSDEkeG7gyB4w7NhDQogICAgICogQGF1dGhvciBUVkxvaSAxOS4wNi4yMDIxDQogICAgICovCiAgICBnZXRJZ25vcmVkQ29sdW1uczogZnVuY3Rpb24gZ2V0SWdub3JlZENvbHVtbnMoKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7IC8vZGVmYXVsdCAxIHPhu5EgY+G7mXQgbeG6t2MgxJHhu4tuaCBraMO0bmcgZ+G7rWkgbMOqbi4KCiAgICAgIHZhciBjb2x1bW5zSWdub3JlZCA9IFsicGFyZW50Tm9kZSIsICJpc0hpZGUiLCAiaXNTZWxlY3RlZCIsICJsZXZlbCIsICJfX3ZLZXlWYWx1ZSIsICJfaXNTZWxlY3RlZE11bHRpcGxlIiwgImV4cGFuZGVkIl07CiAgICAgIHZhciBjdXN0b21JZ25vcmVkQ29sdW1ucyA9IG1lLmdldEN1c3RvbUlnbm9yZWRDb2x1bW5zQmVmb3JlRGVsZXRlKCk7CgogICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXN0b21JZ25vcmVkQ29sdW1ucykgJiYgY3VzdG9tSWdub3JlZENvbHVtbnMubGVuZ3RoID4gMCkgewogICAgICAgIGN1c3RvbUlnbm9yZWRDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIGNvbHVtbnNJZ25vcmVkLnB1c2goaXRlbSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb2x1bW5zSWdub3JlZDsKICAgIH0sCiAgICAvL0N1c3RvbUNvbHVtbnMga28gZ+G7rWkgbMOqbgogICAgZ2V0Q3VzdG9tSWdub3JlZENvbHVtbnNCZWZvcmVEZWxldGU6IGZ1bmN0aW9uIGdldEN1c3RvbUlnbm9yZWRDb2x1bW5zQmVmb3JlRGVsZXRlKCkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICByZXR1cm4gW107CiAgICB9LAoKICAgIC8qKg0KICAgICAqIHRoYW0gY2hp4bq/dSBuaOG6rXQga8O9IChsxrB1IGThuqFuZyBqc29uIDoge2tleToga2V5LCBjb2RlOiBjb2RlLCBuYW1lOiBuYW1lfSkNCiAgICAgKiBrZXk6IGtow7NhIGNow61uaCBj4bunYSBi4bqjbmcgbW9kdWxlLCBkw7luZyDEkeG7gyBkcmlsZG93biBraGkgY2xpY2sgdsOgbw0KICAgICAqIGNvZGUsIG5hbWU6IG3DoywgdMOqbiDEkeG7gyBoaeG7g3UgdGjhu4sg4bufIGPhu5l0IHRoYW0gY2hp4bq/dSBraGkgeGVtIGxvZzogdsOtIGThu6U6IFF14bqhdCDEkWnhu4duIChRRDAwMDAxKQ0KICAgICAqLwogICAgYnVpbGRSZWZlcmVuY2U6IGZ1bmN0aW9uIGJ1aWxkUmVmZXJlbmNlKHJlY29yZHMpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIGZpZWxkID0gdGhpcy4kc3RvcmUuc3RhdGVbbWUubW9kdWxlXS5fY29uZmlnLmZpZWxkOwoKICAgICAgaWYgKGZpZWxkKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVjb3JkcykpIHsKICAgICAgICAgIHZhciByZWZlcmVuY2UgPSBbXTsKICAgICAgICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7CiAgICAgICAgICAgIHJlZmVyZW5jZS5wdXNoKHsKICAgICAgICAgICAgICBrZXk6IHJlY29yZFtmaWVsZC5rZXldLAogICAgICAgICAgICAgIGNvZGU6IHJlY29yZFtmaWVsZC5jb2RlXSwKICAgICAgICAgICAgICBuYW1lOiByZWNvcmRbZmllbGQubmFtZV0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBNU0pzb24uc2VyaWFsaXplKHJlZmVyZW5jZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBNU0pzb24uc2VyaWFsaXplKHsKICAgICAgICAgICAga2V5OiByZWNvcmRzW2ZpZWxkLmtleV0sCiAgICAgICAgICAgIGNvZGU6IHJlY29yZHNbZmllbGQuY29kZV0sCiAgICAgICAgICAgIG5hbWU6IHJlY29yZHNbZmllbGQubmFtZV0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKCiAgICAvKioNCiAgICAgKiBTaW5oIG3DtCB04bqjIGPhu6dhIG5o4bqtdCBrw70NCiAgICAgKiBDcmVhdGVkQnk6IG5ubGFtIDI0LzAzLzIwMjENCiAgICAgKi8KICAgIGdlbmVyYXRlRGVzY3JpcHRpb25BdWRpdGluZ0xvZzogZnVuY3Rpb24gZ2VuZXJhdGVEZXNjcmlwdGlvbkF1ZGl0aW5nTG9nKHJlY29yZHMpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIGxpc3REZXNjcmlwdGlvbiA9IHsKICAgICAgICBtYXN0ZXI6IFtdCiAgICAgIH07CiAgICAgIHZhciBmaWVsZCA9IHRoaXMuJHN0b3JlLnN0YXRlW21lLm1vZHVsZV0uX2NvbmZpZy5maWVsZDsKCiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7CiAgICAgICAgcmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHsKICAgICAgICAgIHZhciBvYmpEZXNjcmlwdGlvbiA9IHt9OwogICAgICAgICAgb2JqRGVzY3JpcHRpb25bZmllbGQuY29kZV0gPSByZWNvcmRbZmllbGQuY29kZV07IC8ve25ld1ZhbHVlOm1lLmN1cnJlbnRJdGVtW2ZpZWxkLmNvZGVdLCBzd2l0Y2hDYXB0aW9uOiBtZS5zd2l0Y2hDYXB0aW9uLm1hc3RlcltmaWVsZC5jb2RlXX07CgogICAgICAgICAgb2JqRGVzY3JpcHRpb25bZmllbGQubmFtZV0gPSByZWNvcmRbZmllbGQubmFtZV07IC8ve25ld1ZhbHVlOm1lLmN1cnJlbnRJdGVtW2ZpZWxkLm5hbWVdLCBzd2l0Y2hDYXB0aW9uOiBtZS5zd2l0Y2hDYXB0aW9uLm1hc3RlcltmaWVsZC5uYW1lXX07CgogICAgICAgICAgaWYgKGZpZWxkLnF1YW50aXR5KSB7CiAgICAgICAgICAgIG9iakRlc2NyaXB0aW9uW2ZpZWxkLnF1YW50aXR5XSA9IHJlY29yZFtmaWVsZC5xdWFudGl0eV07IC8ve25ld1ZhbHVlOm1lLmN1cnJlbnRJdGVtW2ZpZWxkLnF1YW50aXR5XSB8fCAxLCBzd2l0Y2hDYXB0aW9uOiBtZS5zd2l0Y2hDYXB0aW9uLm1hc3RlcltmaWVsZC5xdWFudGl0eV19OwogICAgICAgICAgfQoKICAgICAgICAgIGxpc3REZXNjcmlwdGlvbi5tYXN0ZXIucHVzaChvYmpEZXNjcmlwdGlvbik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG9iakRlc2NyaXB0aW9uID0ge307CiAgICAgICAgb2JqRGVzY3JpcHRpb25bZmllbGQuY29kZV0gPSByZWNvcmRzW2ZpZWxkLmNvZGVdOyAvL3tuZXdWYWx1ZTptZS5jdXJyZW50SXRlbVtmaWVsZC5jb2RlXSwgc3dpdGNoQ2FwdGlvbjogbWUuc3dpdGNoQ2FwdGlvbi5tYXN0ZXJbZmllbGQuY29kZV19OwoKICAgICAgICBvYmpEZXNjcmlwdGlvbltmaWVsZC5uYW1lXSA9IHJlY29yZHNbZmllbGQubmFtZV07IC8ve25ld1ZhbHVlOm1lLmN1cnJlbnRJdGVtW2ZpZWxkLm5hbWVdLCBzd2l0Y2hDYXB0aW9uOiBtZS5zd2l0Y2hDYXB0aW9uLm1hc3RlcltmaWVsZC5uYW1lXX07CgogICAgICAgIGlmIChmaWVsZC5xdWFudGl0eSkgewogICAgICAgICAgb2JqRGVzY3JpcHRpb25bZmllbGQucXVhbnRpdHldID0gcmVjb3Jkc1tmaWVsZC5xdWFudGl0eV07IC8ve25ld1ZhbHVlOm1lLmN1cnJlbnRJdGVtW2ZpZWxkLnF1YW50aXR5XSB8fCAxLCBzd2l0Y2hDYXB0aW9uOiBtZS5zd2l0Y2hDYXB0aW9uLm1hc3RlcltmaWVsZC5xdWFudGl0eV19OwogICAgICAgIH0KCiAgICAgICAgbGlzdERlc2NyaXB0aW9uLm1hc3Rlci5wdXNoKG9iakRlc2NyaXB0aW9uKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGxpc3REZXNjcmlwdGlvbjsKICAgIH0sCgogICAgLyoqDQogICAgICogTOG6pXkgY8OidSB0aMO0bmcgYsOhbyBraGkgeMOzYQ0KICAgICAqLwogICAgZ2V0RGVsZXRlQ29uZmlybU1lc3NhZ2U6IGZ1bmN0aW9uIGdldERlbGV0ZUNvbmZpcm1NZXNzYWdlKHJlY29yZHMpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgbWUsIG1vZHVsZU5hbWUsIHRhcmdldE5hbWUsIG1lcywgZGVsZXRlTXVsdGlNc2csIHJlY29yZCwgZGVsZXRlTXNnOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzNTsKICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSBtZS5nZXRNb2R1bGVOYW1lKCkgfHwgIiI7CiAgICAgICAgICAgICAgICB0YXJnZXROYW1lID0gIiI7CiAgICAgICAgICAgICAgICBtZXMgPSAiIjsKCiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgIGRlbGV0ZU11bHRpTXNnID0gbWUuZ2V0RGVsZXRlTXVsdGlNc2coKTsKICAgICAgICAgICAgICAgICAgbWVzID0gZGVsZXRlTXVsdGlNc2cuZm9ybWF0KHJlY29yZHMubGVuZ3RoID4gOSA/IHJlY29yZHMubGVuZ3RoIDogIjAiICsgcmVjb3Jkcy5sZW5ndGgsIG1vZHVsZU5hbWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVjb3JkID0gcmVjb3JkczsKCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7CiAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gcmVjb3Jkc1swXTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZCkgewogICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUgPSBtZS5nZXREZWxldGVTaW5nbGVNZXNDb250ZW50KHJlY29yZCk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGRlbGV0ZU1zZyA9IG1lLmdldERlbGV0ZU1zZyhyZWNvcmRzKTsKICAgICAgICAgICAgICAgICAgbWVzID0gZGVsZXRlTXNnLmZvcm1hdChtZS4kbXMuY29tbW9uRm4uZW5jb2RlSFRNTCh0YXJnZXROYW1lKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgdGl0bGU6IG1lLiR0KCJpMThuQmFzZUZvcm0uTWVzc2FnZS5Db25maXJtRGVsZXRlVGl0bGUiKS5mb3JtYXQobW9kdWxlTmFtZSksCiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lcwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBDdXN0b20gY8OidSBu4buZaSBkdW5nIHjDs2Egbmhp4buBdQ0KICAgICAqIE5UQkFPOiAyNS4xMS4yMDIxDQogICAgICogQHJldHVybnMNCiAgICAgKi8KICAgIGdldERlbGV0ZU11bHRpTXNnOiBmdW5jdGlvbiBnZXREZWxldGVNdWx0aU1zZygpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgcmV0dXJuIG1lLiR0KCJpMThuQmFzZUZvcm0uTWVzc2FnZS5Db25maXJtRGVsZXRlTXV0aVRpdGxlQ2Vnb3YiKTsKICAgIH0sCgogICAgLyoqDQogICAgICogQ3VzdG9tIGPDonUgbuG7mWkgZHVuZyB4w7NhIMSRxqFuDQogICAgICogTlRCQU86IDI1LjExLjIwMjENCiAgICAgKiBAcmV0dXJucw0KICAgICAqLwogICAgZ2V0RGVsZXRlTXNnOiBmdW5jdGlvbiBnZXREZWxldGVNc2cocmVjb3JkcykgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICByZXR1cm4gbWUuJHQoImkxOG5CYXNlRm9ybS5NZXNzYWdlLkNvbmZpcm1EZWxldGVTaG9ydCIpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBM4bqleSBu4buZaSBkdW5nIHjDs2ENCiAgICAgKi8KICAgIGdldERlbGV0ZVNpbmdsZU1lc0NvbnRlbnQ6IGZ1bmN0aW9uIGdldERlbGV0ZVNpbmdsZU1lc0NvbnRlbnQocmVjb3JkKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHJldHVybiByZWNvcmRbbWUuJHN0b3JlLnN0YXRlW21lLm1vZHVsZV0uX2NvbmZpZy5maWVsZC5uYW1lXSB8fCByZWNvcmRbbWUuJHN0b3JlLnN0YXRlW21lLm1vZHVsZV0uX2NvbmZpZy5maWVsZC5jb2RlXTsKICAgIH0sCgogICAgLyoqDQogICAgICogTOG6pXkgdMOqbiDEkeG7kWkgdMaw4bujbmcgY+G7p2EgZm9ybQ0KICAgICAqLwogICAgZ2V0TW9kdWxlTmFtZTogZnVuY3Rpb24gZ2V0TW9kdWxlTmFtZSgpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgcmV0dXJuIG1lLiR0KCJpMThuQ29tbW9uLm1vZHVsZS4iICsgbWUubW9kdWxlLnRvTG93ZXJDYXNlKCkpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBY4butIGzDvSBzYXUga2hpIHjDs2ENCiAgICAgKi8KICAgIGFmdGVyRGVsZXRlOiBmdW5jdGlvbiBhZnRlckRlbGV0ZShyZWNvcmQsIHJlc3VsdCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgIHZhciBtZSwgZGVsZXRlUmVjb3JkLCBfbWUkZ2V0RmllbGRzLCBDT0RFLCBtb2R1bGVOYW1lLCBmaWVsZCwgbGlzdEFyaXNlbmQsIGNvbmZpZ01lc3NhZ2UsIGFuc3dlciwgaXNBcmlzZU11bHRpLCBuYW1lLCBvYmosIGluYWN0aXZlQXJpc2UsIGRlbGV0ZU5vQXJpc2UsIHJlY29yZHNJbmFjdGl2ZSwgcmVjb3Jkc0RlbGV0ZSwga2V5RmllbGQ7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzNjsKCiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gY2xvbmUgbOG6oWkgZ2nDoSB0cuG7iyB4w7NhIGTDuW5nIGNobyB2aeG7h2MgY3VzdG9tCiAgICAgICAgICAgICAgICAvLyBOVEJBTzogMDcuMTEuMjAyMQogICAgICAgICAgICAgICAgZGVsZXRlUmVjb3JkID0gXy5jbG9uZShyZWNvcmQpOwogICAgICAgICAgICAgICAgbWUuJHRvYXN0LnN1Y2Nlc3MobWUuJHQoImkxOG5CYXNlRm9ybS5NZXNzYWdlLkRlbGV0ZVN1Y2Nlc3MiKSk7CiAgICAgICAgICAgICAgICAvKioNCiAgICAgICAgICAgICAgICAgKiBu4bq/dSB4b8OhIGLhuqNuIGdoaSDEkcaw4bujYyB0w61jaCB0aMOsIMSRYW5nIGtow7RuZyB04buxIGPhuq1wIG5o4bqtdCDhu58gc2VsZWN0ZWQNCiAgICAgICAgICAgICAgICAgKiBuw6puIHBo4bqjaSB0aOG7sWMgaGnhu4duIHhvw6Ega2jhu49pIHNlbGVjdGVkIChjaOG7iSB04buxIMSR4buZbmcga2hpIHhvw6EgdHLDqm4gZMOybmcgY+G7p2EgZ3JpZEVkaXRvcikNCiAgICAgICAgICAgICAgICAgKiBi4bqtdCBjaGFuZ2UgdsOgbyBjw6FjIGLhuqNuIGdoaSBjw7JuIMSRxrDhu6NjIHTDrWNoDQogICAgICAgICAgICAgICAgICogTk1UVUFOMiAyOC4xMS4yMDIxDQogICAgICAgICAgICAgICAgICovCgogICAgICAgICAgICAgICAgbWUuc2VsZWN0ZWQucmVtb3ZlKHJlY29yZCk7CiAgICAgICAgICAgICAgICBtZS5zZWxlY3Rpb25DaGFuZ2UobWUuc2VsZWN0ZWQpOwogICAgICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAgICAgICogSMOgbSBjdXN0b20geOG7rSBsw70gdGjDqm0NCiAgICAgICAgICAgICAgICAgKiBOVEJBTyAwMi4xMS4yMDIxDQogICAgICAgICAgICAgICAgICovCgogICAgICAgICAgICAgICAgbWUuY3VzdG9tQWZ0ZXJEZWxldGUoZGVsZXRlUmVjb3JkLCByZXN1bHQpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA2MTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAvKioNCiAgICAgICAgICAgICAgICAgKiBT4butYSBs4buXaSBraGkgeMOzYSBuaGnhu4F1IGLhuqNuIGdoaQ0KICAgICAgICAgICAgICAgICAqIE1vZGlmaXlCeTogTlRBbmggKDA5LzAzLzIwMjEpDQogICAgICAgICAgICAgICAgICogTW9kaWZpeUJ5OiBOVFRIQU5IMSAoMjAvMTEvMjAyMSkNCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIENPREUgPSBtZS4kbXMuZW51bS5TZXJ2aWNlUmVzcG9uc2VDb2RlOwogICAgICAgICAgICAgICAgbW9kdWxlTmFtZSA9IG1lLmdldE1vZHVsZU5hbWUoKSwgZmllbGQgPSAoX21lJGdldEZpZWxkcyA9IG1lLmdldEZpZWxkcygpKSAhPT0gbnVsbCAmJiBfbWUkZ2V0RmllbGRzICE9PSB2b2lkIDAgPyBfbWUkZ2V0RmllbGRzIDogX3RoaXM2LiRzdG9yZS5zdGF0ZVttZS5tb2R1bGVdLl9jb25maWcuZmllbGQsIGxpc3RBcmlzZW5kID0gW107IC8vQmnhur9uIMSRw6FuaCBk4bqldSBuaGnhu4F1IGLhuqNuIGdoaSBwaMOhdCBzaW5oCiAgICAgICAgICAgICAgICAvLyBOaGnhu4F1IGLhuqNuIMSRw6MgY8OzIHBow6F0IHNpbmgKCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LkRhdGEgJiYgcmVzdWx0LkRhdGEubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICBpc0FyaXNlTXVsdGkgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LkRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgLy8gbOG6pXkgdW5pcXVlIGhv4bq3YyBuYW1lCiAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGZpZWxkLnVuaXF1ZSB8fCBmaWVsZC5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgbGlzdEFyaXNlbmQucHVzaChlbGVtZW50LkVudGl0eVtuYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gLy8gMSBi4bqjbiBnaGkgY8OzIHBow6F0IHNpbmg6CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgaXNBcmlzZU11bHRpID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIG5hbWUgPSBmaWVsZC51bmlxdWUgfHwgZmllbGQubmFtZTsKICAgICAgICAgICAgICAgICAgb2JqID0gcmVzdWx0LkRhdGFbMF07CiAgICAgICAgICAgICAgICAgIGxpc3RBcmlzZW5kLnB1c2gob2JqLkVudGl0eVtuYW1lXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gcmVzdWx0LkNvZGU7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IF9jb250ZXh0Ni50MCA9PT0gQ09ERS5EZWxldGVNdWx0aUFyaXNlbmVkID8gMTUgOiBfY29udGV4dDYudDAgPT09IENPREUuQXJpc2VuZWQgPyAzNyA6IF9jb250ZXh0Ni50MCA9PT0gQ09ERS5QYXJ0SW52YWxpZERhdGEgPyA0NyA6IDU1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkLmlzSW5hY3RpdmVBbmREZWxldGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAzNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy9DaOG7iSB0aMO0bmcgYsOhbyBuZ+G7q25nIHPhu60gZOG7pW5nIHbDoCB4w7NhIHbhu5tpIGPDoWMgbcOgbiBkYW5oIG3hu6VjCiAgICAgICAgICAgICAgICBjb25maWdNZXNzYWdlID0gbWUuZ2V0QXJpc2VDb25maXJtTWVzYWdlKG1vZHVsZU5hbWUsIGxpc3RBcmlzZW5kLCBDT0RFLkRlbGV0ZU11bHRpQXJpc2VuZWQpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIHJldHVybiBtZS4kbXMubXNnQm94LnNob3dRdWVzdGlvbihjb25maWdNZXNzYWdlKTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIGFuc3dlciA9IF9jb250ZXh0Ni5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKGFuc3dlciA9PSAiWWVzIikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAzMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8ga+G6v3QgcXXhuqMgeMOzYQogICAgICAgICAgICAgICAgLy9OZ+G7q25nIHPhu60gZOG7pW5nIGLhuqNuIGdoaSBwaMOhdCBzaW5oCiAgICAgICAgICAgICAgICByZWNvcmRzSW5hY3RpdmUgPSBbXTsgLy9t4bqjbmcgYuG6o24gZ2hpIGPhuqduIG5n4burbmcgc+G7rSBk4bulbmcKCiAgICAgICAgICAgICAgICByZXN1bHQuRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgIHJlY29yZHNJbmFjdGl2ZS5wdXNoKGVsZW1lbnQuRW50aXR5KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIHJldHVybiBtZS5zZXRJbmFjdGl2ZUFyaXNlKHJlY29yZHNJbmFjdGl2ZSk7CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgICBpbmFjdGl2ZUFyaXNlID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICAvL1jDs2EgYuG6o24gZ2hpIGtow7RuZyBwaMOhdCBzaW5oCiAgICAgICAgICAgICAgICByZWNvcmRzRGVsZXRlID0gW107IC8vbeG6o25nIGLhuqNuIGdoaSBj4bqnbiB4w7NhCgogICAgICAgICAgICAgICAgaWYgKCEocmVjb3JkLmxlbmd0aCA+IHJlY29yZHNJbmFjdGl2ZS5sZW5ndGgpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vTuG6v3UgY8OzIGLhuqNuIGdoaSBraMO0bmcgcGjDoXQgc2luaCB0aMOsIG1zIHjDs2EKICAgICAgICAgICAgICAgIHJlY29yZC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW1SZWNvcmQpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZER1cGxpY2F0ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICByZWNvcmRzSW5hY3RpdmUuZmlsdGVyKGZ1bmN0aW9uIChpdGVtUmVjb3Jkc0luYWN0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1SZWNvcmRzSW5hY3RpdmVbZmllbGQua2V5XSA9PSBpdGVtUmVjb3JkW2ZpZWxkLmtleV0pIHsKICAgICAgICAgICAgICAgICAgICAgIHJlY29yZER1cGxpY2F0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIGlmICghcmVjb3JkRHVwbGljYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcmVjb3Jkc0RlbGV0ZS5wdXNoKGl0ZW1SZWNvcmQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzE7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuZGVsZXRlTXV0aVJvd3NOb0NvbmZpcm0ocmVjb3Jkc0RlbGV0ZSk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBkZWxldGVOb0FyaXNlID0gX2NvbnRleHQ2LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgICAvL1Nob3cgdG9hc3QgdGjDtG5nIGLDoW8KICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzRGVsZXRlLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgLy9OZ+G7q25nIHPhu60gZOG7pW5nIHbDoCB4w7NhCiAgICAgICAgICAgICAgICAgIGlmIChpbmFjdGl2ZUFyaXNlLlN1Y2Nlc3MgJiYgZGVsZXRlTm9BcmlzZS5TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgbWUuJHRvYXN0LnN1Y2Nlc3MobWUuJHQoImkxOG5CYXNlRm9ybS5TYXZlU3VjY2Vzc01lc3NhZ2UiKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbWUuJHRvYXN0LmVycm9yKG1lLiR0KCJpMThuQmFzZUZvcm0uU2F2ZUVycm9yTWVzc2FnZSIpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgLy9DaOG7iSBuZ+G7q25nIHPhu60gZOG7pW5nCiAgICAgICAgICAgICAgICAgIGlmIChpbmFjdGl2ZUFyaXNlLlN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBtZS4kdG9hc3Quc3VjY2VzcyhtZS4kdCgiaTE4bkJhc2VGb3JtLlNhdmVTdWNjZXNzTWVzc2FnZSIpKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtZS4kdG9hc3QuZXJyb3IobWUuJHQoImkxOG5CYXNlRm9ybS5TYXZlRXJyb3JNZXNzYWdlIikpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMzM6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDM2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgICBtZS4kbXMubXNnQm94LnNob3dXYXJuaW5nKG1lLiR0KCJpMThuQmFzZUZvcm0uVmFsaWRhdGUuQ2FuTm90RGVsZXRlQXJpc2UiKSk7CgogICAgICAgICAgICAgIGNhc2UgMzY6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgiYnJlYWsiLCA1OCk7CgogICAgICAgICAgICAgIGNhc2UgMzc6CiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkLmlzSW5hY3RpdmVBbmREZWxldGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA0NTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy9DaOG7iSB0aMO0bmcgYsOhbyBuZ+G7q25nIHPhu60gZOG7pW5nIHbDoCB4w7NhIHbhu5tpIGPDoWMgbcOgbiBkYW5oIG3hu6VjCiAgICAgICAgICAgICAgICBjb25maWdNZXNzYWdlID0gbWUuZ2V0QXJpc2VDb25maXJtTWVzYWdlKG1vZHVsZU5hbWUsIGxpc3RBcmlzZW5kLCBDT0RFLkFyaXNlbmVkKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNDE7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuJG1zLm1zZ0JveC5zaG93UXVlc3Rpb24oY29uZmlnTWVzc2FnZSk7CgogICAgICAgICAgICAgIGNhc2UgNDE6CiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBfY29udGV4dDYuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoYW5zd2VyID09ICJZZXMiKSB7CiAgICAgICAgICAgICAgICAgIC8vTmfhu6tuZyBz4butIGThu6VuZyBi4bqjbiBnaGkgcGjDoXQgc2luaAogICAgICAgICAgICAgICAgICBtZS5zZXRBY3RpdmVNdXRpUm93cyhyZXN1bHQuRGF0YVswXS5FbnRpdHksICJpbmFjdGl2ZSIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNDY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA0NToKICAgICAgICAgICAgICAgIG1lLiRtcy5tc2dCb3guc2hvd1dhcm5pbmcobWUuJHQoImkxOG5CYXNlRm9ybS5WYWxpZGF0ZS5DYW5Ob3REZWxldGVBcmlzZSIpKTsKCiAgICAgICAgICAgICAgY2FzZSA0NjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJicmVhayIsIDU4KTsKCiAgICAgICAgICAgICAgY2FzZSA0NzoKICAgICAgICAgICAgICAgIGlmICghaXNBcmlzZU11bHRpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG1lLiRtcy5tc2dCb3guc2hvd1dhcm5pbmcobWUuJHQoImkxOG5CYXNlRm9ybS5WYWxpZGF0ZS5FcnJvckRlbGV0ZU11bHRpIikpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoImJyZWFrIiwgNTgpOwoKICAgICAgICAgICAgICBjYXNlIDUyOgogICAgICAgICAgICAgICAgLy9tZS4kdG9hc3QuZXJyb3IobWUuJHQoImkxOG5CYXNlRm9ybS5WYWxpZGF0ZS5OZXdNZXNzYWdlRGVsZXRlIikuZm9ybWF0KG1vZHVsZU5hbWUsIGNvZGVzKSk7CiAgICAgICAgICAgICAgICBtZS4kbXMubXNnQm94LnNob3dXYXJuaW5nKG1lLiR0KCJpMThuQmFzZUZvcm0uVmFsaWRhdGUuRXJyb3JEZWxldGVNdWx0aSIpKTsKCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LkRhdGEpIHsKICAgICAgICAgICAgICAgICAga2V5RmllbGQgPSBtZS4kc3RvcmUuc3RhdGVbbWUubW9kdWxlXS5fY29uZmlnLmZpZWxkLmtleTsKICAgICAgICAgICAgICAgICAgcmVjb3JkLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQuRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaVtrZXlGaWVsZF0gIT0gaXRlbS5FbnRpdHlba2V5RmllbGRdICYmIGlba2V5RmllbGRdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lLmdyaWQuZGF0YXgucmVtb3ZlKGkpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gLy8gcmVjb3JkID0gW107CiAgICAgICAgICAgICAgICAvL21lLnNlbGVjdGlvbkNoYW5nZShyZWNvcmQpOwogICAgICAgICAgICAgICAgLy8gbWUuc2VsZWN0ZWQgPSBbXTsKICAgICAgICAgICAgICAgIC8vbWUucmVsb2FkKCk7CgoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJicmVhayIsIDU4KTsKCiAgICAgICAgICAgICAgY2FzZSA1NToKICAgICAgICAgICAgICAgIGlmICghaXNBcmlzZU11bHRpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG1lLiRtcy5tc2dCb3guc2hvd1dhcm5pbmcobWUuJHQoImkxOG5CYXNlRm9ybS5WYWxpZGF0ZS5FcnJvckRlbGV0ZU11bHRpIikpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoImJyZWFrIiwgNTgpOwoKICAgICAgICAgICAgICBjYXNlIDU4OgogICAgICAgICAgICAgICAgcmVjb3JkID0gW107CiAgICAgICAgICAgICAgICBtZS5zZWxlY3RlZCA9IFtdOwogICAgICAgICAgICAgICAgbWUucmVsb2FkKCk7CgogICAgICAgICAgICAgIGNhc2UgNjE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqDQogICAgICogQ8OidSB0aMO0bmcgYsOhbyBraGkgY8OzIHBow6F0IHNpbmggZOG7ryBsaeG7h3UNCiAgICAgKiBOVFRIQU5IMQ0KICAgICAqLwogICAgZ2V0QXJpc2VDb25maXJtTWVzYWdlOiBmdW5jdGlvbiBnZXRBcmlzZUNvbmZpcm1NZXNhZ2UobW9kdWxlTmFtZSwgbGlzdEFyaXNlbmQsIGNvZGUpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIENPREUgPSBtZS4kbXMuZW51bS5TZXJ2aWNlUmVzcG9uc2VDb2RlOwogICAgICB2YXIgdGl0bGVOYW1lID0gbWUuJHQoImkxOG5CYXNlRm9ybS5NZXNzYWdlLkNvbmZpcm1EZWxldGVUaXRsZSIpLmZvcm1hdChtb2R1bGVOYW1lKSwKICAgICAgICAgIG1lcywKICAgICAgICAgIG1lc0xpc3RBcmlzZTsgLy9CdWlsZCBjw6J1IHRow7RuZyBiw6FvCgogICAgICBtZXNMaXN0QXJpc2UgPSBsaXN0QXJpc2VuZC5sZW5ndGggPiAyID8gIjxiPiIuY29uY2F0KGxpc3RBcmlzZW5kWzBdLCAiPC9iPiwgPGI+IikuY29uY2F0KGxpc3RBcmlzZW5kWzFdLCAiPC9iPiB2XHhFMCA8Yj4iKS5jb25jYXQobGlzdEFyaXNlbmQubGVuZ3RoIC0gMiwgIjwvYj4gIikuY29uY2F0KG1vZHVsZU5hbWUsICIga2hceEUxYyIpIDogIjxiPiIuY29uY2F0KGxpc3RBcmlzZW5kLmpvaW4oIjwvYj4sIDxiPiIpLCAiPC9iPiIpOwogICAgICBtZXMgPSBtZS5nZXRBcmlzZU1lc3NhZ2UoY29kZSwgbGlzdEFyaXNlbmQsIG1lc0xpc3RBcmlzZSwgbW9kdWxlTmFtZSk7IC8vQ29uZmlnIGPDoWMgYnV0dG9uCgogICAgICB2YXIgYnRuQ29uZmlnID0gW3sKICAgICAgICBrZXk6ICJObyIsCiAgICAgICAgdGFyZ2V0OiAiUmlnaHQiLAogICAgICAgIHRleHQ6ICJI4buneSIsCiAgICAgICAgdHlwZUJ1dHRvbjogInNlY29uZGFyeSIKICAgICAgfSwgewogICAgICAgIGtleTogIlllcyIsCiAgICAgICAgdGFyZ2V0OiAiUmlnaHQiLAogICAgICAgIHRleHQ6ICLEkOG7k25nIMO9IiwKICAgICAgICBmb2N1czogdHJ1ZSwKICAgICAgICB0eXBlQnV0dG9uOiAiYmx1ZSIKICAgICAgfV07CiAgICAgIHJldHVybiB7CiAgICAgICAgdGl0bGU6IHRpdGxlTmFtZSwKICAgICAgICBtZXNzYWdlOiBtZXMsCiAgICAgICAgYnRuQ29uZmlnOiBidG5Db25maWcKICAgICAgfTsKICAgIH0sCgogICAgLyoqDQogICAgICogTOG6pXkgY8OidSB0aMO0bmcgYsOhbyBraGkgcGjDoXQgc2luaA0KICAgICAqIFZp4bq/dCByacOqbmcgcmEgxJHhu4Mgb3ZlcnJpZGUgbOG6oWkgdsOsIG3hu5l0IHPhu5EgbcOgbiBjw7MgY8OidSB0aMO0bmcgYsOhbyBsw6AgTmfhu6tuZyB0aGVvIGTDtWkgdGhheSB2w6wgTmfhu6tuZyBz4butIGThu6VuZw0KICAgICAqIEBwYXJhbSB7Kn0gY29kZQ0KICAgICAqIE5URElFTSAxNS4xMi4yMDIxDQogICAgICovCiAgICBnZXRBcmlzZU1lc3NhZ2U6IGZ1bmN0aW9uIGdldEFyaXNlTWVzc2FnZShjb2RlLCBsaXN0QXJpc2VuZCwgbWVzTGlzdEFyaXNlLCBtb2R1bGVOYW1lKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBtZXMgPSAiIjsKICAgICAgdmFyIENPREUgPSBtZS4kbXMuZW51bS5TZXJ2aWNlUmVzcG9uc2VDb2RlOwoKICAgICAgc3dpdGNoIChjb2RlKSB7CiAgICAgICAgY2FzZSBDT0RFLkRlbGV0ZU11bHRpQXJpc2VuZWQ6CiAgICAgICAgICBtZXMgPSBtZS4kdCgiaTE4bkJhc2VGb3JtLlZhbGlkYXRlLkRlbGV0ZU11bHRpSGFzTXVsdGlBcmlzZW5lZCIpLmZvcm1hdChtb2R1bGVOYW1lLCBtZXNMaXN0QXJpc2UpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8geMOzYSAxIGLhuqNuIGdoaSB2w6AgYuG6o24gZ2hpIMSRw7MgYuG7iyBjw7MgcGjDoXQgc2luaDoKCiAgICAgICAgY2FzZSBDT0RFLkFyaXNlbmVkOgogICAgICAgICAgbWVzID0gbWUuJHQoImkxOG5CYXNlRm9ybS5WYWxpZGF0ZS5EZWxldGVBcmlzZSIpLmZvcm1hdChtb2R1bGVOYW1lLCBsaXN0QXJpc2VuZFswXSk7CiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIG1lczsKICAgIH0sCgogICAgLyoqDQogICAgICogTmfhu6tuZyBz4butIGThu6VuZyBi4bqjbiBnaGkgcGjDoXQgc2luaCBk4buvIGxp4buHdQ0KICAgICAqIE5UVEhBTkgxDQogICAgICovCiAgICBzZXRJbmFjdGl2ZUFyaXNlOiBmdW5jdGlvbiBzZXRJbmFjdGl2ZUFyaXNlKHJlY29yZHMpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNygpIHsKICAgICAgICB2YXIgbWUsIGluYWN0aXZlLCBmaWVsZCwgbGlzdElELCBwYXJhbTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWUgPSBfdGhpczc7CiAgICAgICAgICAgICAgICBpbmFjdGl2ZSA9IDE7CgogICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7CiAgICAgICAgICAgICAgICAgIHJlY29yZHMgPSBbcmVjb3Jkc107CiAgICAgICAgICAgICAgICB9IC8vc2hvdyBtYXNrCiAgICAgICAgICAgICAgICAvLyBtZS5sb2FkaW5nID0gdHJ1ZTsKCgogICAgICAgICAgICAgICAgZmllbGQgPSBtZS4kc3RvcmUuc3RhdGVbbWUubW9kdWxlXS5fY29uZmlnLmZpZWxkOwogICAgICAgICAgICAgICAgbGlzdElEID0gcmVjb3Jkcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bZmllbGQua2V5XTsKICAgICAgICAgICAgICAgIH0pLmpvaW4oIiwiKTsKICAgICAgICAgICAgICAgIHBhcmFtID0gewogICAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IGZpZWxkLnRhYmxlLAogICAgICAgICAgICAgICAgICBLZXlGaWVsZDogZmllbGQua2V5LAogICAgICAgICAgICAgICAgICBWYWx1ZTogaW5hY3RpdmUsCiAgICAgICAgICAgICAgICAgIExpc3RJRDogbGlzdElELAogICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb25JRDogbWUuZ2V0T3JnYW5pemF0aW9uRmlsdGVyKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuJHN0b3JlLmRpc3BhdGNoKCIiLmNvbmNhdChfdGhpczcubW9kdWxlLCAiL3VwZGF0ZVN0YXR1cyIpLCBwYXJhbSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDcuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBYw7NhIG5oaeG7gXUgYuG6o24gZ2hpIGtow7RuZyBj4bqnbiBwb3VwIHRow7RuZyBiw6FvDQogICAgICogTlRUSEFOSDENCiAgICAgKi8KICAgIGRlbGV0ZU11dGlSb3dzTm9Db25maXJtOiBmdW5jdGlvbiBkZWxldGVNdXRpUm93c05vQ29uZmlybShyZWNvcmRzKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIG1lLCB0ZW1wcywgYXVkaXRpbmdMb2csIHBhcmFtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtZSA9IF90aGlzODsKICAgICAgICAgICAgICAgIHRlbXBzID0gW107CiAgICAgICAgICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkgewogICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHt9OyAvL0Lhu48gYuG7m3QgY8OhYyB0aMO0bmcgdGluIGfhu61pIGzDqm4gc3YuCgogICAgICAgICAgICAgICAgICB2YXIgZHJvcGVkQ29sdW1ucyA9IG1lLmdldElnbm9yZWRDb2x1bW5zKCk7CgogICAgICAgICAgICAgICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKGkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNEcm9wZWRDb2x1bW4gPSBkcm9wZWRDb2x1bW5zLmZpbmQoZnVuY3Rpb24gKF8pIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfID09IGk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGlmICghaXNEcm9wZWRDb2x1bW4pIHsKICAgICAgICAgICAgICAgICAgICAgIHRlbXBbaV0gPSByZWNvcmRbaV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZWNvcmQpIHsKICAgICAgICAgICAgICAgICAgICBfbG9vcDIoaSk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRlbXBzLnB1c2godGVtcCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGF1ZGl0aW5nTG9nID0gewogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTVNKc29uLnNlcmlhbGl6ZShtZS5nZW5lcmF0ZURlc2NyaXB0aW9uQXVkaXRpbmdMb2cocmVjb3JkcykpLAogICAgICAgICAgICAgICAgICByZWZlcmVuY2U6IG1lLmJ1aWxkUmVmZXJlbmNlKHJlY29yZHMpLAogICAgICAgICAgICAgICAgICBhY3Rpb246IG1lLmFjdGlvbkF1ZGl0aW5nTG9nLAogICAgICAgICAgICAgICAgICBlbnRpdHk6IG1lLm1vZHVsZSwKICAgICAgICAgICAgICAgICAgdGltZTogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBhcmFtID0gewogICAgICAgICAgICAgICAgICBFbnRpdHk6IHRlbXBzLAogICAgICAgICAgICAgICAgICBCeVBhc3NWYWxpZGF0ZTogbnVsbCwKICAgICAgICAgICAgICAgICAgQXVkaXRpbmdMb2c6IE1TSnNvbi5zZXJpYWxpemUoYXVkaXRpbmdMb2cpLAogICAgICAgICAgICAgICAgICBUeXBlOiBtZS4kbXMuZW51bS5EZWxldGVUeXBlLk11bHRpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIG1lLiRzdG9yZS5kaXNwYXRjaCgiIi5jb25jYXQoX3RoaXM4Lm1vZHVsZSwgIi9kZWxldGUiKSwgcGFyYW0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ4LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqDQogICAgICogSMOgbSBjdXN0b20gZMO5bmcgY2hvIHjhu60gbMO9IHRow6ptIHNhdSBraGkgeMOzYQ0KICAgICAqIE5UQkFPIDAyLjExLjIwMjENCiAgICAgKi8KICAgIGN1c3RvbUFmdGVyRGVsZXRlOiBmdW5jdGlvbiBjdXN0b21BZnRlckRlbGV0ZShkZWxldGVSZWNvcmQsIHJlc3VsdCkge30sCiAgICBnZXRGaWVsZHM6IGZ1bmN0aW9uIGdldEZpZWxkcygpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEzhuqV5IHRoYW0gc+G7kSBraGkgbeG7nyBmb3JtIGNoaSB0aeG6v3QNCiAgICAgKiAqLwogICAgZ2V0RGV0YWlsUGFyYW1ldGVyOiBmdW5jdGlvbiBnZXREZXRhaWxQYXJhbWV0ZXIoZm9ybU5hbWUsIG1vZGUsIGRlZmF1bHREYXRhKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBwYXJhbSA9IHsKICAgICAgICBkYXRhOiBkZWZhdWx0RGF0YSB8fCBudWxsCiAgICAgIH07CgogICAgICBzd2l0Y2ggKG1vZGUpIHsKICAgICAgICBjYXNlIG1lLiRtcy5lbnVtLkZvcm1TdGF0ZS5EdXBsaWNhdGU6CiAgICAgICAgY2FzZSBtZS4kbXMuZW51bS5Gb3JtU3RhdGUuRWRpdDoKICAgICAgICBjYXNlIG1lLiRtcy5lbnVtLkZvcm1TdGF0ZS5WaWV3OgogICAgICAgICAgdmFyIGtleUZpZWxkID0gbWUuJHN0b3JlLnN0YXRlW21lLm1vZHVsZV0uX2NvbmZpZy5maWVsZC5rZXk7CgogICAgICAgICAgaWYgKGtleUZpZWxkKSB7CiAgICAgICAgICAgIHBhcmFtLmlkID0gZGVmYXVsdERhdGFba2V5RmllbGRdOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBwYXJhbS5tb2RlID0gbW9kZTsKICAgICAgbWUuY3VzdG9tRGV0YWlsUGFyYW0ocGFyYW0pOwogICAgICByZXR1cm4gcGFyYW07CiAgICB9LAogICAgY3VzdG9tRGV0YWlsUGFyYW06IGZ1bmN0aW9uIGN1c3RvbURldGFpbFBhcmFtKHBhcmFtKSB7fSwKCiAgICAvKioNCiAgICAgKiBob3ZlciBi4bqjbiBnaGkgLT4gaGnhu4NuIHRo4buLIG1lbnUNCiAgICAgKi8KICAgIGdyaWRSb3dIb3ZlcjogZnVuY3Rpb24gZ3JpZFJvd0hvdmVyKCkge30sCgogICAgLyoqDQogICAgICogY2xpY2sgYuG6o24gZ2hpIC0+IGhp4buDbiB0aOG7iyBtZW51DQogICAgICovCiAgICBncmlkUm93T3ZlcjogZnVuY3Rpb24gZ3JpZFJvd092ZXIocmVjb3JkLCBlKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIG1lLnJvd0FjdGlvbnMgPSBtZS5nZXRSZWNvcmRBY3Rpb25zKHJlY29yZCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIGzhuqV5IGRhbmggc8OhY2ggYWN0aW9uIGPhu6dhIGLhuqNuIGdoaQ0KICAgICAqLwogICAgZ2V0UmVjb3JkQWN0aW9uczogZnVuY3Rpb24gZ2V0UmVjb3JkQWN0aW9ucyhyZWNvcmQpIHsKICAgICAgcmV0dXJuIFt7CiAgICAgICAgY29tbWFuZDogIkVkaXQiLAogICAgICAgIGljb246ICJlZGl0IiwKICAgICAgICB0ZXh0OiB0aGlzLiR0KCJpMThuQ29tbW9uLmNvbW1hbmQuZWRpdCIpCiAgICAgIH0sIHsKICAgICAgICBjb21tYW5kOiAiRGVsZXRlIiwKICAgICAgICBpY29uOiAiZGVsZXRlIiwKICAgICAgICB0ZXh0OiB0aGlzLiR0KCJpMThuQ29tbW9uLmNvbW1hbmQuZGVsZXRlIikKICAgICAgfV07CiAgICB9LAoKICAgIC8qKg0KICAgICAqIGNsaWNrIGFjdGlvbiByb3cNCiAgICAgKi8KICAgIGdyaWRSb3dBY3Rpb25DbGljazogZnVuY3Rpb24gZ3JpZFJvd0FjdGlvbkNsaWNrKGNvbW1hbmQsIHJlY29yZCwgZXZlbnQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIHN3aXRjaCAoY29tbWFuZCkgewogICAgICAgIGNhc2UgIkVkaXQiOgogICAgICAgICAgbWUuZWRpdChyZWNvcmQpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIkRlbGV0ZSI6CiAgICAgICAgICBtZS5kZWxldGUocmVjb3JkKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJEdXBsaWNhdGUiOgogICAgICAgICAgbWUuZHVwbGljYXRlKHJlY29yZCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAiVmlldyI6CiAgICAgICAgICBtZS52aWV3KHJlY29yZCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAiYWN0aXZlIjoKICAgICAgICBjYXNlICJpbmFjdGl2ZSI6CiAgICAgICAgICBtZS5zZXRBY3RpdmVNdXRpUm93cyhyZWNvcmQsIGNvbW1hbmQpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBtZS4kbXMubXNnQm94LnNob3dJbmZvKG1lLiR0KCJpMThuQ29tbW9uLkZlYXR1cmVzSXNEZXZlbG9waW5nIikpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogVGhheSDEkeG7lWkgYuG6o24gZ2hpIGNo4buNbg0KICAgICAqLwogICAgc2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiBzZWxlY3Rpb25DaGFuZ2UocmVjb3JkcykgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIgYWN0aW9ucyA9IFtdOwoKICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID49IDEpIHsKICAgICAgICBhY3Rpb25zID0gbWUuZ2V0QWN0aW9uTXVsdGkocmVjb3JkcywgbWUuc2VsZWN0QWxsUGFnZSk7CiAgICAgIH0KCiAgICAgIG1lLmFjdGlvbk11bHRpID0gYWN0aW9uczsKICAgIH0sCgogICAgLyoqDQogICAgICogTOG6pXkgZGFuaCBzw6FjaCBhY3Rpb24geOG7rSBsw70ga2hpIG5oaeG7gXUgYuG6o24gZ2hpIMSRxrDhu6NjIGNo4buNbg0KICAgICAqIFRETkdISUEgMTAvMTAvMjAyMQ0KICAgICAqIG3hurdjIMSR4buLbmggY2jhu4kgY+G6p24geMOzYSBuaGnhu4F1IHRow7RpLCBtw6BuIG7DoG8gdGjDqm0gdMOtbmggbsSDbmcgdGjDrCBwaOG6o2kgb3ZlcnJpZGUgbOG6oWkNCiAgICAgKi8KICAgIGdldEFjdGlvbk11bHRpOiBmdW5jdGlvbiBnZXRBY3Rpb25NdWx0aShyZWNvcmRzLCBzZWxlY3RBbGxQYWdlKSB7CiAgICAgIHJldHVybiBbewogICAgICAgIGNvbW1hbmQ6ICJhY3RpdmUiLAogICAgICAgIHRleHQ6ICJUaGVvIGTDtWkiLAogICAgICAgIGNsczogInNlY29uZGFyeS1vdXRsaW5lIgogICAgICB9LCB7CiAgICAgICAgY29tbWFuZDogImluYWN0aXZlIiwKICAgICAgICB0ZXh0OiAiTmfhu6tuZyB0aGVvIGTDtWkiLAogICAgICAgIGNsczogInByaW1hcnktb3V0bGluZSIKICAgICAgfSwgewogICAgICAgIGNvbW1hbmQ6ICJkZWxldGUiLAogICAgICAgIHRleHQ6ICJYw7NhIiwKICAgICAgICBjbHM6ICJzZWNvbmRhcnktb3V0bGluZS1yZWQiCiAgICAgIH1dOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBDbGljayB2w6BvIGFjdGlvbiBjaOG7jW4gbmhp4buBdSBi4bqjbiBnaGkNCiAgICAgKi8KICAgIG11bHRpU2VsZWN0QWN0aW9uQ2xpY2s6IGZ1bmN0aW9uIG11bHRpU2VsZWN0QWN0aW9uQ2xpY2soY29tbWFuZCwgcmVjb3Jkcywgc2VsZWN0QWxsUGFnZSwgZXZlbnQpIHsKICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgIHN3aXRjaCAoY29tbWFuZCkgewogICAgICAgIGNhc2UgImRlbGV0ZSI6CiAgICAgICAgICBtZS5kZWxldGVNdXRpUm93cyhyZWNvcmRzKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJhY3RpdmUiOgogICAgICAgIGNhc2UgImluYWN0aXZlIjoKICAgICAgICAgIG1lLnNldEFjdGl2ZU11dGlSb3dzKHJlY29yZHMsIGNvbW1hbmQpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0sCgogICAgLyoNCiAgICAgKiAgSMOgbSB4w7NhIG5oaeG7gXUgYuG6o24gZ2hpLg0KICAgICAqIEBtb2RpZmllZCBieSBUVkxvaSAyMS4wNi4yMDIxLiBsxrDhu6NjIGLhu48gMSBz4buRIHRow7RuZyB0aW4gdHLGsOG7m2Mga2hpIGfhu61pIGLhuqNuIGdoaSBsw6puIHNlcnZlDQogICAgICovCiAgICBkZWxldGVNdXRpUm93czogZnVuY3Rpb24gZGVsZXRlTXV0aVJvd3MocmVjb3JkcykgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICAgIHZhciBtZSwgY29uZmlnTWVzc2FnZSwgYW5zd2VyLCB0ZW1wcywgYXVkaXRpbmdMb2csIHBhcmFtLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1lID0gX3RoaXM5OwoKICAgICAgICAgICAgICAgIGlmIChtZS5jaGVja0FjdGlvblBlcm1pc3Npb25BbGVydChtZS4kdCgiaTE4blBlcm1pc3Npb24uU3ViU3lzdGVtQ29kZS5Db2RlLkRFTEVURSIpKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgaWYgKG1lLnZhbGlkYXRlQmVmb3JlRGVsZXRlKHJlY29yZHMpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuZ2V0RGVsZXRlQ29uZmlybU1lc3NhZ2UocmVjb3Jkcyk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGNvbmZpZ01lc3NhZ2UgPSBfY29udGV4dDkuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUuJG1zLm1zZ0JveC5zaG93UXVlc3Rpb24oY29uZmlnTWVzc2FnZSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBfY29udGV4dDkuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShhbnN3ZXIgPT0gIlllcyIpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRlbXBzID0gW107CiAgICAgICAgICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkgewogICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHt9OyAvL0Lhu48gYuG7m3QgY8OhYyB0aMO0bmcgdGluIGfhu61pIGzDqm4gc3YuCgogICAgICAgICAgICAgICAgICB2YXIgZHJvcGVkQ29sdW1ucyA9IG1lLmdldElnbm9yZWRDb2x1bW5zKCk7CgogICAgICAgICAgICAgICAgICB2YXIgX2xvb3AzID0gZnVuY3Rpb24gX2xvb3AzKGkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNEcm9wZWRDb2x1bW4gPSBkcm9wZWRDb2x1bW5zLmZpbmQoZnVuY3Rpb24gKF8pIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfID09IGk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGlmICghaXNEcm9wZWRDb2x1bW4pIHsKICAgICAgICAgICAgICAgICAgICAgIHRlbXBbaV0gPSByZWNvcmRbaV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZWNvcmQpIHsKICAgICAgICAgICAgICAgICAgICBfbG9vcDMoaSk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRlbXBzLnB1c2godGVtcCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGF1ZGl0aW5nTG9nID0gewogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTVNKc29uLnNlcmlhbGl6ZShtZS5nZW5lcmF0ZURlc2NyaXB0aW9uQXVkaXRpbmdMb2cocmVjb3JkcykpLAogICAgICAgICAgICAgICAgICByZWZlcmVuY2U6IG1lLmJ1aWxkUmVmZXJlbmNlKHJlY29yZHMpLAogICAgICAgICAgICAgICAgICBhY3Rpb246IG1lLmFjdGlvbkF1ZGl0aW5nTG9nLAogICAgICAgICAgICAgICAgICBlbnRpdHk6IG1lLm1vZHVsZSwKICAgICAgICAgICAgICAgICAgdGltZTogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBhcmFtID0gewogICAgICAgICAgICAgICAgICBFbnRpdHk6IHRlbXBzLAogICAgICAgICAgICAgICAgICBCeVBhc3NWYWxpZGF0ZTogbnVsbCwKICAgICAgICAgICAgICAgICAgQXVkaXRpbmdMb2c6IE1TSnNvbi5zZXJpYWxpemUoYXVkaXRpbmdMb2cpLAogICAgICAgICAgICAgICAgICBUeXBlOiBtZS4kbXMuZW51bS5EZWxldGVUeXBlLk11bHRpCiAgICAgICAgICAgICAgICB9OyAvLyBDdXN0b20gbOG6oWkgcGFyYW0geMOzYQoKICAgICAgICAgICAgICAgIHBhcmFtID0gbWUuY3VzdG9tRGVsZXRlUGFyYW0ocmVjb3JkcywgcGFyYW0pOwogICAgICAgICAgICAgICAgbWUuJG1zLmNvbW1vbkZuLm1hc2soKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gbWUucmVxdWVzdERlbGV0ZURhdGEocmVjb3JkcywgcGFyYW0pOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgICBtZS4kbXMuY29tbW9uRm4udW5tYXNrKCk7CiAgICAgICAgICAgICAgICBtZS5hZnRlckRlbGV0ZShyZWNvcmRzLCByZXN1bHQpOyAvL2xvZyBmaXJlYmFzZQoKICAgICAgICAgICAgICAgIG1lLmxvZ0RhdGFGaXJlQmFzZSgpOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEjDoG0gY3VzdG9tIGRlbGV0ZSBwYXJhbQ0KICAgICAqIE5UQkFPOiAwNy4xMi4yMDIxDQogICAgICogQHBhcmFtIHsqfSBwYXJhbQ0KICAgICAqIEByZXR1cm5zDQogICAgICovCiAgICBjdXN0b21EZWxldGVQYXJhbTogZnVuY3Rpb24gY3VzdG9tRGVsZXRlUGFyYW0ocmVjb3JkLCBwYXJhbSkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICByZXR1cm4gcGFyYW07CiAgICB9LAoKICAgIC8qKg0KICAgICAqIENsaWNrIHbDoG8gYWN0aW9uIGNo4buNbiBuaGnhu4F1IGLhuqNuIGdoaTogQ2jhu41uIHThuqV0IGPhuqMNCiAgICAgKi8KICAgIG11bHRpU2VsZWN0QWxsQ2xpY2s6IGZ1bmN0aW9uIG11bHRpU2VsZWN0QWxsQ2xpY2soKSB7CiAgICAgIHRoaXMuc2VsZWN0QWxsUGFnZSA9ICF0aGlzLnNlbGVjdEFsbFBhZ2U7CgogICAgICBpZiAoIXRoaXMuc2VsZWN0QWxsUGFnZSkgewogICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTsKICAgICAgICB0aGlzLmdyaWQuY2hlY2thbGwgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdyaWQuY2hlY2thbGwgPSB0cnVlOwogICAgICAgIHRoaXMuZ3JpZC4kZW1pdCgiaW5wdXQiLCB0aGlzLmdyaWQuZGF0YXgpOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIELhu48gdMOtY2ggY2jhu41uIGPDoWMgYuG6o24gZ2hpDQogICAgICovCiAgICBtdWx0aVNlbGVjdFVuY2hlY2s6IGZ1bmN0aW9uIG11bHRpU2VsZWN0VW5jaGVjaygpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgbWUuc2VsZWN0ZWQgPSBbXTsgLy8gTk1UVUFOMiAyOC4xMS4yMDIxOiBi4buPIHTDrWNoIGNo4buNbiB0csOqbiBncmlkRWRpdG9yCgogICAgICBpZiAoQXJyYXkuaXNBcnJheShtZS5ncmlkLmxpc3RSb3dTZWxlY3RlZCkpIHsKICAgICAgICBtZS5ncmlkLmxpc3RSb3dTZWxlY3RlZCA9IFtdOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEtoYWkgYsOhbyBz4buxIGtp4buHbiBj4bunYSBmb3JtDQogICAgICovCiAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uIGluaXRFdmVudCgpIHsKICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgIGdyaWQgPSBtZS5ncmlkLAogICAgICAgICAgYWN0aW9uTXVsdGkgPSBtZS5hY3Rpb25NdWx0aUNvbXBvbmVudCwKICAgICAgICAgIGFjdGlvbk11bHRpQmlnU2NyZW5uID0gbWUuYWN0aW9uTXVsdGlCaWdTY3JlZW5Db21wb25lbnQ7CgogICAgICBpZiAoZ3JpZCkgewogICAgICAgIGdyaWQuJG9uKCJsb2FkRGF0YSIsIG1lLmxvYWREYXRhKTsKICAgICAgICBncmlkLiRvbigiZGJsY2xpY2siLCBtZS5ncmlkUm93RGJDbGljayk7CiAgICAgICAgZ3JpZC4kb24oInJvd21vdXNlb3ZlciIsIG1lLmdyaWRSb3dPdmVyKTsKICAgICAgICBncmlkLiRvbigicm93YWN0aW9uY2xpY2siLCBtZS5ncmlkUm93QWN0aW9uQ2xpY2spOwogICAgICAgIGdyaWQuJG9uKCJpbnB1dCIsIG1lLnNlbGVjdGlvbkNoYW5nZSk7CiAgICAgICAgZ3JpZC4kb24oImNoYW5nZXBhZ2VzaXplIiwgbWUuZ3JpZENoYW5nZVBhZ2VTaXplKTsKCiAgICAgICAgaWYgKCFncmlkLmlzR3JpZFRyZWUpIHsKICAgICAgICAgIGdyaWQuJG9uKCJmaWx0ZXIiLCBtZS5yZWxvYWQpOwogICAgICAgIH0KCiAgICAgICAgZ3JpZC4kb24oInJlc2l6ZUNvbCIsIG1lLmdyaWRSZXNpemVDb2wpOwogICAgICB9CgogICAgICBpZiAoYWN0aW9uTXVsdGkpIHsKICAgICAgICBhY3Rpb25NdWx0aS4kb24oImFjdGlvbmNsaWNrIiwgbWUubXVsdGlTZWxlY3RBY3Rpb25DbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGkuJG9uKCJzZWxlY3RhbGwiLCBtZS5tdWx0aVNlbGVjdEFsbENsaWNrKTsKICAgICAgICBhY3Rpb25NdWx0aS4kb24oInVuY2hlY2siLCBtZS5tdWx0aVNlbGVjdFVuY2hlY2spOwogICAgICB9CgogICAgICBpZiAoYWN0aW9uTXVsdGlCaWdTY3Jlbm4pIHsKICAgICAgICBhY3Rpb25NdWx0aUJpZ1NjcmVubi4kb24oImFjdGlvbmNsaWNrIiwgbWUubXVsdGlTZWxlY3RBY3Rpb25DbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGlCaWdTY3Jlbm4uJG9uKCJzZWxlY3RhbGwiLCBtZS5tdWx0aVNlbGVjdEFsbENsaWNrKTsKICAgICAgICBhY3Rpb25NdWx0aUJpZ1NjcmVubi4kb24oInVuY2hlY2siLCBtZS5tdWx0aVNlbGVjdFVuY2hlY2spOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIHJlbW92ZSBldmVudCBhZGQgxJHhu5luZw0KICAgICAqLwogICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50KCkgewogICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgZ3JpZCA9IG1lLmdyaWQsCiAgICAgICAgICBhY3Rpb25NdWx0aSA9IG1lLmFjdGlvbk11bHRpQ29tcG9uZW50LAogICAgICAgICAgYWN0aW9uTXVsdGlCaWdTY3Jlbm4gPSBtZS5hY3Rpb25NdWx0aUJpZ1NjcmVlbkNvbXBvbmVudDsKCiAgICAgIGlmIChncmlkKSB7CiAgICAgICAgZ3JpZC4kb2ZmKCJsb2FkRGF0YSIsIG1lLmxvYWREYXRhKTsKICAgICAgICBncmlkLiRvZmYoImRibGNsaWNrIiwgbWUuZ3JpZFJvd0RiQ2xpY2spOwogICAgICAgIGdyaWQuJG9mZigicm93bW91c2VvdmVyIiwgbWUuZ3JpZFJvd0NsaWNrKTsKICAgICAgICBncmlkLiRvZmYoInJvd2FjdGlvbmNsaWNrIiwgbWUuZ3JpZFJvd0FjdGlvbkNsaWNrKTsKICAgICAgICBncmlkLiRvZmYoImlucHV0IiwgbWUuc2VsZWN0aW9uQ2hhbmdlKTsKICAgICAgICBncmlkLiRvZmYoImNoYW5nZXBhZ2VzaXplIiwgbWUuZ3JpZENoYW5nZVBhZ2VTaXplKTsKCiAgICAgICAgaWYgKCFncmlkLmlzR3JpZFRyZWUpIHsKICAgICAgICAgIGdyaWQuJG9mZigiZmlsdGVyIiwgbWUucmVsb2FkKTsKICAgICAgICB9CgogICAgICAgIGdyaWQuJG9mZigicmVzaXplQ29sIiwgbWUuZ3JpZFJlc2l6ZUNvbCk7CiAgICAgIH0KCiAgICAgIGlmIChhY3Rpb25NdWx0aSkgewogICAgICAgIGFjdGlvbk11bHRpLiRvZmYoImFjdGlvbmNsaWNrIiwgbWUubXVsdGlTZWxlY3RBY3Rpb25DbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGkuJG9mZigic2VsZWN0YWxsIiwgbWUubXVsdGlTZWxlY3RBbGxDbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGkuJG9mZigidW5jaGVjayIsIG1lLm11bHRpU2VsZWN0VW5jaGVjayk7CiAgICAgIH0KCiAgICAgIGlmIChhY3Rpb25NdWx0aUJpZ1NjcmVubikgewogICAgICAgIGFjdGlvbk11bHRpQmlnU2NyZW5uLiRvZmYoImFjdGlvbmNsaWNrIiwgbWUubXVsdGlTZWxlY3RBY3Rpb25DbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGlCaWdTY3Jlbm4uJG9mZigic2VsZWN0YWxsIiwgbWUubXVsdGlTZWxlY3RBbGxDbGljayk7CiAgICAgICAgYWN0aW9uTXVsdGlCaWdTY3Jlbm4uJG9mZigidW5jaGVjayIsIG1lLm11bHRpU2VsZWN0VW5jaGVjayk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogWHXhuqV0IGto4bqpdSBleGNlbA0KICAgICAqLwogICAgZXhwb3J0RXhjZWw6IGZ1bmN0aW9uIGV4cG9ydEV4Y2VsKCkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAoKSB7CiAgICAgICAgdmFyIG1lLCBwYXJhbTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1lID0gX3RoaXMxMDsKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXMxMC5jaGVja0FjdGlvblBlcm1pc3Npb25BbGVydChtZS4kdCgiaTE4blBlcm1pc3Npb24uU3ViU3lzdGVtQ29kZS5Db2RlLkVYUE9SVCIpKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAuZ2V0RXhwb3J0RXhjZWxQYXJhbSgpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBwYXJhbSA9IF9jb250ZXh0MTAuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMC5jdXN0b21QYXJhbUJlZm9yZUV4cG9ydChwYXJhbSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwKTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEzhuqV5IHRoYW0gc+G7kSB4deG6pXQga2jhuql1DQogICAgICovCiAgICBnZXRFeHBvcnRFeGNlbFBhcmFtOiBmdW5jdGlvbiBnZXRFeHBvcnRFeGNlbFBhcmFtKCkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEoKSB7CiAgICAgICAgdmFyIHBhcmFtLCBjb250cm9sbGVyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcGFyYW0gPSBfdGhpczExLmdldEdyaWRFeHBvcnRQYXJhbWV0ZXIoX3RoaXMxMS5ncmlkKTsKICAgICAgICAgICAgICAgIHBhcmFtLkZpbGVUeXBlID0gInhsc3giOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczExLiRzdG9yZS5kaXNwYXRjaCgiIi5jb25jYXQoX3RoaXMxMS5tb2R1bGUsICIvZ2V0Q29udHJvbGxlciIpKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY29udHJvbGxlciA9IF9jb250ZXh0MTEuc2VudDsKICAgICAgICAgICAgICAgIHBhcmFtLkdldERhdGFVcmwgPSBbY29udHJvbGxlciwgImxpc3QiXS5qb2luKCIvIik7CiAgICAgICAgICAgICAgICBwYXJhbS5HZXREYXRhTWV0aG9kID0gIlBPU1QiOwogICAgICAgICAgICAgICAgcGFyYW0uUmVwb3J0VGl0bGUgPSBfdGhpczExLmdldFRpdGxlRXhwb3J0KCk7CiAgICAgICAgICAgICAgICBwYXJhbS5GaWxlTmFtZSA9IF90aGlzMTEuZ2V0RmlsZU5hbWUoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgcGFyYW0pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTEpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqDQogICAgICogbOG6pXkgdGnDqnUgxJHhu4EgZmlsZSBleGNlbA0KICAgICAqIEByZXR1cm5zIHRpw6p1IMSR4buBIGRhbmggc8OhY2gNCiAgICAgKi8KICAgIGdldFRpdGxlRXhwb3J0OiBmdW5jdGlvbiBnZXRUaXRsZUV4cG9ydCgpIHsKICAgICAgdmFyIHRpdGxlID0gIiI7CiAgICAgIHZhciBlbCA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoIi5saXN0LXRpdGxlIik7CgogICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsLmlubmVySFRNTCA9PT0gInN0cmluZyIpIHsKICAgICAgICB0aXRsZSA9IGVsLmlubmVySFRNTC50cmltKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGl0bGUgPSB0aGlzLnRpdGxlID8gdGhpcy50aXRsZS50cmltKCkgOiAiIjsKICAgICAgfQoKICAgICAgcmV0dXJuIHRpdGxlOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBM4bqleSB0w6puIGZpbGUga2hpIHh14bqldCBraOG6qXUNCiAgICAgKiBAcmV0dXJucyB0w6puIGZpbGUgOiBu4bq/dSDEkeG7gyB0cuG7kW5nIHRow6wgbeG6t2MgxJHhu4tuaCBs4bqleSB0acOqdSDEkeG7gQ0KICAgICAqLwogICAgZ2V0RmlsZU5hbWU6IGZ1bmN0aW9uIGdldEZpbGVOYW1lKCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCgogICAgLyoqDQogICAgICogSMOgbSBt4bufIHBvcHVwIHPhu61hIG3huqt1DQogICAgICovCiAgICBvcGVuUHJvdG90eXBlOiBmdW5jdGlvbiBvcGVuUHJvdG90eXBlKCkgewogICAgICB0aGlzLnNob3dEZXRhaWwoIk1zQ29uZmlnTGlzdExheW91dCIsIHRoaXMuJG1zLmVudW0uRm9ybVN0YXRlLkFkZCwgewogICAgICAgIGxheW91dDogdGhpcy5sYXlvdXQsCiAgICAgICAgcGFyZW50OiB0aGlzCiAgICAgIH0pOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBAYXV0aG9yIHZ2a2lldCAtIDE4LjAzLjIwMjENCiAgICAgKiBIw6BtIGN1c3RvbSBs4bqhaSBwYXJhbSB0csaw4bubYyBraGkgeHXhuqV0IGV4Y2VsDQogICAgICovCiAgICBjdXN0b21QYXJhbUJlZm9yZUV4cG9ydDogZnVuY3Rpb24gY3VzdG9tUGFyYW1CZWZvcmVFeHBvcnQocGFyYW0pIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTIpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqDQogICAgICogQGF1dGhvciB2dmtpZXQgLSAxNC4wNC4yMDIxDQogICAgICogSMOgbSB44butIGzDvSBleHREYXRhDQogICAgICovCiAgICBkZWNvZGVFeHREYXRhOiBmdW5jdGlvbiBkZWNvZGVFeHREYXRhKGRhdGEpIHsKICAgICAgdmFyIG1lID0gdGhpczsgLy8gWOG7rSBsw70gZOG7ryBsaeG7h3UgbeG7nyBy4buZbmcKCiAgICAgIHZhciBvcmlnaW5GaWVsZHMgPSBbXTsKCiAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCJFeHREYXRhIikpIHsKICAgICAgICAvLyBEYW5oIHPDoWNoIGPDoWMgdHLGsOG7nW5nIGThu68gbGnhu4d1IGfhu5FjIGPhu6dhIGThu68gbGnhu4d1CiAgICAgICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7CiAgICAgICAgICBvcmlnaW5GaWVsZHMucHVzaChpKTsKICAgICAgICB9IC8vIE1hcCBk4buvIGxp4buHdSBt4bufIHLhu5luZwoKCiAgICAgICAgaWYgKGRhdGEuRXh0RGF0YSAmJiB0eXBlb2YgZGF0YS5FeHREYXRhID09PSAic3RyaW5nIikgewogICAgICAgICAgdmFyIGV4dERhdGEgPSBKU09OLnBhcnNlKGRhdGEuRXh0RGF0YSk7CgogICAgICAgICAgaWYgKGV4dERhdGEpIHsKICAgICAgICAgICAgbWUuJG1zLmNvbW1vbkZuLnByb2Nlc3NTZXJ2ZXJSZXNwb25zZURhdGEoZXh0RGF0YSk7CgogICAgICAgICAgICBmb3IgKHZhciBtIGluIGV4dERhdGEpIHsKICAgICAgICAgICAgICAvLyBDaOG7iSBtYXAgY8OhYyB0csaw4budbmcga2jDtG5nIGPDsyB0cm9uZyBk4buvIGxp4buHdSBn4buRYwogICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGFbbV0pIHsKICAgICAgICAgICAgICAgIGRhdGFbbV0gPSBleHREYXRhW21dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvKioNCiAgICAgKiBY4butIGzDvSBk4buvIGxp4buHdSBzYXUga2hpIHPhu61hDQogICAgICogQHBhcmFtIHsqfSByZWNvcmQgYuG6o24gZ2hpIGfhu5FjDQogICAgICogQHBhcmFtIHsqfSBzYXZlUmVzdWx0IGLhuqNuIGdoaSB0csOqbiBzZXJ2ZXIgdHLhuqMgduG7gQ0KICAgICAqIEBvdmVycmlkZQ0KICAgICAqLwogICAgYWZ0ZXJTYXZlRWRpdDogZnVuY3Rpb24gYWZ0ZXJTYXZlRWRpdChyZWNvcmQsIHNhdmVSZXN1bHQpIHt9LAoKICAgIC8qKg0KICAgICAqIFjhu60gbMO9IGThu68gbGnhu4d1IHNhdSBraGkgc+G7rWEgdOG6oWkgbW9kZSB2aWV3DQogICAgICogQHBhcmFtIHsqfSByZWNvcmQgYuG6o24gZ2hpIGfhu5FjDQogICAgICogQHBhcmFtIHsqfSBzYXZlUmVzdWx0IGLhuqNuIGdoaSB0csOqbiBzZXJ2ZXIgdHLhuqMgduG7gQ0KICAgICAqIEBvdmVycmlkZQ0KICAgICAqLwogICAgYWZ0ZXJTYXZlVmlldzogZnVuY3Rpb24gYWZ0ZXJTYXZlVmlldyhyZWNvcmQsIHNhdmVSZXN1bHQpIHt9LAoKICAgIC8qKg0KICAgICAqIEjDoG0gc2hvdyBBbGwgaWNvbmZpbHRlcg0KICAgICAqIEBwYXJhbSB7Kn0gcmVjb3JkIGLhuqNuIGdoaSBn4buRYw0KICAgICAqIEBwYXJhbSB7Kn0gc2F2ZVJlc3VsdCBi4bqjbiBnaGkgdHLDqm4gc2VydmVyIHRy4bqjIHbhu4ENCiAgICAgKiBAb3ZlcnJpZGUNCiAgICAgKi8KICAgIGZ1blNob3dBbGxJY29uRmlsdGVyOiBmdW5jdGlvbiBmdW5TaG93QWxsSWNvbkZpbHRlcigpIHsKICAgICAgLy90aGlzLiRuZXh0VGljaygoKT0+ewogICAgICB0aGlzLnNob3dBbGxJY29uRmlsdGVyID0gIXRoaXMuc2hvd0FsbEljb25GaWx0ZXI7CiAgICAgIHRoaXMuJHJlZnNbdGhpcy52aWV3UmVmXS5mdW5TaG93QWxsSWNvbkZpbHRlcih0aGlzLnNob3dBbGxJY29uRmlsdGVyKTsgLy99KQogICAgfSwKCiAgICAvKioNCiAgICAgKiBjdXN0b20gxJFp4buBdSBraeG7h24gbOG7jWMvc2VhcmNoIG3DoG4gaMOsbmggZ3JpZCB0cmVlDQogICAgICogQHBhcmFtIHsqfSByZWNvcmQgYuG6o24gZ2hpIGNoZWNrDQogICAgICogQHBhcmFtIHByb3BlcnRpZXMgZGFuaCBzw6FjaCBmaWVsZCBj4bqnbiBjaGVjayDEkWsNCiAgICAgKiBAcGFyYW0gc2VhcmNoVGV4dCDEkW/huqFuIHRleHQgbmjhuq1wIOG7nyDDtCB0w6xtIGtp4bq/bQ0KICAgICAqIE3hurdjIMSR4buLbmggdHLhuqMgduG7gSB0cnVlDQogICAgICovCiAgICBjaGVja0ZpbHRlckdyaWRUcmVlQ3VzdG9tOiBmdW5jdGlvbiBjaGVja0ZpbHRlckdyaWRUcmVlQ3VzdG9tKHJlY29yZCwgcHJvcGVydGllcywgc2VhcmNoVGV4dCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCgogICAgLyoqDQogICAgICogSMOgbSBzaG93IGPDoWMgcG9wdXAgdGhlbyB0w6puIGzhuqV5IMSRxrDhu51uZyBk4bqrbiB04burIGjDoG0gZ2V0UG9wdXBvbXBvbmVudA0KICAgICAqIEBwYXJhbSBuYW1lIHTDqm4gY+G7p2EgY29tcG9uZW50DQogICAgICogQ3JlYXRlZCBieSBMVERBVCgxNy4wNi4yMDIwKQ0KICAgICAqLwogICAgc2hvd0RldGFpbDogZnVuY3Rpb24gc2hvd0RldGFpbChuYW1lLCBtb2RlLCBkYXRhLCBvcHRpb24pIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgcG9wdXBVdGlsLnNob3cobWUsIG5hbWUsIGRhdGEsIG1lLmdldFBvcHVwT3B0aW9uKG5hbWUsIG9wdGlvbikpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBBdXRob3I6IMSQVlRoaQ0KICAgICAqIENyZWF0ZSBkYXRlOiAxMS8wMy8yMDIxDQogICAgICogQ2hvIHBow6lwIGRldGFpbCBn4buNaSB04bubaSBzdWJtaXREZXRhaWxDYWxsYmFjayBj4bunYSBkYW5oIHPDoWNoIHNhdSBraGkgY+G6pXQgeG9uZw0KICAgICAqLwogICAgZ2V0UG9wdXBPcHRpb246IGZ1bmN0aW9uIGdldFBvcHVwT3B0aW9uKG5hbWUsIG9wdGlvbikgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICByZXR1cm4gewogICAgICAgIHN1Ym1pdDogbWUuc3VibWl0RGV0YWlsQ2FsbGJhY2ssCiAgICAgICAgc2luZ2xlOiB0cnVlCiAgICAgIH07CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEF1dGhvcjogxJBWVGhpDQogICAgICogQ3JlYXRlIGRhdGU6IDExLzAzLzIwMjENCiAgICAgKiBDaG8gcGjDqXAgZGV0YWlsIGfhu41pIHThu5tpIHN1Ym1pdERldGFpbENhbGxiYWNrIGPhu6dhIGRhbmggc8OhY2ggc2F1IGtoaSBj4bqldCB4b25nDQogICAgICovCiAgICBzdWJtaXREZXRhaWxDYWxsYmFjazogZnVuY3Rpb24gc3VibWl0RGV0YWlsQ2FsbGJhY2socmVzdWx0LCBwYXJhbSwgYWN0aW9uKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEBvdmVycmlkZQ0KICAgICAqLwogICAgZ2V0Q29uZGl0aW9uUGFyYW1ldGVyOiBmdW5jdGlvbiBnZXRDb25kaXRpb25QYXJhbWV0ZXIoKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciByZXN1bHQgPSBtZS5zdXBlcigiZ2V0Q29uZGl0aW9uUGFyYW1ldGVyIik7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEjDoG0gdGjhu7FjIGhp4buHbiBjdXN0b20gZW50aXR5IMSR4buRaSB24bubaSBuZ2hp4buHcCB24bulIMSR4bq3YyB0aMO5DQogICAgICogQGF1dGhvciB2dmtpZXQgLSAyNy4wNy4yMDIxDQogICAgICovCiAgICBnZXRFbnRpdHlUeXBlOiBmdW5jdGlvbiBnZXRFbnRpdHlUeXBlKCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCgogICAgLyoqDQogICAgICogc2hvdyBmaWx0ZXIgcG9wdXANCiAgICAgKi8KICAgIHNob3dBY3Rpb25Cb3g6IGZ1bmN0aW9uIHNob3dBY3Rpb25Cb3goKSB7CiAgICAgIGlmICh0aGlzLmlzU2hvd0FjdGlvbkdyb3VwID09IHRydWUpIHsKICAgICAgICB0aGlzLmlzU2hvd0FjdGlvbkdyb3VwID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5pc1Nob3dBY3Rpb25Hcm91cCA9IHRydWU7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogaGlkZSBmaWx0ZXIgcG9wdXANCiAgICAgKi8KICAgIGhpZGRlbkFjdGlvbkJveDogZnVuY3Rpb24gaGlkZGVuQWN0aW9uQm94KGV2ZW50KSB7CiAgICAgIHRoaXMuaXNTaG93QWN0aW9uR3JvdXAgPSBmYWxzZTsKICAgIH0sCgogICAgLyoqDQogICAgICogQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgY8OhYyBi4bqjbiBnaGkgxJHGsOG7o2MgY2jhu41uDQogICAgICogVEROR0hJQSAxMi8xMS8yMDIxDQogICAgICogQHBhcmFtIHsqfSByZWNvcmRzDQogICAgICogQHBhcmFtIHsqfSBjb21tYW5kDQogICAgICovCiAgICBzZXRBY3RpdmVNdXRpUm93czogZnVuY3Rpb24gc2V0QWN0aXZlTXV0aVJvd3MocmVjb3JkcywgY29tbWFuZCkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMoKSB7CiAgICAgICAgdmFyIG1lLCBpbmFjdGl2ZSwgZmllbGQsIGxpc3RJRCwgcGFyYW0sIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEzJChfY29udGV4dDEzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1lID0gX3RoaXMxMjsKICAgICAgICAgICAgICAgIGluYWN0aXZlID0gY29tbWFuZCA9PSAiYWN0aXZlIiA/IDAgOiAxOwoKICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWNvcmRzKSkgewogICAgICAgICAgICAgICAgICByZWNvcmRzID0gW3JlY29yZHNdOwogICAgICAgICAgICAgICAgfSAvL3Nob3cgbWFzawogICAgICAgICAgICAgICAgLy8gbWUubG9hZGluZyA9IHRydWU7CgoKICAgICAgICAgICAgICAgIGZpZWxkID0gbWUuJHN0b3JlLnN0YXRlW21lLm1vZHVsZV0uX2NvbmZpZy5maWVsZDsKICAgICAgICAgICAgICAgIGxpc3RJRCA9IHJlY29yZHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtW2ZpZWxkLmtleV07CiAgICAgICAgICAgICAgICB9KS5qb2luKCIsIik7CiAgICAgICAgICAgICAgICBwYXJhbSA9IHsKICAgICAgICAgICAgICAgICAgVGFibGVOYW1lOiBmaWVsZC50YWJsZSwKICAgICAgICAgICAgICAgICAgS2V5RmllbGQ6IGZpZWxkLmtleSwKICAgICAgICAgICAgICAgICAgVmFsdWU6IGluYWN0aXZlLAogICAgICAgICAgICAgICAgICBMaXN0SUQ6IGxpc3RJRCwKICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uSUQ6IG1lLmdldE9yZ2FuaXphdGlvbkZpbHRlcigpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBtZS4kc3RvcmUuZGlzcGF0Y2goIiIuY29uY2F0KF90aGlzMTIubW9kdWxlLCAiL3VwZGF0ZVN0YXR1cyIpLCBwYXJhbSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICAgIG1lLmFmdGVyVXBkYXRlU3RhdHVzKHJlY29yZHMsIHJlc3VsdCk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMyk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBj4bqtcCBuaOG6rXQgc2F1IGtoaSB1cGRhdGUgc3RhdHVzDQogICAgICogQHBhcmFtIHsqfSByZWNvcmQNCiAgICAgKiBAcGFyYW0geyp9IHJlc3VsdA0KICAgICAqLwogICAgYWZ0ZXJVcGRhdGVTdGF0dXM6IGZ1bmN0aW9uIGFmdGVyVXBkYXRlU3RhdHVzKHJlY29yZCwgcmVzdWx0KSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CgogICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5TdWNjZXNzKSB7CiAgICAgICAgbWUuJHRvYXN0LnN1Y2Nlc3MobWUuJHQoImkxOG5CYXNlRm9ybS5TYXZlU3VjY2Vzc01lc3NhZ2UiKSk7CiAgICAgICAgbWUuc2VsZWN0ZWQgPSBbXTsKICAgICAgICBtZS5yZWxvYWQoKTsKICAgICAgICBtZS5jdXN0b21BZnRlclVwZGF0ZShyZWNvcmQpOwogICAgICB9IGVsc2UgewogICAgICAgIG1lLiR0b2FzdC5lcnJvcihtZS4kdCgiaTE4bkJhc2VGb3JtLk1lc3NhZ2UuRXJyb3IiKSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqDQogICAgICogTOG6pXkgb3JnYW5pemF0aW9uSUQgxJHhu4MgdXBkYXRlIHN0YXR1cywuLi4NCiAgICAgKiBURE5HSElBIDE2LzExLzIwMjENCiAgICAgKiBAcmV0dXJucw0KICAgICAqLwogICAgZ2V0T3JnYW5pemF0aW9uRmlsdGVyOiBmdW5jdGlvbiBnZXRPcmdhbml6YXRpb25GaWx0ZXIoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfSwKCiAgICAvKioNCiAgICAgKiBIw6BtIGN1c3RvbSB44butIGzDvSBzYXUga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpDQogICAgICogTk1UVUFOMyAxNS8zLzIwMjINCiAgICAgKiBAcGFyYW0geyp9IHJlY29yZCBi4bqjbiBnaGkgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkNCiAgICAgKi8KICAgIGN1c3RvbUFmdGVyVXBkYXRlOiBmdW5jdGlvbiBjdXN0b21BZnRlclVwZGF0ZShyZWNvcmQpIHt9CiAgfSksCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnQoKTsKICB9Cn07"},null]}
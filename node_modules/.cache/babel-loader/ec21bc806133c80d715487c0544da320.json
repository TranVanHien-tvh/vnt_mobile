{"remainingRequest":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VNT_vue\\src\\views\\dictionary\\employee\\Detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\dictionary\\employee\\Detail.vue","mtime":1653205086735},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import _toConsumableArray from "D:/VNT_vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "D:/VNT_vue/node_modules/@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "D:/VNT_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator";
import "regenerator-runtime/runtime.js";
import "core-js/modules/es.array.splice.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.split.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.slice.js";
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
import popupUtil from "@/commons/popupUtil";
import msGridViewer from "@/components/msgridviewer/msGridViewer.vue";
import msActive from "@/components/msactive/msActive";
import BaseDetailPopup from "@/views/base/BaseDetailPopup";
import { ModuleLocation, ModuleEmployee, ModuleJobPosition } from "@/stores/module-const";
import { locationData } from "@/mixins/combobox/location.js";
import EventBusGlobal, { GlobalEventName } from "@/commons/eventBusGlobal";
import commonFn from "@/commons/commonFunction";
import { departmentList } from "@/mixins/combobox/departmentList";
import { pickList } from "@/mixins/combobox/pickList";
import { jobPositionSource } from "@/mixins/combobox/jobPosition";
import msDownLoadVue from "@/components/msdownload/msDownLoad.vue";
import AttachmentDetailAPI from "@/apis/system/attachmentDetailAPI.js";
import fileApi from "@/apis/system/fileAPI";
import PickListAPI from "@/apis/dictionary/pickListAPI";
import MsSingleAttachment from "@/components/msattachment/msSingleAttachment.vue";
import ImageAPI from "@/apis/system/imageAPI";
export default {
  name: "Detailemployee",
  components: {
    msGridViewer: msGridViewer,
    MsSingleAttachment: MsSingleAttachment
  },
  extends: BaseDetailPopup,
  mixins: [locationData, departmentList, jobPositionSource, pickList],
  data: function data() {
    var me = this;
    me.setDataCombo();
    me.setDataGrid();
    me.TimeTypeInPeriod = me.$ms.commonFn.getEnumSource("TimeTypeInPeriod");
    me.TimeTypeInPeriod.splice(1, 1);
    me.TimeTypeInPeriod = me.TimeTypeInPeriod.map(function (item) {
      if (item.enumValue === 2) {
        item.enumValue = 1;
      }

      return item;
    });
    return {
      module: ModuleEmployee,
      active: false,
      isFullScreen: false,
      listItemTab: [],
      activeSubsystem: "generalInfo",
      activeParentSubsystem: "generalInfo",
      cacheChildrenTab: [],
      provinceData: [],
      districtDataHome: [],
      districtDataPermanent: [],
      districtDataCurrent: [],
      wardDataHome: [],
      wardDataPermanent: [],
      wardDataCurrent: [],
      jobPosition: [],
      jobTitle: [],
      emptyArr: [],
      rewardCategoryDetailData: [],
      emulationTitleDetailData: [],
      avatarUrl: null,
      avatarFile: null,
      rowActions: [{
        command: "Edit",
        icon: "edit",
        text: this.$t("i18nCommon.command.edit")
      }, {
        command: "Delete",
        icon: "delete",
        text: this.$t("i18nCommon.command.delete")
      }],
      AttachmentRowActions: [{
        command: "Download",
        icon: "download",
        text: this.$t("i18nCommon.command.download")
      }, {
        command: "Delete",
        icon: "delete",
        text: this.$t("i18nCommon.command.delete")
      }],
      listSourceWorkingDetail: [],
      listSourceMissionRole: [],
      listSourceEmulationTitleDetail: [],
      listSourceRewardCategoryDetail: [],
      listSourceDisciplineDetail: [],
      listSourceAchievementIdea: [],
      listSourceAttachmentDetail: [],
      isOutSider: false,
      listDeleteAttachment: [],
      changeFormat: null,
      typeDate: 0,
      listSourceEvaluationDetail: [],
      hideInfor: false,
      hideEmulationReward: false,
      hideEvaluation: false,
      hideAttachment: false,
      hideAchievementIdea: false,
      helpId: "knowledge-base/quan-ly-hscn",
      fileSizeSumary: 0
    };
  },
  watch: {
    listSourceAttachmentDetail: function listSourceAttachmentDetail(newValue) {
      var me = this;

      if (newValue) {
        me.caculateFileSize();
      }
    }
  },
  created: function created() {
    var me = this;
    me.getProvinceData();
  },
  mounted: function mounted() {
    var _this = this;

    var me = this;
    me.$nextTick(function () {
      var item = me.getCurrentItem();

      if (me.editMode == me.$ms.enum.FormState.Edit) {
        me.title = "Sửa hồ sơ thành tích " + (item.FullName ? "của " + item.FullName : "");
      } else {
        me.title = "Thêm mới hồ sơ thành tích";
      }

      me.getDistrictByProvinceID(item.HomeProvince, 1);
      me.getDistrictByProvinceID(item.PermanentProvince, 2);
      me.getDistrictByProvinceID(item.CurrentProvince, 3);
      me.getWardByDistrictID(item.HomeDistrict, 1);
      me.getWardByDistrictID(item.PermanentDistrict, 2);
      me.getWardByDistrictID(item.CurrentDistrict, 3);
    }); //set lại vị trí của các tab để scroll xịn

    me.$nextTick(function () {
      var containerInfo = _this.$refs["employee-detail"].getBoundingClientRect();

      var totalHeight = 0;
      me.listItemTab.forEach(function (item) {
        //Lấy vị trí div cần scroll
        var target = item.ScrollTarget;

        if (target) {
          var panel = me.$refs[target];

          if (panel) {
            if (Array.isArray(panel) && panel.length > 0) {
              panel = panel[0];
            }

            var info = panel.getBoundingClientRect();
            item.ScrollTop = info.top - containerInfo.top;
            totalHeight += info.height;
          }
        }

        if (item.Children && item.Children.length > 0) {
          item.Children.forEach(function (child) {
            //Lấy vị trí div cần scroll
            var target = child.ScrollTarget;

            if (target) {
              var _panel = me.$refs[target];

              if (_panel) {
                if (Array.isArray(_panel) && _panel.length > 0) {
                  _panel = _panel[0];
                }

                var _info = _panel.getBoundingClientRect();

                child.ScrollTop = _info.top - containerInfo.top;
                totalHeight += _info.height;
              } //Cache lại list các children


              me.cacheChildrenTab.push(child);
            }
          });
        } else {
          me.cacheChildrenTab.push(item);
        } //TDNGHIA 6/4/2021: sau khi set vị trí cho các menu mới thu gọn menu lại


        me.hideInfor = false;
        me.hideEmulationReward = true;
        me.hideEvaluation = true;
        me.hideAttachment = true;
        me.hideAchievementIdea = true;
      });
    });
  },
  methods: {
    getEntityType: function getEntityType() {
      return "detailemployee";
    },

    /**
     * Hàm thực hiện trước khi showpopup
     * Dùng để form tự overide lại theo nghiệp vụ tương ứng
     * Created by LTDAT 22.06.2020
     */
    beforeShowPopup: function beforeShowPopup(param) {
      var me = this;
      me.isOutSider = me.options.isOutSider;
      me.isFullScreen = me.options.isFullScreen == true ? true : me.isFullScreen;
      me.setMenuTab();
    },

    /**
     * Custom lại currentItem trước khi dùng để bind dữ liệu và ép kiểu JSON thành Object
     * TDNGHI 22/9/2021
     */
    beforeBindData: function beforeBindData() {
      var me = this;
      me.currentItem.DateOfBirth = me.currentItem.DateOfBirth === "" ? null : me.currentItem.DateOfBirth;
      me.listSourceWorkingDetail = this.$ms.commonFn.sortArray(this.$ms.enum.SortStatus.desc, JSON.parse(me.currentItem.WorkingDetail), "ToDate");
      me.listSourceMissionRole = JSON.parse(me.currentItem.MissionRole);
      me.listSourceAchievementIdea = JSON.parse(me.currentItem.AchievementIdea);
      me.listSourceEvaluationDetail = JSON.parse(me.currentItem.EvaluationDetail);
      me.listSourceEmulationTitleDetail = JSON.parse(me.currentItem.EmulationTitleDetail);
      me.listSourceRewardCategoryDetail = JSON.parse(me.currentItem.RewardCategoryDetail); //Khi lấy trên db về => gán trạng thái của bản ghi attachment là update NTDIEM 23.11.2021

      me.currentItem.AttachmentDetail.forEach(function (item) {
        item.EntityState = me.$ms.enum.ModelState.Update;
      });
      me.listSourceAttachmentDetail = me.currentItem.AttachmentDetail;
      me.listSourceDisciplineDetail = JSON.parse(me.currentItem.DisciplineDetail);
      me.currentItem.IsOutSider = me.isOutSider;

      if (!me.currentItem.OrganizationName && !me.isOutSider) {
        me.currentItem.OrganizationName = me.context.Organization.OrganizationName;
      }

      if (me.editMode === me.$ms.enum.FormState.Add) {
        me.$refs.cboJobPosition.reset();
        me.$refs.cboJobTitle.reset(); // NMTUAN3 2/12/2021: thêm check tồn tại vì ref này không có khi thêm cá nhân ngoài đơn vị

        if (me.$refs.cboDepartment) {
          me.$refs.cboDepartment.reset();
        }

        me.currentItem.Gender = 1; //default lúc thêm mới mà chưa có employeeCode thì cho  = SHCB0001

        me.currentItem.EmployeeCode = me.currentItem.EmployeeCode ? me.currentItem.EmployeeCode : "SHCB0001";
      }

      me.currentItem.AttachmentChanges = [];

      if (me.currentItem.DateOfBirth !== null) {
        me.currentItem.TimeType === null ? me.currentItem.DateOfBirth.length > 0 && me.currentItem.DateOfBirth.length === 4 ? me.currentItem.TimeType = 1 : me.currentItem.TimeType = 0 : me.currentItem.TimeType;

        if (me.currentItem.TimeType === 0) {
          me.currentItem.DateOfBirth = me.$ms.commonFn.convertStringToDate(me.currentItem.DateOfBirth, "/", 1);
        }
      } else {
        me.currentItem.TimeType = me.currentItem.TimeType === null ? 0 : me.currentItem.TimeType;
      } //Lấy avatar NTDIEM 17/03/2022


      me.setAvatar();
    },
    getAutoID: function getAutoID() {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var result, me;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                result = "", me = _this2;
                _context.prev = 1;
                _context.next = 4;
                return me.$store.dispatch("".concat(me.module, "/getAutoID"));

              case 4:
                result = _context.sent;
                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](1);
                console.error(_context.t0);

              case 10:
                return _context.abrupt("return", result);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 7]]);
      }))();
    },

    /**
     * Thực hiện gán data và columns cho các bảng
     * TDNGHIA 21/9/2021
     */
    setDataGrid: function setDataGrid() {
      var me = this; //Bảng quá trình công tác

      me.columnWorkingDetail = [{
        caption: "Thời gian",
        dataField: "WorkingTime",
        width: 160,
        autoResize: false,
        align: "center"
      }, {
        caption: "Đơn vị",
        dataField: "OrganizationName",
        width: 200,
        autoResize: true
      }, {
        caption: "Phòng ban",
        dataField: "DepartmentName",
        width: 150,
        autoResize: true
      }, {
        caption: "Chức vụ",
        dataField: "JobPositionName",
        width: 110,
        autoResize: true
      }, {
        caption: "Chức danh",
        dataField: "JobTitleName",
        width: 110,
        autoResize: true
      }]; //Bảng quyền hạn

      me.columnMissionRole = [{
        caption: "Năm",
        dataField: "Year",
        width: 100,
        autoResize: false,
        align: "right"
      }, {
        caption: "Quyền hạn, nhiệm vụ được giao",
        dataField: "RoleName",
        width: 200,
        autoResize: true
      }]; //Bảng thành tích

      me.columnAchievementIdea = [{
        caption: "Nội dung sáng kiến",
        dataField: "InventName",
        width: 400,
        autoResize: true
      }, {
        caption: "Năm đạt",
        dataField: "Year",
        width: 100,
        autoResize: false,
        align: "right"
      }, {
        caption: "Cấp công nhận",
        dataField: "Level",
        enum: "InventApproveLevel",
        formatType: me.$ms.enum.FormatType.Enum,
        width: 200,
        autoResize: true
      }, {
        caption: "Tệp đính kèm",
        dataField: "AttachmentName",
        width: 300,
        autoResize: true,
        template: msDownLoadVue,
        clsCustom: "blue-text"
      }]; //bảng danh hiệu thi đua

      me.emulationTitleColumns = [{
        caption: "Năm đạt danh hiệu",
        dataField: "Year",
        width: 180,
        autoResize: false,
        align: "right"
      }, {
        caption: "Danh hiệu thi đua",
        dataField: "EmulationTitleName",
        width: 200,
        autoResize: true
      }, {
        caption: "Số quyết định",
        dataField: "Number",
        width: 150,
        autoResize: true
      }, {
        caption: "Ngày quyết định",
        dataField: "Date",
        formatType: this.$ms.enum.FormatType.Date,
        width: 150,
        autoResize: false,
        align: "center"
      }, {
        caption: "Cơ quan ra quyết định",
        dataField: "OrganizationBelong",
        width: 200,
        autoResize: true
      }, {
        caption: "Tệp đính kèm",
        dataField: "AttachmentName",
        width: 300,
        autoResize: true,
        template: msDownLoadVue,
        clsCustom: "blue-text"
      }]; //Bảng hình thức khen thưởng

      me.rewardCategoryColumns = [{
        caption: "Năm được khen thưởng",
        dataField: "Year",
        width: 180,
        autoResize: false,
        align: "right"
      }, {
        caption: "Hình thức khen thưởng",
        dataField: "RewardCategoryName",
        width: 200,
        autoResize: true
      }, {
        caption: "Số quyết định",
        dataField: "Number",
        width: 150,
        autoResize: true
      }, {
        caption: "Ngày quyết định",
        dataField: "Date",
        formatType: this.$ms.enum.FormatType.Date,
        width: 150,
        autoResize: false,
        align: "center"
      }, {
        caption: "Cơ quan ra quyết định",
        dataField: "OrganizationBelong",
        width: 200,
        autoResize: true
      }, {
        caption: "Tệp đính kèm",
        dataField: "AttachmentName",
        width: 300,
        autoResize: true,
        template: msDownLoadVue,
        clsCustom: "blue-text"
      }]; //Kỷ luật

      me.columnsDisciplineDetail = [{
        caption: "Nội dung kỷ luật",
        dataField: "DisciplineContent",
        width: 120,
        autoResize: true
      }, {
        caption: "Hình thức kỷ luật",
        dataField: "DisciplineType",
        width: 120,
        autoResize: true
      }, {
        caption: "Ngày hiệu lực",
        dataField: "FromDate",
        formatType: this.$ms.enum.FormatType.Date,
        width: 120,
        autoResize: false,
        align: "center"
      }, {
        caption: "Ngày hết hiệu lực",
        formatType: this.$ms.enum.FormatType.Date,
        dataField: "ToDate",
        width: 140,
        autoResize: false,
        align: "center"
      }, {
        caption: "Số quyết định",
        dataField: "Number",
        width: 120,
        autoResize: false
      }, {
        caption: "Cơ quan ra quyết định",
        dataField: "OrganizationBelong",
        width: 120,
        autoResize: true
      }, {
        caption: "Tệp đính kèm",
        dataField: "AttachmentName",
        width: 300,
        autoResize: true,
        template: msDownLoadVue,
        clsCustom: "blue-text"
      }]; //Bảng đánh giá, xếp loại

      me.columnEvaluationDetail = [{
        caption: "Số quyết định",
        dataField: "Number",
        width: 150,
        autoResize: true
      }, {
        caption: "Ngày quyết định",
        dataField: "Date",
        formatType: this.$ms.enum.FormatType.Date,
        width: 150,
        autoResize: false,
        align: "center"
      }, {
        caption: "Năm đánh giá",
        dataField: "Year",
        width: 120,
        autoResize: false,
        align: "right"
      }, {
        caption: "Kết quả đánh giá",
        dataField: "EvaluationID",
        enum: "EvaluationResult",
        formatType: me.$ms.enum.FormatType.Enum,
        width: 200,
        autoResize: true
      } // {
      //   caption: "Tệp đính kèm",
      //   dataField: "AttachmentName",
      //   width: 300,
      //   autoResize: true,
      //   template: msDownLoadVue,
      //   clsCustom: "blue-text",
      // },
      ]; //tài liệu đính kèm

      me.attachmentColumns = [{
        caption: "Tên tài liệu",
        dataField: "Name",
        width: 300,
        autoResize: true
      }, {
        caption: "Tệp đính kèm",
        dataField: "AttachmentName",
        width: 300,
        autoResize: true,
        template: msDownLoadVue,
        clsCustom: "blue-text"
      }, {
        caption: "Người đính kèm",
        dataField: "Author",
        width: 150,
        autoResize: true
      }, {
        caption: "Ngày đính kèm",
        dataField: "CreatedDate",
        formatType: this.$ms.enum.FormatType.Date,
        width: 140,
        autoResize: true,
        align: "center"
      }, {
        caption: "Dung lượng",
        dataField: "FileSize",
        width: 100,
        autoResize: true
      }];
    },

    /**
     * Set các giá trị cho combo ban đầu
     * Đang fake dữ liệu
     * TDNGHIA 20/9/2021
     */
    setDataCombo: function setDataCombo() {
      this.cboGenderData = [{
        Gender: 1,
        GenderName: "Nam"
      }, {
        Gender: 0,
        GenderName: "Nữ"
      }]; //set combo trình độ chuyên môn

      this.cboQualification = this.$t("i18nPickListData.Qualification"); //set combo chức vụ chức danh

      this.cboJobData = [{
        ID: 1,
        Name: "Giám đốc"
      }, {
        ID: 2,
        Name: "Nhân viên"
      }, {
        ID: 3,
        Name: "Thư ký"
      }]; //set combo học hàm

      this.cboAcademicRank = this.$t("i18nPickListData.AcademicaRank"); //set combo học vị

      this.cboAcademicTitle = this.$t("i18nPickListData.AcademicaTitle");
    },

    /**
     * Sự kiện select menutab
     * TDNGHIA 20/9/2021
     */
    menuItemOnClick: function menuItemOnClick(item) {
      var _this3 = this;

      var me = this;

      if (item.SubSystemCode !== me.activeSubsystem && item.SubSystemCode != "other") {
        //Kiểm tra xem có phải là node cha không
        if (item.isParent) {
          //Nếu là node cha
          me.activeParentSubsystem = item.SubSystemCode;
          me.activeSubsystem = item.Children ? item.Children[0].SubSystemCode : item.SubSystemCode;
        } else {
          //Nếu là nodee con
          me.activeParentSubsystem = item.ParentSubSystemCode;
          me.activeSubsystem = item.SubSystemCode;
        }

        var menuIndex = me.cacheChildrenTab.indexOf(item); //TDNGHIA 6/4/2022: case vị trí của menu để mở form rút gọn cho đúng

        if (menuIndex == 13) {
          // me.hideEmulationReward = false;
          // me.hideEvaluation = false;
          me.hideAttachment = false; // me.hideAchievementIdea = false;
        }

        if (menuIndex == 12) {
          //me.hideEmulationReward = false;
          me.hideEvaluation = false; //me.hideAchievementIdea = false;
        }

        if (menuIndex < 12 && menuIndex >= 9) {
          me.hideEmulationReward = false; //me.hideAchievementIdea = false;
        }

        if (menuIndex < 9 && menuIndex >= 5) {
          me.hideAchievementIdea = false;
        } //Nếu trường hợp click vào menu cha


        if (menuIndex == -1) {
          var menuParentIndex = me.listItemTab.indexOf(item);

          switch (menuParentIndex) {
            case 1:
              me.hideAchievementIdea = false;
              break;

            case 2:
              me.hideEmulationReward = false; //me.hideAchievementIdea = false;

              break;

            case 3:
              // me.hideEmulationReward = false;
              me.hideEvaluation = false; // me.hideAchievementIdea = false;

              break;

            case 4:
              // me.hideEmulationReward = false;
              // me.hideEvaluation = false;
              me.hideAttachment = false; // me.hideAchievementIdea = false;

              break;
          }
        }

        me.$nextTick(function () {
          var container = _this3.$refs["employee-detail"];
          container.scrollTop = item.ScrollTop;
        });
      }

      me.isClickSubsytemRoot = true;
    },

    /**
     * hàm tự scroll về đúng tab đang chọn
     * TDNGHIA 20/9/2021
     */
    rightDivScroll: function rightDivScroll(sender) {
      var me = this; //Kiểm tra xem là sự kiện kéo chuột hay click menutab

      if (sender && sender.target && !me.isClickSubsytemRoot) {
        var oDivScroll = sender.target;
        var activeid = me.cacheChildrenTab[0].SubSystemCode;
        var parentActiveid = me.cacheChildrenTab[0].SubSystemCode;

        for (var i = 0; i < me.cacheChildrenTab.length; i++) {
          var oSubsytem = me.cacheChildrenTab[i];

          if (oSubsytem.ScrollTop <= oDivScroll.scrollTop) {
            activeid = oSubsytem.SubSystemCode;
            parentActiveid = oSubsytem.ParentSubSystemCode;
          }
        }

        this.activeSubsystem = activeid;
        this.activeParentSubsystem = parentActiveid;
      }

      me.isClickSubsytemRoot = false;
    },

    /**
     * Cài đặt nội dung cho menu các tab
     * TDNGHIA 20/9/2021
     */
    setMenuTab: function setMenuTab() {
      var me = this;
      me.listItemTab = [{
        index: 1,
        title: "Thông tin chung",
        SubSystemCode: "generalInfo",
        ScrollTop: 0,
        isParent: 1,
        ScrollTarget: "pn-generalInfo",
        Children: [{
          index: 1,
          title: "Thông tin chung",
          SubSystemCode: "generalInfo",
          ScrollTop: 0,
          ScrollTarget: "pn-generalInfo",
          ParentSubSystemCode: "generalInfo"
        }, {
          index: 2,
          title: "Quê quán",
          SubSystemCode: "homeAddress",
          ScrollTop: 0,
          ScrollTarget: "pn-homeAddress",
          ParentSubSystemCode: "generalInfo"
        }, {
          index: 3,
          title: "Địa chỉ thường trú",
          SubSystemCode: "permanentAddress",
          ScrollTop: 0,
          ScrollTarget: "pn-permanentAddress",
          ParentSubSystemCode: "generalInfo"
        }, {
          index: 4,
          title: "Nơi ở hiện nay",
          SubSystemCode: "currentAddress",
          ScrollTop: 0,
          ScrollTarget: "pn-currentAddress",
          ParentSubSystemCode: "generalInfo"
        }, {
          index: 5,
          title: "Thông tin khác",
          SubSystemCode: "otherInfor",
          ScrollTop: 0,
          ScrollTarget: "pn-otherInfor",
          ParentSubSystemCode: "generalInfo"
        }]
      }, {
        index: 2,
        title: "Q.Trình công tác, sáng kiến",
        SubSystemCode: "workProcess",
        ScrollTop: 0,
        isParent: 1,
        ScrollTarget: "pn-workProcess",
        Children: [{
          index: 1,
          title: "Công việc hiện tại",
          SubSystemCode: "jobInfo",
          ScrollTop: 0,
          ScrollTarget: "pn-jobInfo",
          ParentSubSystemCode: "workProcess"
        }, {
          index: 2,
          title: "Quá trình công tác",
          SubSystemCode: "workProcess",
          ScrollTop: 0,
          ScrollTarget: "pn-workProcess",
          ParentSubSystemCode: "workProcess"
        }, {
          index: 3,
          title: "Quyền hạn, nhiệm vụ",
          SubSystemCode: "role",
          ScrollTop: 0,
          ScrollTarget: "pn-role",
          ParentSubSystemCode: "workProcess"
        }, {
          index: 4,
          title: "Sáng kiến",
          SubSystemCode: "invent",
          ScrollTop: 0,
          ScrollTarget: "pn-invent",
          ParentSubSystemCode: "workProcess"
        }]
      }, {
        index: 3,
        title: "Khen thưởng, kỷ luật",
        SubSystemCode: "ceGo",
        ScrollTop: 0,
        isParent: 1,
        ScrollTarget: "pn-praise",
        Children: [{
          index: 1,
          title: "Danh hiệu thi đua",
          SubSystemCode: "praise",
          ScrollTop: 0,
          ScrollTarget: "pn-praise",
          ParentSubSystemCode: "ceGo"
        }, {
          index: 2,
          title: "Hình thức khen thưởng",
          SubSystemCode: "typeOfReward",
          ScrollTop: 0,
          ScrollTarget: "pn-typeOfReward",
          ParentSubSystemCode: "ceGo"
        }, {
          index: 3,
          title: "Kỷ luật",
          SubSystemCode: "discipline",
          ScrollTop: 0,
          ScrollTarget: "pn-discipline",
          ParentSubSystemCode: "ceGo"
        }]
      }]; // trong đơn vị

      if (!me.isOutSider) {
        me.listItemTab.push({
          index: 4,
          isParent: 1,
          title: "Kết quả đánh giá, xếp loại",
          SubSystemCode: "evaluation",
          ScrollTop: 0,
          ScrollTarget: "pn-evaluation"
        });
      }

      me.listItemTab.push({
        index: me.isOutSider ? 4 : 5,
        isParent: 1,
        title: "Tài liệu đính kèm",
        SubSystemCode: "attachment",
        ScrollTop: 0,
        ScrollTarget: "pn-attachment"
      });
    },

    /**
     * TDNGHIA 23/9/2021
     * Thực hiện click vào text link để mở popup add
     */
    textLinkOnClick: function textLinkOnClick(e) {
      var me = this;
      var detailName = e.target.getAttribute("DetailName"); // if (detailName == "InventDetail") {
      //   me.$ms.msgBox.showInfo(me.$t("i18nCommon.FeaturesIsDeveloping"));
      // } else {

      me.showFormDetailGrid({}, me.$ms.enum.FormState.Add, detailName); //}
    },

    /**
     * Thực hiện khi ấn trên grid quá trình công tác
     * TDNGHIA 22/9/2021
     */
    rowActionClickWorkProcess: function rowActionClickWorkProcess(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "WorkingDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "WorkProcessDetail");
          break;
      }
    },

    /**
     * Hàm chung xóa row các grid detail
     * TDNGHIA 1/11/2021
     */
    deleteDetail: function deleteDetail(data, sysCode) {
      var me = this;

      if (data.FileName) {
        //Thêm vào AttachmentChanges để xóa trên storage NTDIEM 25.12.2021
        var attachmentChange = {
          file: data.FileName,
          name: data.AttachmentName,
          state: me.$ms.enum.ModelState.Delete
        };
        me.currentItem.AttachmentChanges.push(attachmentChange);
      }

      switch (sysCode) {
        case "EmulationTitleDetailPopup":
          me.listSourceEmulationTitleDetail.remove(data);
          break;

        case "RewardCategoryDetailPopup":
          me.listSourceRewardCategoryDetail.remove(data);
          break;

        case "WorkingDetail":
          me.listSourceWorkingDetail.remove(data);
          break;

        case "RoleDetail":
          me.listSourceMissionRole.remove(data);
          break;

        case "InventDetail":
          me.listSourceAchievementIdea.remove(data);
          break;

        case "DisciplineDetail":
          me.listSourceDisciplineDetail.remove(data);
          break;

        case "EvaluationDetail":
          me.listSourceEvaluationDetail.remove(data);
          break;

        case "AttachmentDetail":
          me.deleteAttachmentDetail(data);
          break;

        default:
          break;
      }
    },

    /**
     * Thực hiện khi ấn trên grid danh hiệu thi đua
     * TDNGHIA 22/9/2021
     */
    rowActionClickEmulationTitle: function rowActionClickEmulationTitle(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "EmulationTitleDetailPopup");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "EmulationTitleDetailPopup");
          break;
      }
    },

    /**
     * Thực hiện khi ấn trên grid tập đính kèm
     * TDNGHIA 22/9/2021
     */
    rowActionClickAttachmentDetail: function rowActionClickAttachmentDetail(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "AttachmentDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "AttachmentDetail");
          break;

        case "Download":
          me.downloadFile(record);
          break;
      }
    },

    /**
     * Tải xuống tệp đính kèm
     * NTDIEM 08/04/2022
     */
    downloadFile: function downloadFile(record) {
      var me = this;
      var type = record.FileType == me.$ms.enum.StorageFileType.Temp ? record.FileType : me.$ms.enum.StorageFileType.Attachment;
      var downloadLink = fileApi.getDownloadLink(record.FileName, type, me.context.Context.TenantID, record.OrganizationID ? record.OrganizationID : me.context.Organization.OrganizationID, record.AttachmentName);
      commonFn.downloadFile(downloadLink);
    },

    /**
     * Thực hiện khi ấn trên grid hình thức khen thưởng
     * TDNGHIA 22/9/2021
     */
    rowActionClickRewardForm: function rowActionClickRewardForm(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "RewardCategoryDetailPopup");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "RewardCategoryDetailPopup");
          break;
      }
    },

    /**
     * Hàm chung show form cho các grid
     * Thực hiện khi ấn trên grid quá trình quyền nhiệm vụ
     * TDNGHIA 22/9/2021
     */
    rowActionClickDiscipline: function rowActionClickDiscipline(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "DisciplineDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "DisciplineDetail");
          break;
      }
    },

    /**
     * Hàm chung show form cho các grid
     * Thực hiện khi ấn trên grid quá trình quyền nhiệm vụ
     * TDNGHIA 22/9/2021
     */
    rowActionClickRole: function rowActionClickRole(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "RoleDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "MissionRole");
          break;
      }
    },

    /**
     * Thực hiện khi ấn trên grid quá trình quyền nhiệm vụ
     * TDNGHIA 22/9/2021
     */
    rowActionClickInvent: function rowActionClickInvent(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "InventDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "InventDetail");
          break;
      }
    },

    /**
     * Thực hiện khi ấn trên grid đánh giá
     * NTBAO 18.02.2022
     */
    rowActionClickEvaluation: function rowActionClickEvaluation(command, record, event) {
      var me = this;

      switch (command) {
        // Xóa
        case "Delete":
          me.deleteDetail(record, "EvaluationDetail");
          break;

        case "Edit":
          me.showFormDetailGrid(record, me.$ms.enum.FormState.Edit, "EvaluationDetail");
          break;
      }
    },

    /**
     * Hàm chung show form cho các grid
     * TDNGHIA 22/9/2021
     */
    showFormDetailGrid: function showFormDetailGrid(record, mode, SubSystemCode) {
      var me = this;
      var path = SubSystemCode;
      var param = {
        data: record,
        mode: mode
      };
      var pop = popupUtil._visible[path];

      if (pop) {
        pop.active = false;
      }

      me.showDetail(path, mode, param, me.getPopupOption(path));
    },

    /**
     * TDNGHIA 30/10/2021
     * case để truyền các submitcallback cho đúng
     * Cho phép detail gọi tới submitDetailCallback của danh sách sau khi cất xong
     */
    getPopupOption: function getPopupOption(name) {
      var me = this;
      var optionDetail = {
        single: true,
        context: me.options.context
      };

      switch (name) {
        case "WorkProcessDetail":
          optionDetail.submit = me.submitWorkingDetailCallback;
          optionDetail.isOutSider = me.isOutSider;
          break;

        case "MissionRole":
          optionDetail.submit = me.submitMissionRoleCallback;
          break;

        case "InventDetail":
          optionDetail.submit = me.submitInventDetailCallback;
          break;

        case "EmulationTitleDetailPopup":
          optionDetail.submit = me.submitEmulationTitleDetailCallback;
          break;

        case "RewardCategoryDetailPopup":
          optionDetail.submit = me.submitRewardCategoryDetailCallback;
          break;

        case "DisciplineDetail":
          optionDetail.submit = me.submitDisciplineDetailCallback;
          break;

        case "MSAttachmentDetail":
          optionDetail.fileSizeSumary = me.fileSizeSumary;
          optionDetail.submit = me.submitAttachmentDetailCallback;
          break;

        case "EvaluationDetail":
          optionDetail.submit = me.submitEvaluationDetailCallback;
          break;

        default:
          break;
      }

      return optionDetail;
    },

    /**
     * Hàm xử lý callback chung cho các màn detail
     * TDNGHIA 1/11/2021
     */
    submitCallback: function submitCallback(listDataDetail, fieldData, fieldSort, saveParam, action) {
      var me = this;

      if (action == "update") {
        this.setNewElement(listDataDetail, fieldData, saveParam.Entity);
      } else {
        this.setNewID(listDataDetail, fieldData, saveParam.Entity); //Xử lý thêm vào list cho các entity dạng array NTDIEM 26.11.2021

        if (saveParam.Entity.length > 0) {
          saveParam.Entity.forEach(function (item) {
            listDataDetail.push(item);
          });
        } else {
          listDataDetail.push(saveParam.Entity);
        }
      } //Thêm detail có tệp đính kèm thì update tệp attachmentChange cho AttachmentChange chung NTDIEM 24.12.2021


      if (saveParam.Entity.AttachmentChanges) {
        saveParam.Entity.AttachmentChanges.forEach(function (change) {
          me.currentItem.AttachmentChanges.push(change);
        });
      } //thực hiện sort truyền thêm biến đánh dấu phải cast về date trước khi so sánh


      if (fieldSort != "Year") {
        listDataDetail = this.$ms.commonFn.sortArray(this.$ms.enum.SortStatus.desc, listDataDetail, fieldSort, 1);
      } else {
        listDataDetail = this.$ms.commonFn.sortArray(this.$ms.enum.SortStatus.desc, listDataDetail, fieldSort);
      }
    },

    /**
     * Hàm callback sau khi save dữ liệu
     * TDNGHIA 1/11/2021
     */
    submitDisciplineDetailCallback: function submitDisciplineDetailCallback(result, param, action) {
      var me = this; //Lưu thông tin cơ quan ra quyết định mới

      me.saveDecisionOrganization(result, param, action, "DisciplineDetail");
      me.submitCallback(this.listSourceDisciplineDetail, "ID", "FromDate", param, action);
      me.$refs.btnDiscipline.focus();
    },

    /**
     * Call back sau khi theem danh hiệu thi đua
     * TDNGHIA 1/11/2021
     */
    submitEmulationTitleDetailCallback: function submitEmulationTitleDetailCallback(result, param, action) {
      var me = this; //Lưu thông tin cơ quan ra quyết định mới

      me.saveDecisionOrganization(result, param, action, "EmulationTitleDetailPopup");
      me.submitCallback(this.listSourceEmulationTitleDetail, "ID", "Date", param, action);
      me.$refs.btnEmulationTitle.focus();
    },

    /**
     * Callback sau khi thêm hình thức khen thưởng
     * TDNGHIA 1/11/2021
     */
    submitRewardCategoryDetailCallback: function submitRewardCategoryDetailCallback(result, param, action) {
      var me = this; //Lưu thông tin cơ quan ra quyết định mới

      me.saveDecisionOrganization(result, param, action, "RewardCategoryDetailPopup");
      me.submitCallback(this.listSourceRewardCategoryDetail, "ID", "Date", param, action);
      me.$refs.btnRewardCategory.focus();
    },

    /**
     * Callback sau khi save quá trình công tác
     * TDNGHIA 1/11/2021
     */
    submitWorkingDetailCallback: function submitWorkingDetailCallback(result, param, action) {
      var me = this;
      me.submitCallback(this.listSourceWorkingDetail, "WorkingID", "ToDate", param, action);
      me.$refs.btnWorking.focus();
    },

    /**
     * Callback sau khi save quyền hạn nhiệm vụ được giao
     * TDNGHIA 1/11/2021
     */
    submitMissionRoleCallback: function submitMissionRoleCallback(result, param, action) {
      var me = this;
      me.submitCallback(this.listSourceMissionRole, "RoleID", "Year", param, action);
      me.$refs.btnRole.focus();
    },

    /**
     * Callback sau khi save sáng kiến
     * NTTHANH1 07/12/2021
     * Modify 04/03/2022
     */
    submitInventDetailCallback: function submitInventDetailCallback(result, param, action) {
      var me = this; //Lưu thông tin cơ quan ra quyết định mới

      me.saveDecisionOrganization(result, param, action, "InventDetail");
      me.submitCallback(this.listSourceAchievementIdea, "InventID", "Year", param, action);
      me.$refs.btnInvent.focus();
    },

    /**
     * Callback sau khi save đánh giá, xếp loại
     * NTBAO 17.02.2022
     */
    submitEvaluationDetailCallback: function submitEvaluationDetailCallback(result, param, action) {
      var me = this;
      me.submitCallback(this.listSourceEvaluationDetail, "ID", "Date", param, action);
      me.$refs.btnEval.focus();
    },

    /**
     * Callback sau khi thêm tệp đính kèm
     * NTDIEM 18.11.2021
     */
    submitAttachmentDetailCallback: function submitAttachmentDetailCallback(result, param, action) {
      var me = this;
      me.submitCallback(this.listSourceAttachmentDetail, "ID", "AttachmentName", param, action);

      if (param.AttachmentChanges) {
        param.AttachmentChanges.forEach(function (change) {
          me.currentItem.AttachmentChanges.push(change);
        });
      }

      me.$refs.btnAttach.focus();
    },

    /**
     * Lưu thông tin cơ quan ra quyết định mới
     * NTTHANH1 04/03/2022
     */
    saveDecisionOrganization: function saveDecisionOrganization(result, param, action, detailName) {
      var me = this;
      var entity = null;

      switch (detailName) {
        case "InventDetail":
          if (param.Entity && param.Entity.DecisionOrganization) {
            entity = {
              PickListName: param.Entity.DecisionOrganization,
              PickListType: me.$ms.enum.PickListType.DecisionOrganization
            };
          }

        case "EmulationTitleDetailPopup":
        case "RewardCategoryDetailPopup":
        case "DisciplineDetail":
          if (param.Entity && param.Entity.OrganizationBelong) {
            entity = {
              PickListName: param.Entity.OrganizationBelong,
              PickListType: me.$ms.enum.PickListType.DecisionOrganization
            };
          }

      }

      if (entity) {
        PickListAPI.insertCheckDuplicate(entity).then(function (res) {}).catch(function (err) {
          console.log(err);
        });
      }
    },

    /**
     * Cập nhật lại bản ghi được sửa cho các bảng con
     * TDNGHIA 31/10/2021
     */
    setNewElement: function setNewElement(arr, fieldData, obj) {
      for (var index = 0; index < arr.length; index++) {
        if (arr[index][fieldData] === obj[fieldData]) {
          arr[index] = _objectSpread({}, obj);
          break;
        }
      }
    },

    /**
     * trả về ID mới nhất cho bản ghi
     * TDNGHIA 31/10/2021
     */
    setNewID: function setNewID(arr, dataField, object) {
      var newID = 1;

      if (arr.length > 0) {
        var arrID = arr.map(function (item) {
          return item[dataField];
        });
        newID = Math.max.apply(Math, _toConsumableArray(arrID)) + 1;
      }

      object[dataField] = newID;
    },

    /**
     * Hàm show các popup
     * @param name tên của component
     */
    showDetail: function showDetail(name, mode, data, option) {
      var me = this;
      popupUtil.show(me, name, data, option);
    },

    /**
     * Chọn tỉnh/thành phố quê quán
     */
    selectedProvinceHome: function selectedProvinceHome(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.HomeProvinceName = item.LocationName;
      me.currentItem.HomeDistrict = null;
      me.currentItem.HomeWard = null;
      me.currentItem.HomeDistrictName = null;
      me.currentItem.HomeWardName = null;
      me.districtDataHome = [];
      me.wardDataHome = [];
      me.getDistrictByProvinceID(item.LocationID, 1);
    },

    /**
     * TDNGHIA 23/9/2021
     * Hàm xử lý load combo district địa chỉ thường trú
     */
    selectedProvincePermanent: function selectedProvincePermanent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.PermanentProvinceName = item.LocationName;
      me.currentItem.PermanentDistrict = null;
      me.currentItem.PermanentWard = null;
      me.currentItem.PermanentDistrictName = null;
      me.currentItem.PermanentWardName = null;
      me.districtDataPermanent = [];
      me.wardDataPermanent = [];
      me.getDistrictByProvinceID(item.LocationID, 2);
    },

    /**
     * TDNGHIA 23/9/2021
     * Hàm xử lý load combo district nơi ở hiện nay
     */
    selectedProvinceCurrent: function selectedProvinceCurrent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.CurrentDistrictName = item.LocationName;
      me.currentItem.CurrentDistrict = null;
      me.currentItem.CurrentWard = null;
      me.currentItem.CurrentDistrictName = null;
      me.currentItem.CurrentWardName = null;
      me.districtDataCurrent = [];
      me.wardDataCurrent = [];
      me.getDistrictByProvinceID(item.LocationID, 3);
    },

    /**
     * Lấy danh sách Quận/huyện
     * TDNGHIA 14/10/2021
     */
    getDistrictByProvinceID: function getDistrictByProvinceID(id, mode) {
      var me = this;

      if (id) {
        me.$store.dispatch("".concat(ModuleLocation, "/getReferenceDistrict"), {
          provinceID: id
        }).then(function (res) {
          if (res) {
            switch (mode) {
              case 1:
                me.districtDataHome = res;
                break;

              case 2:
                me.districtDataPermanent = res;
                break;

              case 3:
                me.districtDataCurrent = res;
                break;
            }
          }
        });
      }
    },

    /**
     * Sự kiện thay đổi Quận Huyện quê quán
     * DHPHI
     */
    selectedDistrictHome: function selectedDistrictHome(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.HomeDistrictName = item.LocationName;
      me.currentItem.HomeWard = null;
      me.currentItem.HomeWardName = null;
      me.wardDataHome = [];
      me.getWardByDistrictID(item.LocationID, 1);
    },

    /**
     * Sự kiện thay đổi Quận Huyện thường trú
     * DHPHI
     */
    selectedDistrictPermanent: function selectedDistrictPermanent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.PermanentDistrictName = item.LocationName;
      me.currentItem.PermanentWard = null;
      me.currentItem.PermanentWardName = null;
      me.wardDataPermanent = [];
      me.getWardByDistrictID(item.LocationID, 2);
    },

    /**
     * Sự kiện thay đổi Quận Huyện
     * DHPHI
     */
    selectedDistrictCurrent: function selectedDistrictCurrent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.CurrentDistrictName = item.LocationName;
      me.currentItem.CurrentWard = null;
      me.currentItem.CurrentWardName = null;
      me.wardDataCurrent = [];
      me.getWardByDistrictID(item.LocationID, 3);
    },

    /**
     * sự kiện thay đổi xã / phường
     * NMTUAN2 04.01.2022
     */
    selectedWardHome: function selectedWardHome(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.HomeWardName = item.LocationName;
    },

    /**
     * sự kiện thay đổi xã / phường
     * NMTUAN2 04.01.2022
     */
    selectedWardPermanent: function selectedWardPermanent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.PermanentWardName = item.LocationName;
    },

    /**
     * sự kiện thay đổi xã / phường
     * NMTUAN2 04.01.2022
     */
    selectedWardCurrent: function selectedWardCurrent(selectedData) {
      var me = this;
      var item = selectedData.newData;
      me.currentItem.CurrentWardName = item.LocationName;
    },

    /**
     * Lấy dữ liệu tỉnh thành phố
     * TDNGHIA 14/10/2021
     */
    getProvinceData: function getProvinceData() {
      var me = this;
      me.$store.dispatch("".concat(ModuleLocation, "/getAllProvince")).then(function (res) {
        if (res) {
          me.provinceData = res;
        }
      });
    },

    /**
     * Lấy danh sách Xã/Phường
     */
    getWardByDistrictID: function getWardByDistrictID(id, mode) {
      var me = this;

      if (id) {
        me.$store.dispatch("".concat(ModuleLocation, "/getWardByDistrictID"), {
          districtID: id
        }).then(function (res) {
          if (res) {
            switch (mode) {
              case 1:
                me.wardDataHome = res;
                break;

              case 2:
                me.wardDataPermanent = res;
                break;

              case 3:
                me.wardDataCurrent = res;
                break;
            }
          }
        });
      }
    },

    /**
     * Copy địa chỉ từ 1: quê quán 2: thường trú
     * TDNGHIA 29/10/2021
     */
    copyAddress: function copyAddress(mode) {
      var me = this;

      switch (mode) {
        case 1:
          me.currentItem.PermanentProvince = me.currentItem.HomeProvince;
          me.currentItem.PermanentDistrict = me.currentItem.HomeDistrict;
          me.currentItem.PermanentWard = me.currentItem.HomeWard;
          me.currentItem.PermanentProvinceName = me.currentItem.HomeProvinceName;
          me.currentItem.PermanentDistrictName = me.currentItem.HomeDistrictName;
          me.currentItem.PermanentWardName = me.currentItem.HomeWardName;
          me.currentItem.PermanentAddress = me.currentItem.HomeAddress;
          me.getDistrictByProvinceID(me.currentItem.PermanentProvince, 2);
          me.getWardByDistrictID(me.currentItem.PermanentDistrict, 2); // //Cài selection cho 3 combo
          // me.setInternalValueCombo(
          //   me.$refs.cboProvincePermanent,
          //   me.currentItem.HomeProvinceName,
          //   me.currentItem.HomeProvince
          // );
          // me.setInternalValueCombo(
          //   me.$refs.cboDistrictPermanent,
          //   me.currentItem.HomeDistrictName,
          //   me.currentItem.HomeDistrict
          // );
          // me.setInternalValueCombo(
          //   me.$refs.cboWardPermanent,
          //   me.currentItem.HomeWardName,
          //   me.currentItem.HomeWard
          // );

          break;

        case 2:
          me.currentItem.CurrentProvince = me.currentItem.PermanentProvince;
          me.currentItem.CurrentDistrict = me.currentItem.PermanentDistrict;
          me.currentItem.CurrentWard = me.currentItem.PermanentWard;
          me.currentItem.CurrentProvinceName = me.currentItem.PermanentProvinceName;
          me.currentItem.CurrentDistrictName = me.currentItem.PermanentDistrictName;
          me.currentItem.CurrentWardName = me.currentItem.PermanentWardName;
          me.currentItem.CurrentAddress = me.currentItem.PermanentAddress;
          me.getDistrictByProvinceID(me.currentItem.CurrentProvince, 3);
          me.getWardByDistrictID(me.currentItem.CurrentDistrict, 3); // //Cài selection cho 3 combo
          // me.setInternalValueCombo(
          //   me.$refs.cboProvinceCurrent,
          //   me.currentItem.PermanentProvinceName,
          //   me.currentItem.PermanentProvince
          // );
          // me.setInternalValueCombo(
          //   me.$refs.cboDistrictCurrent,
          //   me.currentItem.PermanentDistrictName,
          //   me.currentItem.PermanentDistrict
          // );
          // me.setInternalValueCombo(
          //   me.$refs.cboWardCurrent,
          //   me.currentItem.PermanentWardName,
          //   me.currentItem.PermanentWard
          // );

          break;
      }
    },

    /**
     * Copy giá trị mới cho combo địa chỉ
     * TDNGHIA 27/12/2021
     */
    setInternalValueCombo: function setInternalValueCombo(combo, text, value) {
      var me = this;
      var item = {
        Kind: 3,
        LocationID: value,
        LocationName: text
      };
      combo.setInternalItem(item);
    },

    /**
     * Custom dữ liệu thực hiện cất
     * JSON lại các bảng
     */
    customSaveData: function customSaveData(editMode, data) {
      var me = this;

      if (data.DateOfBirth !== null) {
        if (data.TimeType === 0) {
          data.DateOfBirth = me.$ms.commonFn.formatDateTime(data.DateOfBirth);
        }
      }

      data.WorkingDetail = JSON.stringify(me.listSourceWorkingDetail);
      data.MissionRole = JSON.stringify(me.listSourceMissionRole); //Khi lưu thì xóa bớt thông tin không cần thiết liên quan đến tệp đính kèm

      me.listSourceAchievementIdea.forEach(function (item) {
        delete item.AttachmentChanges;
        delete item.FileType;
      });
      data.AchievementIdea = JSON.stringify(me.listSourceAchievementIdea); //Khi lưu thì xóa bớt thông tin không cần thiết liên quan đến tệp đính kèm

      me.listSourceEmulationTitleDetail.forEach(function (item) {
        delete item.AttachmentChanges;
        delete item.FileType;
      });
      data.EmulationTitleDetail = JSON.stringify(me.listSourceEmulationTitleDetail); //Khi lưu thì xóa bớt thông tin không cần thiết liên quan đến tệp đính kèm

      me.listSourceRewardCategoryDetail.forEach(function (item) {
        delete item.AttachmentChanges;
        delete item.FileType;
      });
      data.RewardCategoryDetail = JSON.stringify(me.listSourceRewardCategoryDetail); //Thêm editMode cho trường detail tệp đính kèm

      me.listSourceAttachmentDetail.forEach(function (item) {
        item.EntityState = item.EntityState == me.$ms.enum.ModelState.Update ? me.$ms.enum.ModelState.Update : me.$ms.enum.ModelState.Insert;
      }); //Merge thêm danh sách xóa tệp đính kèm vào đề xóa master-detail

      data.AttachmentDetail = [].concat(_toConsumableArray(me.listSourceAttachmentDetail), _toConsumableArray(me.listDeleteAttachment)); //Khi lưu thì xóa bớt thông tin không cần thiết liên quan đến tệp đính kèm

      me.listSourceDisciplineDetail.forEach(function (item) {
        delete item.AttachmentChanges;
        delete item.FileType;
      });
      data.DisciplineDetail = JSON.stringify(me.listSourceDisciplineDetail); // Thông tin đánh giá

      data.EvaluationDetail = JSON.stringify(me.listSourceEvaluationDetail);
      var nameArr = data.FullName.split(" ");
      data.FirstName = nameArr[0];
      data.LastName = nameArr[nameArr.length - 1];

      if (!me.isOutSider) {
        data.DepartmentName = me.$refs.cboDepartment.internalText;
      }

      data.AcademicTitleName = me.$refs.AcademicTitleCbo.internalText;
      data.AcademicRankName = me.$refs.AcademicRankCbo.internalText;
    },

    /**
     * custome lại payload của combo department
     * TDNGHIA 28/10/2021
     * type tự tạo ra để case cho từng combo trong màn này
     */
    customPayloadCombo: function customPayloadCombo(payload, type) {
      var me = this;

      if (!payload.filter) {
        payload.filter = [];
      }

      if (me.options.context.Organization.AdministrativeLevel != me.$ms.enum.ApplyLevel.ProvinceLevel) {
        payload.filter.push({
          property: "ApplyLevelID",
          value: me.options.context.Organization.AdministrativeLevel.toString(),
          operator: me.$ms.enum.FilterHeader.Contains,
          operand: "and"
        });
      }

      payload.filter.push({
        property: "Inactive",
        value: "0",
        operator: me.$ms.enum.FilterHeader.Equals,
        operand: "and"
      });
      payload.filter.push({
        property: "JobPositionType",
        value: type == me.$ms.enum.JobPositionType.Position ? "0" : "1",
        operator: me.$ms.enum.FilterHeader.Equals,
        operand: "and"
      });
      payload["sort"] = "JobPositionName ASC"; //Thêm sort vào payload để sắp xếp lại thứ tự combo NTDIEM 31.03.2022

      me.super("customPayloadCombo", payload);
    },

    /**
     * custom tham số lấy dữ liệu nghề nghiệp
     * NTTHANH1
     */
    customPayloadPickList: function customPayloadPickList(payload) {
      var me = this;

      if (!payload.filter) {
        payload.filter = [];
      }

      payload.filter.push({
        property: "PickListType",
        value: me.$ms.enum.PickListType.CareerName,
        operator: me.$ms.enum.FilterHeader.Equals,
        operand: "and"
      }, {
        property: "Inactive",
        value: false,
        operator: me.$ms.enum.FilterHeader.Equals,
        operand: "and"
      });
      return payload;
    },

    /**
     * Copy thông tin công việc gần nhất
     * TDNGHIA 2/11/2021
     */
    getCurrentWorkingDetail: function getCurrentWorkingDetail() {
      var me = this;

      if (me.listSourceWorkingDetail[0]) {
        var item = me.listSourceWorkingDetail[0];
        me.currentItem.OrganizationName = item.OrganizationName;
        me.currentItem.JobPositionID = item.JobPositionID;
        me.currentItem.JobPositionName = item.JobPositionName;
        me.currentItem.JobTitleID = item.JobTitleID;
        me.currentItem.JobTitleName = item.JobTitleName;
        me.currentItem.WorkingOnDate = item.FromDate;
        me.currentItem.DepartmentID = null;
        me.currentItem.DepartmentName = item.DepartmentName;
      }
    },

    /**
     * Check change trước khi thoát ra
     * TDNGHIA 11/11/2021
     */
    close: function close() {
      var _this4 = this;

      var me = this;

      if (me.checkChanges()) {
        var msg = me.getCloseConfirmMessage();
        me.$ms.msgBox.showConfirm(msg, null, null, "Lưu hồ sơ thành tích").then(function (answer) {
          if (answer === "Yes") {
            me.save(_this4.$ms.enum.SaveMode.Save);
          }

          if (answer == "No") {
            me.hide();
          }
        });
      } else {
        me.hide();
      }
    },

    /**
     * Lấy nội dung thông báo theo mã validate
     * TDNGHIA override lại custom câu duplicate
     */
    getValidateMessage: function getValidateMessage(validateCode, data) {
      var me = this;
      var msg = validateCode;
      var titleName = me.getFormTitle(me.editMode);
      var field = me.$store.state[me.module]._config.field;

      switch (validateCode) {
        case "Duplicate":
          var codeDuplicate = me.currentItem[field.unique] || me.currentItem[field.code] || me.currentItem[field.name];
          var moduleName = me.$t("i18nCommon.module." + me.module.toLowerCase());
          msg = "Số hiệu cán bộ <b>{0}</b> đã tồn tại trong danh sách. Xin vui lòng kiểm tra lại.".format(codeDuplicate);
          break;

        default:
          msg = me.super("getValidateMessage", validateCode, data);
          break;
      }

      return msg;
    },

    /**
     * Xóa tệp đính kèm
     * NTDIEM 22.11.2021
     * update:Chỉ xóa giả trên bảng thôi. Khi nào ấn lưu mới xóa trên db
     */
    deleteAttachmentDetail: function deleteAttachmentDetail(record) {
      var me = this; //Xóa trreen list

      me.listSourceAttachmentDetail.remove(record); //Thêm vào danh sách xóa để xóa trong DB
      //Thêm State vào để chạy master-detail BE tự động xóa

      record.EntityState = me.$ms.enum.ModelState.Delete;
      me.listDeleteAttachment.push(record);
    },

    /**
     * click bản ghi -> hiển thị menu
     */
    gridRowOver: function gridRowOver(record, e) {
      var me = this;
      me.rowActions = me.getRecordActions(record);
    },

    /**
     * lấy danh sách action của bản ghi
     */
    getRecordActions: function getRecordActions(record) {
      if (typeof record.CertificateID !== "undefined") {
        if (record.CertificateID !== null) {
          return [];
        } else {
          return [{
            command: "Edit",
            icon: "edit",
            text: this.$t("i18nCommon.command.edit")
          }, {
            command: "Delete",
            icon: "delete",
            text: this.$t("i18nCommon.command.delete")
          }];
        }
      }

      return [{
        command: "Edit",
        icon: "edit",
        text: this.$t("i18nCommon.command.edit")
      }, {
        command: "Delete",
        icon: "delete",
        text: this.$t("i18nCommon.command.delete")
      }];
    },

    /**
     * Khi chọn checkbox Đã hi sinh/từ trần thì mặc định năm hi sinh/từ trần là năm hiện tại
     *
     * NMTUAN3 21/12/2021
     */
    setDateOfDeath: function setDateOfDeath() {
      if (this.currentItem.IsGone) {
        var now = new Date();
        this.currentItem.DateOfDeath = this.currentItem.DateOfDeath ? this.currentItem.DateOfDeath : now.getFullYear();
      }
    },

    /**
     * Sự kiện click combo cboTimeTypeInPeriod
     * DLHuy 27.12.2021
     */
    timeTypeInPeriod_Selected: function timeTypeInPeriod_Selected(metaData) {
      var me = this;
      me.currentItem.DateOfBirth = null;
    },

    /** bắt sự kiện khi click ra ngoài datepicker */
    blurDatePicker: function blurDatePicker() {
      var me = this;
      me.$refs.cboFromDate_Period_Day.momentMask.mask = me.$refs.cboFromDate_Period_Day.rawValue;
    },

    /**
     * Enter các link text
     * TDNGHIA 3/3/2021
     */
    linkTextOnEnter: function linkTextOnEnter(type) {
      var me = this;

      if (event.keyCode == 13) {
        switch (type) {
          case 1:
            me.copyAddress(1);
            break;

          case 2:
            me.copyAddress(2);
            break;

          case 3:
            me.getCurrentWorkingDetail();
            break;

          default:
            me.textLinkOnClick(event);
            break;
        }
      }
    },

    /**
     * Set avatar lấy từ storage
     * NTDIEM 17/03/2022
     */
    setAvatar: function setAvatar(value, change, avatarFile) {
      var me = this;
      var param = {
        userID: me.currentItem.EmployeeID,
        fullName: me.currentItem.FullName,
        tenantID: me.context.Context.TenantID,
        organizationID: me.context.Organization.OrganizationID
      },
          time = "&" + new Date().getTime().toString(); //Lấy thêm thời gian vào url để không bị cache NTDIEM 17/03/2022

      me.avatarUrl = ImageAPI.getAvatarLink(param.userID, param.fullName, param.tenantID, param.organizationID);
      document.getElementsByClassName("empoyee-avatar")[0].setAttribute("src", me.avatarUrl + time);
      me.avatarFile = avatarFile;
    },

    /**
     * Xử lý sau khi cất
     * TDNGHIA 18/3/2021
     * Override lại để gọi lưu avt do có case lưu và thêm mới nên phải override
     * Override lại để xử lý lưu Avatar có trường hợp thêm mới NTDIEM 18/03/2022
     * */
    afterSubmit: function afterSubmit(result, param, action) {
      var me = this; //DLHuy 06.11.2021 thêm hàm này để custom lại câu thông báo

      me.getNotiSuccess();

      if (me.options && me.options.submit) {
        me.options.submit(result, param, action);
      }

      me.isChangeData = true;

      switch (param.Mode) {
        case me.$ms.enum.SaveMode.Save:
          me.saveAvatar(result.Data.EmployeeID);
          me.afterSubmitModeSave(result, param);
          break;

        case me.$ms.enum.SaveMode.SaveNew:
          me.saveAvatar(result.Data.EmployeeID);
          me.add({});
          break;
        // pvduy 04/03/2021 cất thành công tại mode view

        case me.$ms.enum.SaveMode.SaveView:
          me.afterSubmitModeView();
          break;

        case me.$ms.enum.SaveMode.SaveAndConfig:
          me.afterSubmitModeSaveAndConfig(result, param, action);
          break;

        default:
          me.hide();
          break;
      } // NMTUAN3 7/3/2022: Tạo thông báo sau khi submit


      me.createNotification(result.Data, param, action);
    },

    /**
     * Lưu lại avatar theo EmployeeID khi thêm mới hồ sơ
     * NTDIEM 18/03/2022
     */
    saveAvatar: function saveAvatar(userID) {
      var me = this;
      var param = {
        userID: me.currentItem.EmployeeID,
        fullName: me.currentItem.FullName,
        tenantID: me.context.Context.TenantID,
        organizationID: me.context.Organization.OrganizationID
      };

      if (me.avatarFile) {
        me.avatarFile.FileName = userID.toString(); //Xóa avatar là chuỗi guid trống trên storage

        me.deleteTempAvatar(param.userID, param.tenantID, param.organizationID); //Lưu lại avatar người dùng có tên bằng EmployeeID

        fileApi.uploads([me.avatarFile], me.$ms.enum.StorageFileType.Avatar);
      }
    },

    /**
     * Xóa avatar có tên là chuỗi guid rỗng trên storage
     * NTDIEM 31/03/2022
     */
    deleteTempAvatar: function deleteTempAvatar(userID, tenanID, organizationID) {
      var _this5 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var me;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                me = _this5;
                _context2.next = 3;
                return fileApi.deleteFile(userID, me.$ms.enum.StorageFileType.Avatar, tenanID, organizationID);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },

    /**
     * @override
     * Kiểm tra và xóa avatar khi đóng hồ sơ cá nhân
     * NTDIEM 31/03/2022
     */
    hide: function hide() {
      var me = this; //Nếu người dùng thêm avatar -> đóng hồ sơ -> xóa file ảnh có UserId = guid trống trên storage đi

      if (me.avatarFile && me.currentItem.EmployeeID == "00000000-0000-0000-0000-000000000000") {
        me.deleteTempAvatar(me.currentItem.EmployeeID, me.context.Context.TenantID, me.context.Organization.OrganizationID);
      }

      me.super("hide");
    },

    /**
     * Ẩn hiện chi tiết các thông tin
     * DHPhi 28/03/2022
     */
    hideInformation: function hideInformation(value) {
      switch (value) {
        case "hideInfor":
          this.hideInfor = !this.hideInfor;
          break;

        case "hideEmulationReward":
          this.hideEmulationReward = !this.hideEmulationReward;
          break;

        case "hideEvaluation":
          this.hideEvaluation = !this.hideEvaluation;
          break;

        case "hideAchievementIdea":
          this.hideAchievementIdea = !this.hideAchievementIdea;
          break;

        case "hideAttachment":
          this.hideAttachment = !this.hideAttachment;
          break;

        default:
          break;
      }
    },

    /**
     * Tính tổng dung lượng file
     * NTDIEM 07/04/2022
     */
    caculateFileSize: function caculateFileSize() {
      var me = this;
      me.fileSizeSumary = 0; //Gán bằng 0 để tính lại khi có sự thay đổi tệp đính kèm

      var type = "";

      if (me.listSourceAttachmentDetail) {
        me.listSourceAttachmentDetail.forEach(function (attachment) {
          type = attachment.FileSize.slice(attachment.FileSize.length - 2, attachment.FileSize.length);

          switch (type) {
            case "MB":
              me.fileSizeSumary += parseFloat(attachment.FileSize.slice(0, attachment.FileSize.length - 3)) * 1048576;
              break;

            case "KB":
              me.fileSizeSumary += parseFloat(attachment.FileSize.slice(0, attachment.FileSize.length - 3)) * 1024;
              break;

            default:
              break;
          }
        });
      }
    }
  }
};"},null]}
{"remainingRequest":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT_vue\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\VNT_vue\\src\\stores\\movement\\register-approval-synthesize\\module-register-general.js","dependencies":[{"path":"D:\\VNT_vue\\src\\stores\\movement\\register-approval-synthesize\\module-register-general.js","mtime":1653205086674},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT_vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6L1ZOVF92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJEOi9WTlRfdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgYXBpIGZyb20gIkAvYXBpcy9tb3ZlbWVudC9lbXVsYXRpb25SZWdpc3RlckFQSSI7CmltcG9ydCBDcnVkIGZyb20gIkAvc3RvcmVzL2Jhc2UvY3J1ZC1iYXNlIjsKdmFyIGNydWQgPSBuZXcgQ3J1ZCgiRW11bGF0aW9uUmVnaXN0ZXIiLCBhcGkpOwoKdmFyIHN0YXRlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjcnVkLnN0YXRlKSwge30sIHsKICBfY29uZmlnOiB7CiAgICBmaWVsZDogewogICAgICBrZXk6ICJFbXVsYXRpb25SZWdpc3RlcklEIgogICAgfQogIH0sCiAgbGlzdFRlYW1SZWdpc3RlcnM6IFtdLAogIGxpc3RUZWFtUmVnaXN0ZXJzVG90YWw6IDAsCiAgbGlzdFBlcnNvbmFsUmVnaXN0ZXJzOiBbXSwKICBsaXN0UGVyc29uYWxSZWdpc3RlcnNUb3RhbDogMAp9KTsKCnZhciBnZXR0ZXJzID0gX29iamVjdFNwcmVhZCh7fSwgY3J1ZC5nZXR0ZXJzKTsKCnZhciBhY3Rpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjcnVkLmFjdGlvbnMpLCB7fSwgewogIC8qKg0KICAgKiBM4bqleSBkYW5oIHPDoWNoIMSRxINuZyBrw70gdGhpIMSRdWEgDQogICAqIE5UQkFPIDAyLjExLjIwMjENCiAgICogQHBhcmFtIHsqfSBjb250ZXh0IA0KICAgKiBAcGFyYW0geyp9IHBhcmFtIA0KICAgKiBAcmV0dXJucyANCiAgICovCiAgbG9hZExpc3REZXRhaWxQYWdpbmc6IGZ1bmN0aW9uIGxvYWRMaXN0RGV0YWlsUGFnaW5nKGNvbnRleHQsIHBhcmFtKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmVzID0gbnVsbDsKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgidXBkYXRlTG9hZGluZyIsIHRydWUpOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBhcGkubG9hZExpc3RSZWdpc3RlckRldGFpbFBhZ2luZyhwYXJhbS5wYXlsb2FkIHx8IHt9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA2OwogICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJ1cGRhdGVMb2FkaW5nIiwgZmFsc2UpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNik7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICAgICAgaWYgKHBhcmFtLnNjcmVlbktleSA9PSAidGVhbSIpIHsKICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoInNldExpc3RUZWFtUmVnaXN0ZXJzIiwgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVzLAogICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHBhcmFtLnBheWxvYWQKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnNjcmVlbktleSA9PSAicGVyc29uYWwiKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJzZXRMaXN0UGVyc29uYWxSZWdpc3RlcnMiLCB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXMsCiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogcGFyYW0ucGF5bG9hZAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsLCA2LCA5XV0pOwogICAgfSkpKCk7CiAgfSwKCiAgLyoqDQogICAqIEzhuqV5IHRvdGFsIGRhbmggc8OhY2ggxJHEg25nIGvDvSB0aGkgxJF1YQ0KICAgKiBAcGFyYW0geyp9IGNvbnRleHQgDQogICAqIEBwYXJhbSB7Kn0gcGFyYW0gDQogICAqIEByZXR1cm5zIA0KICAgKiBOVEJBTyAwMi4xMS4yMDIxDQogICAqLwogIGxvYWRTdW1tYXJ5TGlzdERldGFpbDogZnVuY3Rpb24gbG9hZFN1bW1hcnlMaXN0RGV0YWlsKGNvbnRleHQsIHBhcmFtKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXMgPSBudWxsOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgidXBkYXRlTG9hZGluZ1N1bW1hcnkiLCB0cnVlKTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5sb2FkTGlzdFJlZ2lzdGVyRGV0YWlsUGFnaW5nKHBhcmFtLnBheWxvYWQgfHwge30pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNjsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgidXBkYXRlTG9hZGluZ1N1bW1hcnkiLCBmYWxzZSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goNik7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICAgICAgaWYgKHBhcmFtLnNjcmVlbktleSA9PSAidGVhbSIpIHsKICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoInNldExpc3RUZWFtUmVnaXN0ZXJzIiwgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVzLAogICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHBhcmFtLnBheWxvYWQKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnNjcmVlbktleSA9PSAicGVyc29uYWwiKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJzZXRMaXN0UGVyc29uYWxSZWdpc3RlcnMiLCB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXMsCiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogcGFyYW0ucGF5bG9hZAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXMpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzEsLCA2LCA5XV0pOwogICAgfSkpKCk7CiAgfQp9KTsKCnZhciBtdXRhdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNydWQubXV0YXRpb25zKSwge30sIHsKICAvKioNCiAgICogU2V0IEl0ZW1zIGNobyBtw6BuIHThuq1wIHRo4buDIMSRxINuZyBrw70NCiAgICogQHBhcmFtIHsqfSBzdGF0ZSANCiAgICogQHBhcmFtIHsqfSBkYXRhIA0KICAgKiBOVEJBTyAwMS4xMS4yMDIxDQogICAqLwogIHNldExpc3RUZWFtUmVnaXN0ZXJzOiBmdW5jdGlvbiBzZXRMaXN0VGVhbVJlZ2lzdGVycyhzdGF0ZSwgZGF0YSkgewogICAgaWYgKGRhdGEucmVzdWx0KSB7CiAgICAgIGZvciAodmFyIGkgaW4gZGF0YS5yZXN1bHQpIHsKICAgICAgICB2YXIgcmVzdWx0VmFsdWUgPSBkYXRhLnJlc3VsdFtpXTsKCiAgICAgICAgc3dpdGNoIChpKSB7CiAgICAgICAgICBjYXNlICJQYWdlRGF0YSI6CiAgICAgICAgICAgIHN0YXRlLmxpc3RUZWFtUmVnaXN0ZXJzLnJlbW92ZUFsbCgpOwogICAgICAgICAgICBzdGF0ZS5saXN0VGVhbVJlZ2lzdGVycy5hcHBlbmQocmVzdWx0VmFsdWUpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJUb3RhbCI6CiAgICAgICAgICAgIHN0YXRlLmxpc3RUZWFtUmVnaXN0ZXJzVG90YWwgPSByZXN1bHRWYWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqDQogICAqIFNldCBJdGVtIGNobyBtw6BuIGPDoSBuaMOibiDEkcSDbmcga8O9DQogICAqIEBwYXJhbSB7Kn0gc3RhdGUgDQogICAqIEBwYXJhbSB7Kn0gZGF0YSANCiAgICogTlRCQU8gMDEuMTEuMjAyMQ0KICAgKi8KICBzZXRMaXN0UGVyc29uYWxSZWdpc3RlcnM6IGZ1bmN0aW9uIHNldExpc3RQZXJzb25hbFJlZ2lzdGVycyhzdGF0ZSwgZGF0YSkgewogICAgaWYgKGRhdGEucmVzdWx0KSB7CiAgICAgIGZvciAodmFyIGkgaW4gZGF0YS5yZXN1bHQpIHsKICAgICAgICB2YXIgcmVzdWx0VmFsdWUgPSBkYXRhLnJlc3VsdFtpXTsKCiAgICAgICAgc3dpdGNoIChpKSB7CiAgICAgICAgICBjYXNlICJQYWdlRGF0YSI6CiAgICAgICAgICAgIHN0YXRlLmxpc3RQZXJzb25hbFJlZ2lzdGVycy5yZW1vdmVBbGwoKTsKICAgICAgICAgICAgc3RhdGUubGlzdFBlcnNvbmFsUmVnaXN0ZXJzLmFwcGVuZChyZXN1bHRWYWx1ZSk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgIlRvdGFsIjoKICAgICAgICAgICAgc3RhdGUubGlzdFBlcnNvbmFsUmVnaXN0ZXJzVG90YWwgPSByZXN1bHRWYWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9KTsKCmV4cG9ydCBkZWZhdWx0IHsKICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICJwcm9kdWN0aW9uIiwKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zLAogIGdldHRlcnM6IGdldHRlcnMKfTs="},null]}
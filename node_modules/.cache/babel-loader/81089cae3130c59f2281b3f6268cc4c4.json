{"remainingRequest":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT Mobile\\vnt_mobile\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\VNT Mobile\\vnt_mobile\\src\\apis\\base\\axiosHttpClient.js","dependencies":[{"path":"D:\\VNT Mobile\\vnt_mobile\\src\\apis\\base\\axiosHttpClient.js","mtime":1666515027531},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT Mobile\\vnt_mobile\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js!D:\\VNT_vue\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\VNT_vue\\src\\views\\base\\BaseListPopup.js","dependencies":[{"path":"D:\\VNT_vue\\src\\views\\base\\BaseListPopup.js","mtime":1656127264075},{"path":"D:\\VNT_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\VNT_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\VNT_vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import _asyncToGenerator from "D:/VNT_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "D:/VNT_vue/node_modules/@babel/runtime/helpers/esm/objectSpread2";
import "core-js/modules/es.array.find.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.string.trim.js";
import "regenerator-runtime/runtime.js";
import BaseList from "@/views/base/BaseList";
import { permission } from "@/mixins/common/permission";
import { mapState, mapActions, mapGetters } from "vuex";
import { ModuleLayoutTemplate, ModuleContext, ModuleOrganization } from "@/stores/module-const"; // import exportApi from "@/apis/exportAPI";

import MSJson from "@/commons/json";
import { shortkeyStatusbar } from "@/mixins/common/shortkeyStatusbar";
import popupUtil from "@/commons/popupUtil";
import commonFn from "@/commons/commonFunction";
export default {
  extends: BaseList,
  name: "BaseListPopup",
  mixins: [permission, shortkeyStatusbar],
  data: function data() {
    return {
      /**
       * Action của từng bản ghi khi active
       */
      rowActions: [],

      /**
       * Tên key mẫu
       */
      layoutTag: null,

      /**
       * Các action khi chọn nhiều
       */
      actionMulti: [],

      /**
       * refname control hiển thị action khi chọn nhiều bản ghi
       */
      actionMutilRef: "actionMulti",

      /**
       * refname control hiển thị action khi chọn nhiều bản ghi ( màn hình to hơn 1200)
       */
      actionMutilRefBigScreen: "actionMultiBigScreen",
      layout: {},
      title: "",

      /**
       * có show tất cả icon filter header grid lên k
       */
      showAllIconFilter: false,

      /**
       * Show filter box
       */
      isShowFilter: false,

      /**
       * Show more action box
       */
      isShowActionGroup: false
    };
  },
  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters(ModuleContext, ["Context"])), mapGetters({
    orgs: ModuleOrganization + "/tree"
  })), {}, {
    /**
     * Đối tượng state của store
     */
    storeState: function storeState() {
      return this.$store.state[this.module];
    },

    /**
     * Không có dữ liệu trong bảng
     * Dùng cờ này để hiển thị mặc hình trống trên danh sách
     */
    empty: function empty() {
      return this.storeState.empty;
    },

    /**
     * Dữ liệu hiển thị
     */
    items: function items() {
      return this.storeState.items;
    },

    /**
     * Tổng số
     */
    total: function total() {
      return this.storeState.total;
    },

    /**
     * Summary của grid
     */
    summary: function summary() {
      return this.storeState.summary;
    },

    /**
     * loading
     */
    loading: function loading() {
      return this.storeState.loading;
    },

    /**
     * loading summary
     */
    loadingSummary: function loadingSummary() {
      return this.storeState.loadingSummary;
    },

    /**
     * Cột theo cấu hình của mẫu
     */
    layoutColumns: function layoutColumns() {
      return this.$store.state[ModuleLayoutTemplate].apply;
    },

    /**
     * Control hiển thị action khi chọn nhiều bản ghi
     */
    actionMultiComponent: function actionMultiComponent() {
      return this.$refs[this.actionMutilRef];
    },

    /**
     * Control hiển thị action khi chọn nhiều bản ghi (màn hình lớn)
     */
    actionMultiBigScreenComponent: function actionMultiBigScreenComponent() {
      return this.$refs[this.actionMutilRefBigScreen];
    }
  }),
  created: function created() {},
  mounted: function mounted() {
    var me = this;
    window._xx = this; //init layout

    me.initLayout(); //init event

    me.initEvent();
  },
  methods: _objectSpread(_objectSpread({}, mapActions({
    loadApplyLayout: ModuleLayoutTemplate + "/loadApply"
  })), {}, {
    /**
     * Lấy cấu hình cột theo mẫu áp dụng
     */
    getLayoutTemplate: function getLayoutTemplate() {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var me, cacheLayoutTemplate;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                me = _this;
                _context.next = 3;
                return me.getCacheLayoutTemplate();

              case 3:
                cacheLayoutTemplate = _context.sent;

                if (!cacheLayoutTemplate) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", cacheLayoutTemplate);

              case 6:
                return _context.abrupt("return", _this.layoutColumns[_this.layoutTag]);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },

    /**
     * Xử lý cấu hình mẫu của form
     */
    initLayout: function initLayout() {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var me, layout, columns;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                me = _this2;

                if (!me.layoutTag) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 4;
                return me.getLayoutTemplate();

              case 4:
                layout = _context2.sent;

                if (!(!layout || process.env.NODE_ENV === "development")) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 8;
                return me.loadApplyLayout(me.layoutTag);

              case 8:
                layout = _context2.sent;

              case 9:
                me.layout = me.convertToLayoutTemplete(layout);
                columns = me.getLayoutColumn(layout);
                me.grid.initColumns(columns);

              case 12:
                //load dữ liệu lần đầu
                me.$nextTick(function () {
                  me.reload();
                });

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    convertToLayoutTemplete: function convertToLayoutTemplete(layout) {
      var layoutTemplete = {};

      if (layout) {
        layoutTemplete.LayoutTemplateID = layout.LayoutTemplateID;
        layoutTemplete.LayoutTag = layout.LayoutTag;
        layoutTemplete.UserID = layout.UserID || this.Context.UserID;
        layoutTemplete.IsSystem = layout.IsSystem;
        layoutTemplete.LayoutConfig = layout.Columns;
        layoutTemplete.LayoutTemplateName = layout.LayoutTemplateName;
      }

      return Object.assign({}, layoutTemplete);
    },

    /**
     * Lấy thông tin column render từ thông tin của mẫu
     */
    getLayoutColumn: function getLayoutColumn(layout) {
      if (layout != undefined) {
        var me = this;
        var columns = JSON.parse(layout.Columns); //nếu là mẫu mặc định và ngôn ngữ khác tiếng việt -> cập nhật caption/title theo ngôn ngữ

        if (layout.IsSystem) {
          me.localizationColumn(columns);
        } //nnlam: orderby lại theo sort_order và lock.


        columns = _(columns).chain().sortBy("sort_order").sortBy(function (column) {
          return !column.lock;
        }).value();
        return columns;
      }
    },

    /**
     * Gọi request load dữ liệu
     * Gọi vào crud-base
     */
    requestLoadData: function requestLoadData(payload) {
      var me = this;

      if (me.grid && me.grid.isGridTree) {
        me.$store.dispatch("".concat(me.module, "/loadListTree"), payload);
      } else {
        me.$store.dispatch("".concat(me.module, "/load"), payload).then(function (res) {
          /**
           * delay để đợi grid select dòng đầu
           * NMTUAN2 04.12.2021
           */
          if (me.isSearching) {
            me.isSearching = false;
            setTimeout(function () {
              if (me.searchBox && me.searchBox.$refs.input) {
                me.searchBox.$refs.input.focus();
              }
            }, 200);
          }
        });
      }
    },

    /**
     * Gọi request load summary
     */
    requestLoadDataSummary: function requestLoadDataSummary(payload) {
      var me = this;

      if (me.grid && !me.grid.isGridTree) {
        me.$store.dispatch("".concat(me.module, "/loadSummary"), payload);
      }
    },

    /**
     * dbclick bản ghi trên grid
     */
    gridRowDbClick: function gridRowDbClick(record, e) {
      this.edit(record);
    },

    /**
     * sự kiện ấn vào các action trên form
     */
    buttonClick: function buttonClick(command, e) {},

    /**
     * Thêm
     */
    add: function add() {
      var me = this;

      if (!me.checkActionPermissionAlert(me.$t("i18nPermission.SubSystemCode.Code.ADD"))) {
        return;
      }

      var param = me.getDetailParameter(me.formDetailName, this.$ms.enum.FormState.Add);
      me.showDetail(me.formDetailName, this.$ms.enum.FormState.Add, param);
    },

    /**
     * Sử dụng cho sự kiện dblick vào dòng trên grid để show form tương ứng
     * */
    edit: function edit(record) {
      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "EDIT";
      var me = this;

      if (!me.checkActionPermissionAlert(action)) {
        return;
      }

      var param = me.getDetailParameter(me.formDetailName, this.$ms.enum.FormState.Edit, record);
      me.showDetail(me.formDetailName, this.$ms.enum.FormState.Edit, param, {
        submit: function submit(saveResult, saveParam) {
          if (saveResult.Success) {
            me.afterSaveEdit(record, saveResult, saveParam);
          }
        }
      });
    },

    /**
     * pvduy 27/02/2021: thêm dữ liệu cho mode view
     * */
    view: function view(record) {
      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "WATCH";
      var me = this;

      if (!me.checkActionPermissionAlert(action)) {
        return;
      }

      var param = me.getDetailParameter(me.formDetailName, this.$ms.enum.FormState.View, record);
      me.showDetail(me.formDetailName, this.$ms.enum.FormState.View, param, {
        submit: function submit(saveResult, saveParam) {
          if (saveResult.Success) {
            me.afterSaveView(record, saveResult, saveParam);
          }
        }
      });
    },

    /**
     * Nhân bản bản ghi
     * */
    duplicate: function duplicate(record) {
      var me = this;

      if (!me.checkActionPermissionAlert(me.$t("i18nPermission.SubSystemCode.Code.ADD"))) {
        return;
      }

      var param = me.getDetailParameter(me.formDetailName, this.$ms.enum.FormState.Duplicate, record);
      me.showDetail(me.formDetailName, this.$ms.enum.FormState.Duplicate, param);
    },
    refreshClick: function refreshClick() {
      this.refresh();
    },

    /**
     * drilldown khi click vào grid
     * */
    drilldownClick: function drilldownClick(metaData) {
      var me = this;

      if (metaData.dataRow) {
        me.edit(metaData.dataRow);
      } else {
        me.$toast.error(me.$t("i18nBaseForm.Message.Error"));
      }
    },

    /**
     * @author TVLOI 20.05.2021
     * drilldown vào chi tiết khi ấn vào các cột có dạng đại diện cho số nhiều(Nhiều dòng chi tiết)
     * */
    viewMoreDetails: function viewMoreDetails(metaData) {
      var me = this;

      if (metaData.dataRow) {
        me.view(metaData.dataRow);
      } else {
        me.$toast.error(me.$t("i18nBaseForm.Message.Error"));
      }
    },

    /**
     * Xóa
     */
    delete: function _delete(record, sub) {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var me, configMessage, answer, temp, dropedColumns, _loop, i, auditingLog, param, result;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                me = _this3;

                if (me.checkActionPermissionAlert(sub !== null && sub !== void 0 ? sub : me.$t("i18nPermission.SubSystemCode.Code.DELETE"))) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return");

              case 3:
                if (me.validateBeforeDelete(record, sub)) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt("return");

              case 5:
                _context3.next = 7;
                return me.getDeleteConfirmMessage(record);

              case 7:
                configMessage = _context3.sent;
                _context3.next = 10;
                return me.$ms.msgBox.showQuestion(configMessage);

              case 10:
                answer = _context3.sent;

                if (!(answer == "Yes")) {
                  _context3.next = 25;
                  break;
                }

                temp = {}; //Bỏ bớt các thông tin gửi lên sv.

                dropedColumns = me.getIgnoredColumns();

                _loop = function _loop(i) {
                  var isDropedColumn = dropedColumns.find(function (_) {
                    return _ == i;
                  });

                  if (!isDropedColumn) {
                    temp[i] = record[i];
                  }
                };

                for (i in record) {
                  _loop(i);
                }

                auditingLog = {
                  description: MSJson.serialize(me.generateDescriptionAuditingLog(record)),
                  reference: me.buildReference(record),
                  action: me.actionAuditingLog,
                  entity: me.getEntityType() || me.module,
                  time: new Date()
                };
                param = {
                  Entity: [temp],
                  ByPassValidate: null,
                  AuditingLog: MSJson.serialize(auditingLog),
                  Type: me.$ms.enum.DeleteType.Single
                };
                param = me.customDeleteParam(record, param);
                me.$ms.commonFn.mask();
                _context3.next = 22;
                return me.requestDeleteData(record, param);

              case 22:
                result = _context3.sent;
                me.$ms.commonFn.unmask();
                me.afterDelete(record, result); //Log firebase
                // me.logDataFireBase();

              case 25:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },

    /**
     * Lấy thông tin log firebase
     * NTTHANH1
     */
    // logDataFireBase() {
    //   const me = this;
    //   try {
    //     let menuNameCurrent = null;
    //     let parent = me.$parent;
    //     if (me.$router || me.$$router) {
    //       menuNameCurrent = me.$route ? me.$route.name : me.$$route.name;
    //     }
    //     else {
    //       if (parent && (parent.$router || parent.$$router)) {
    //         menuNameCurrent = parent.$router ? parent.$route.name : parent.$$route.name;
    //       }
    //     }
    //     if (menuNameCurrent) {
    //       commonFn.logDataFireBaseUpdate(menuNameCurrent, me.context);
    //     }
    //   }
    //   catch (ex) {
    //     console.log(ex);
    //   }
    // },

    /**
     * Gọi request xóa
     * @returns
     */
    requestDeleteData: function requestDeleteData(record, param) {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var me;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                me = _this4;
                _context4.next = 3;
                return me.$store.dispatch("".concat(_this4.module, "/delete"), param);

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },

    /**
     * overrideable để check một vài case validate được ngay trên client
     * @returns
     * TDNGHIA 27/10/2021
     */
    validateBeforeDelete: function validateBeforeDelete(records) {
      return true;
    },

    /**
     * @overridable Trả về những trường không muốn gửi lên serve để xóa
     * @author TVLoi 19.06.2021
     */
    getIgnoredColumns: function getIgnoredColumns() {
      var me = this; //default 1 số cột mặc định không gửi lên.

      var columnsIgnored = ["parentNode", "isHide", "isSelected", "level", "__vKeyValue", "_isSelectedMultiple", "expanded"];
      var customIgnoredColumns = me.getCustomIgnoredColumnsBeforeDelete();

      if (Array.isArray(customIgnoredColumns) && customIgnoredColumns.length > 0) {
        customIgnoredColumns.forEach(function (item) {
          columnsIgnored.push(item);
        });
      }

      return columnsIgnored;
    },
    //CustomColumns ko gửi lên
    getCustomIgnoredColumnsBeforeDelete: function getCustomIgnoredColumnsBeforeDelete() {
      var me = this;
      return [];
    },

    /**
     * tham chiếu nhật ký (lưu dạng json : {key: key, code: code, name: name})
     * key: khóa chính của bảng module, dùng để drildown khi click vào
     * code, name: mã, tên để hiểu thị ở cột tham chiếu khi xem log: ví dụ: Quạt điện (QD00001)
     */
    buildReference: function buildReference(records) {
      var me = this;
      var field = this.$store.state[me.module]._config.field;

      if (field) {
        if (Array.isArray(records)) {
          var reference = [];
          records.forEach(function (record) {
            reference.push({
              key: record[field.key],
              code: record[field.code],
              name: record[field.name]
            });
          });
          return MSJson.serialize(reference);
        } else {
          return MSJson.serialize({
            key: records[field.key],
            code: records[field.code],
            name: records[field.name]
          });
        }
      } else {
        return null;
      }
    },

    /**
     * Sinh mô tả của nhật ký
     * CreatedBy: nnlam 24/03/2021
     */
    generateDescriptionAuditingLog: function generateDescriptionAuditingLog(records) {
      var me = this;
      var listDescription = {
        master: []
      };
      var field = this.$store.state[me.module]._config.field;

      if (Array.isArray(records)) {
        records.forEach(function (record) {
          var objDescription = {};
          objDescription[field.code] = record[field.code]; //{newValue:me.currentItem[field.code], switchCaption: me.switchCaption.master[field.code]};

          objDescription[field.name] = record[field.name]; //{newValue:me.currentItem[field.name], switchCaption: me.switchCaption.master[field.name]};

          if (field.quantity) {
            objDescription[field.quantity] = record[field.quantity]; //{newValue:me.currentItem[field.quantity] || 1, switchCaption: me.switchCaption.master[field.quantity]};
          }

          listDescription.master.push(objDescription);
        });
      } else {
        var objDescription = {};
        objDescription[field.code] = records[field.code]; //{newValue:me.currentItem[field.code], switchCaption: me.switchCaption.master[field.code]};

        objDescription[field.name] = records[field.name]; //{newValue:me.currentItem[field.name], switchCaption: me.switchCaption.master[field.name]};

        if (field.quantity) {
          objDescription[field.quantity] = records[field.quantity]; //{newValue:me.currentItem[field.quantity] || 1, switchCaption: me.switchCaption.master[field.quantity]};
        }

        listDescription.master.push(objDescription);
      }

      return listDescription;
    },

    /**
     * Lấy câu thông báo khi xóa
     */
    getDeleteConfirmMessage: function getDeleteConfirmMessage(records) {
      var _this5 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var me, moduleName, targetName, mes, deleteMultiMsg, record, deleteMsg;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                me = _this5;
                moduleName = me.getModuleName() || "";
                targetName = "";
                mes = "";

                if (records.length > 1) {
                  deleteMultiMsg = me.getDeleteMultiMsg();
                  mes = deleteMultiMsg.format(records.length > 9 ? records.length : "0" + records.length, moduleName);
                } else {
                  record = records;

                  if (Array.isArray(records)) {
                    record = records[0];
                  }

                  if (record) {
                    targetName = me.getDeleteSingleMesContent(record);
                  }

                  deleteMsg = me.getDeleteMsg(records);
                  mes = deleteMsg.format(me.$ms.commonFn.encodeHTML(targetName));
                }

                return _context5.abrupt("return", {
                  title: me.$t("i18nBaseForm.Message.ConfirmDeleteTitle").format(moduleName),
                  message: mes
                });

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },

    /**
     * Custom câu nội dung xóa nhiều
     * NTBAO: 25.11.2021
     * @returns
     */
    getDeleteMultiMsg: function getDeleteMultiMsg() {
      var me = this;
      return me.$t("i18nBaseForm.Message.ConfirmDeleteMutiTitleCegov");
    },

    /**
     * Custom câu nội dung xóa đơn
     * NTBAO: 25.11.2021
     * @returns
     */
    getDeleteMsg: function getDeleteMsg(records) {
      var me = this;
      return me.$t("i18nBaseForm.Message.ConfirmDeleteShort");
    },

    /**
     * Lấy nội dung xóa
     */
    getDeleteSingleMesContent: function getDeleteSingleMesContent(record) {
      var me = this;
      return record[me.$store.state[me.module]._config.field.name] || record[me.$store.state[me.module]._config.field.code];
    },

    /**
     * Lấy tên đối tượng của form
     */
    getModuleName: function getModuleName() {
      var me = this;
      return me.$t("i18nCommon.module." + me.module.toLowerCase());
    },

    /**
     * Xử lý sau khi xóa
     */
    afterDelete: function afterDelete(record, result) {
      var _this6 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var me, deleteRecord, _me$getFields, CODE, moduleName, field, listArisend, configMessage, answer, isAriseMulti, name, obj, inactiveArise, deleteNoArise, recordsInactive, recordsDelete, keyField;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                me = _this6;

                if (!result.Success) {
                  _context6.next = 9;
                  break;
                }

                // clone lại giá trị xóa dùng cho việc custom
                // NTBAO: 07.11.2021
                deleteRecord = _.clone(record);
                me.$toast.success(me.$t("i18nBaseForm.Message.DeleteSuccess"));
                /**
                 * nếu xoá bản ghi được tích thì đang không tự cập nhật ở selected
                 * nên phải thực hiện xoá khỏi selected (chỉ tự động khi xoá trên dòng của gridEditor)
                 * bật change vào các bản ghi còn được tích
                 * NMTUAN2 28.11.2021
                 */

                me.selected.remove(record);
                me.selectionChange(me.selected);
                /**
                 * Hàm custom xử lý thêm
                 * NTBAO 02.11.2021
                 */

                me.customAfterDelete(deleteRecord, result);
                _context6.next = 61;
                break;

              case 9:
                /**
                 * Sửa lỗi khi xóa nhiều bản ghi
                 * ModifiyBy: NTAnh (09/03/2021)
                 * ModifiyBy: NTTHANH1 (20/11/2021)
                 */
                CODE = me.$ms.enum.ServiceResponseCode;
                moduleName = me.getModuleName(), field = (_me$getFields = me.getFields()) !== null && _me$getFields !== void 0 ? _me$getFields : _this6.$store.state[me.module]._config.field, listArisend = []; //Biến đánh dấu nhiều bản ghi phát sinh
                // Nhiều bản đã có phát sinh

                if (result.Data && result.Data.length > 1) {
                  isAriseMulti = true;

                  if (field) {
                    result.Data.forEach(function (element) {
                      // lấy unique hoặc name
                      var name = field.unique || field.name;
                      listArisend.push(element.Entity[name]);
                    });
                  }
                } // 1 bản ghi có phát sinh:
                else {
                  isAriseMulti = false;
                  name = field.unique || field.name;
                  obj = result.Data[0];
                  listArisend.push(obj.Entity[name]);
                }

                _context6.t0 = result.Code;
                _context6.next = _context6.t0 === CODE.DeleteMultiArisened ? 15 : _context6.t0 === CODE.Arisened ? 37 : _context6.t0 === CODE.PartInvalidData ? 47 : 55;
                break;

              case 15:
                if (!field.isInactiveAndDelete) {
                  _context6.next = 35;
                  break;
                }

                //Chỉ thông báo ngừng sử dụng và xóa với các màn danh mục
                configMessage = me.getAriseConfirmMesage(moduleName, listArisend, CODE.DeleteMultiArisened);
                _context6.next = 19;
                return me.$ms.msgBox.showQuestion(configMessage);

              case 19:
                answer = _context6.sent;

                if (!(answer == "Yes")) {
                  _context6.next = 33;
                  break;
                }

                // kết quả xóa
                //Ngừng sử dụng bản ghi phát sinh
                recordsInactive = []; //mảng bản ghi cần ngừng sử dụng

                result.Data.forEach(function (element) {
                  recordsInactive.push(element.Entity);
                });
                _context6.next = 25;
                return me.setInactiveArise(recordsInactive);

              case 25:
                inactiveArise = _context6.sent;
                //Xóa bản ghi không phát sinh
                recordsDelete = []; //mảng bản ghi cần xóa

                if (!(record.length > recordsInactive.length)) {
                  _context6.next = 32;
                  break;
                }

                //Nếu có bản ghi không phát sinh thì ms xóa
                record.filter(function (itemRecord) {
                  var recordDuplicate = false;
                  recordsInactive.filter(function (itemRecordsInactive) {
                    if (itemRecordsInactive[field.key] == itemRecord[field.key]) {
                      recordDuplicate = true;
                    }
                  });

                  if (!recordDuplicate) {
                    recordsDelete.push(itemRecord);
                  }
                });
                _context6.next = 31;
                return me.deleteMutiRowsNoConfirm(recordsDelete);

              case 31:
                deleteNoArise = _context6.sent;

              case 32:
                //Show toast thông báo
                if (recordsDelete.length > 0) {
                  //Ngừng sử dụng và xóa
                  if (inactiveArise.Success && deleteNoArise.Success) {
                    me.$toast.success(me.$t("i18nBaseForm.SaveSuccessMessage"));
                  } else {
                    me.$toast.error(me.$t("i18nBaseForm.SaveErrorMessage"));
                  }
                } else {
                  //Chỉ ngừng sử dụng
                  if (inactiveArise.Success) {
                    me.$toast.success(me.$t("i18nBaseForm.SaveSuccessMessage"));
                  } else {
                    me.$toast.error(me.$t("i18nBaseForm.SaveErrorMessage"));
                  }
                }

              case 33:
                _context6.next = 36;
                break;

              case 35:
                me.$ms.msgBox.showWarning(me.$t("i18nBaseForm.Validate.CanNotDeleteArise"));

              case 36:
                return _context6.abrupt("break", 58);

              case 37:
                if (!field.isInactiveAndDelete) {
                  _context6.next = 45;
                  break;
                }

                //Chỉ thông báo ngừng sử dụng và xóa với các màn danh mục
                configMessage = me.getAriseConfirmMesage(moduleName, listArisend, CODE.Arisened);
                _context6.next = 41;
                return me.$ms.msgBox.showQuestion(configMessage);

              case 41:
                answer = _context6.sent;

                if (answer == "Yes") {
                  //Ngừng sử dụng bản ghi phát sinh
                  me.setActiveMutiRows(result.Data[0].Entity, "inactive");
                }

                _context6.next = 46;
                break;

              case 45:
                me.$ms.msgBox.showWarning(me.$t("i18nBaseForm.Validate.CanNotDeleteArise"));

              case 46:
                return _context6.abrupt("break", 58);

              case 47:
                if (!isAriseMulti) {
                  _context6.next = 52;
                  break;
                }

                me.$ms.msgBox.showWarning(me.$t("i18nBaseForm.Validate.ErrorDeleteMulti"));
                return _context6.abrupt("break", 58);

              case 52:
                //me.$toast.error(me.$t("i18nBaseForm.Validate.NewMessageDelete").format(moduleName, codes));
                me.$ms.msgBox.showWarning(me.$t("i18nBaseForm.Validate.ErrorDeleteMulti"));

                if (result.Data) {
                  keyField = me.$store.state[me.module]._config.field.key;
                  record.forEach(function (i) {
                    result.Data.forEach(function (item) {
                      if (i[keyField] != item.Entity[keyField] && i[keyField]) {
                        me.grid.datax.remove(i);
                      }
                    });
                  });
                } // record = [];
                //me.selectionChange(record);
                // me.selected = [];
                //me.reload();


                return _context6.abrupt("break", 58);

              case 55:
                if (!isAriseMulti) {
                  _context6.next = 58;
                  break;
                }

                me.$ms.msgBox.showWarning(me.$t("i18nBaseForm.Validate.ErrorDeleteMulti"));
                return _context6.abrupt("break", 58);

              case 58:
                record = [];
                me.selected = [];
                me.reload();

              case 61:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    },

    /**
     * Câu thông báo khi có phát sinh dữ liệu
     * NTTHANH1
     */
    getAriseConfirmMesage: function getAriseConfirmMesage(moduleName, listArisend, code) {
      var me = this;
      var CODE = me.$ms.enum.ServiceResponseCode;
      var titleName = me.$t("i18nBaseForm.Message.ConfirmDeleteTitle").format(moduleName),
          mes,
          mesListArise; //Build câu thông báo

      mesListArise = listArisend.length > 2 ? "<b>".concat(listArisend[0], "</b>, <b>").concat(listArisend[1], "</b> v\xE0 <b>").concat(listArisend.length - 2, "</b> ").concat(moduleName, " kh\xE1c") : "<b>".concat(listArisend.join("</b>, <b>"), "</b>");
      mes = me.getAriseMessage(code, listArisend, mesListArise, moduleName); //Config các button

      var btnConfig = [{
        key: "No",
        target: "Right",
        text: "Hủy",
        typeButton: "secondary"
      }, {
        key: "Yes",
        target: "Right",
        text: "Đồng ý",
        focus: true,
        typeButton: "blue"
      }];
      return {
        title: titleName,
        message: mes,
        btnConfig: btnConfig
      };
    },

    /**
     * Lấy câu thông báo khi phát sinh
     * Viết riêng ra để override lại vì một số màn có câu thông báo là Ngừng theo dõi thay vì Ngừng sử dụng
     * @param {*} code
     * NTDIEM 15.12.2021
     */
    getAriseMessage: function getAriseMessage(code, listArisend, mesListArise, moduleName) {
      var me = this;
      var mes = "";
      var CODE = me.$ms.enum.ServiceResponseCode;

      switch (code) {
        case CODE.DeleteMultiArisened:
          mes = me.$t("i18nBaseForm.Validate.DeleteMultiHasMultiArisened").format(moduleName, mesListArise);
          break;
        // xóa 1 bản ghi và bản ghi đó bị có phát sinh:

        case CODE.Arisened:
          mes = me.$t("i18nBaseForm.Validate.DeleteArise").format(moduleName, listArisend[0]);
          break;
      }

      return mes;
    },

    /**
     * Ngừng sử dụng bản ghi phát sinh dữ liệu
     * NTTHANH1
     */
    setInactiveArise: function setInactiveArise(records) {
      var _this7 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var me, inactive, field, listID, param;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                me = _this7;
                inactive = 1;

                if (!Array.isArray(records)) {
                  records = [records];
                } //show mask
                // me.loading = true;


                field = me.$store.state[me.module]._config.field;
                listID = records.map(function (item) {
                  return item[field.key];
                }).join(",");
                param = {
                  TableName: field.table,
                  KeyField: field.key,
                  Value: inactive,
                  ListID: listID,
                  OrganizationID: me.getOrganizationFilter()
                };
                _context7.next = 8;
                return me.$store.dispatch("".concat(_this7.module, "/updateStatus"), param);

              case 8:
                return _context7.abrupt("return", _context7.sent);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    },

    /**
     * Xóa nhiều bản ghi không cần poup thông báo
     * NTTHANH1
     */
    deleteMutiRowsNoConfirm: function deleteMutiRowsNoConfirm(records) {
      var _this8 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var me, temps, auditingLog, param;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                me = _this8;
                temps = [];
                records.forEach(function (record) {
                  var temp = {}; //Bỏ bớt các thông tin gửi lên sv.

                  var dropedColumns = me.getIgnoredColumns();

                  var _loop2 = function _loop2(i) {
                    var isDropedColumn = dropedColumns.find(function (_) {
                      return _ == i;
                    });

                    if (!isDropedColumn) {
                      temp[i] = record[i];
                    }
                  };

                  for (var i in record) {
                    _loop2(i);
                  }

                  temps.push(temp);
                });
                auditingLog = {
                  description: MSJson.serialize(me.generateDescriptionAuditingLog(records)),
                  reference: me.buildReference(records),
                  action: me.actionAuditingLog,
                  entity: me.module,
                  time: new Date()
                };
                param = {
                  Entity: temps,
                  ByPassValidate: null,
                  AuditingLog: MSJson.serialize(auditingLog),
                  Type: me.$ms.enum.DeleteType.Multi
                };
                _context8.next = 7;
                return me.$store.dispatch("".concat(_this8.module, "/delete"), param);

              case 7:
                return _context8.abrupt("return", _context8.sent);

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    },

    /**
     * Hàm custom dùng cho xử lý thêm sau khi xóa
     * NTBAO 02.11.2021
     */
    customAfterDelete: function customAfterDelete(deleteRecord, result) {},
    getFields: function getFields() {
      return null;
    },

    /**
     * Lấy tham số khi mở form chi tiết
     * */
    getDetailParameter: function getDetailParameter(formName, mode, defaultData) {
      var me = this;
      var param = {
        data: defaultData || null
      };

      switch (mode) {
        case me.$ms.enum.FormState.Duplicate:
        case me.$ms.enum.FormState.Edit:
        case me.$ms.enum.FormState.View:
          var keyField = me.$store.state[me.module]._config.field.key;

          if (keyField) {
            param.id = defaultData[keyField];
          }

          break;
      }

      param.mode = mode;
      me.customDetailParam(param);
      return param;
    },
    customDetailParam: function customDetailParam(param) {},

    /**
     * hover bản ghi -> hiển thị menu
     */
    gridRowHover: function gridRowHover() {},

    /**
     * click bản ghi -> hiển thị menu
     */
    gridRowOver: function gridRowOver(record, e) {
      var me = this;
      me.rowActions = me.getRecordActions(record);
    },

    /**
     * lấy danh sách action của bản ghi
     */
    getRecordActions: function getRecordActions(record) {
      return [{
        command: "Edit",
        icon: "edit",
        text: this.$t("i18nCommon.command.edit")
      }, {
        command: "Delete",
        icon: "delete",
        text: this.$t("i18nCommon.command.delete")
      }];
    },

    /**
     * click action row
     */
    gridRowActionClick: function gridRowActionClick(command, record, event) {
      var me = this;

      switch (command) {
        case "Edit":
          me.edit(record);
          break;

        case "Delete":
          me.delete(record);
          break;

        case "Duplicate":
          me.duplicate(record);
          break;

        case "View":
          me.view(record);
          break;

        case "active":
        case "inactive":
          me.setActiveMutiRows(record, command);
          break;

        default:
          me.$ms.msgBox.showInfo(me.$t("i18nCommon.FeaturesIsDeveloping"));
          break;
      }
    },

    /**
     * Thay đổi bản ghi chọn
     */
    selectionChange: function selectionChange(records) {
      var me = this;
      var actions = [];

      if (records.length >= 1) {
        actions = me.getActionMulti(records, me.selectAllPage);
      }

      me.actionMulti = actions;
    },

    /**
     * Lấy danh sách action xử lý khi nhiều bản ghi được chọn
     * TDNGHIA 10/10/2021
     * mặc định chỉ cần xóa nhiều thôi, màn nào thêm tính năng thì phải override lại
     */
    getActionMulti: function getActionMulti(records, selectAllPage) {
      return [{
        command: "active",
        text: "Theo dõi",
        cls: "secondary-outline"
      }, {
        command: "inactive",
        text: "Ngừng theo dõi",
        cls: "primary-outline"
      }, {
        command: "delete",
        text: "Xóa",
        cls: "secondary-outline-red"
      }];
    },

    /**
     * Click vào action chọn nhiều bản ghi
     */
    multiSelectActionClick: function multiSelectActionClick(command, records, selectAllPage, event) {
      var me = this;

      switch (command) {
        case "delete":
          me.deleteMutiRows(records);
          break;

        case "active":
        case "inactive":
          me.setActiveMutiRows(records, command);
          break;
      }
    },

    /*
     *  Hàm xóa nhiều bản ghi.
     * @modified by TVLoi 21.06.2021. lược bỏ 1 số thông tin trước khi gửi bản ghi lên serve
     */
    deleteMutiRows: function deleteMutiRows(records) {
      var _this9 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var me, configMessage, answer, temps, auditingLog, param, result;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                me = _this9;

                if (me.checkActionPermissionAlert(me.$t("i18nPermission.SubSystemCode.Code.DELETE"))) {
                  _context9.next = 3;
                  break;
                }

                return _context9.abrupt("return");

              case 3:
                if (me.validateBeforeDelete(records)) {
                  _context9.next = 5;
                  break;
                }

                return _context9.abrupt("return");

              case 5:
                _context9.next = 7;
                return me.getDeleteConfirmMessage(records);

              case 7:
                configMessage = _context9.sent;
                _context9.next = 10;
                return me.$ms.msgBox.showQuestion(configMessage);

              case 10:
                answer = _context9.sent;

                if (!(answer == "Yes")) {
                  _context9.next = 23;
                  break;
                }

                temps = [];
                records.forEach(function (record) {
                  var temp = {}; //Bỏ bớt các thông tin gửi lên sv.

                  var dropedColumns = me.getIgnoredColumns();

                  var _loop3 = function _loop3(i) {
                    var isDropedColumn = dropedColumns.find(function (_) {
                      return _ == i;
                    });

                    if (!isDropedColumn) {
                      temp[i] = record[i];
                    }
                  };

                  for (var i in record) {
                    _loop3(i);
                  }

                  temps.push(temp);
                });
                auditingLog = {
                  description: MSJson.serialize(me.generateDescriptionAuditingLog(records)),
                  reference: me.buildReference(records),
                  action: me.actionAuditingLog,
                  entity: me.module,
                  time: new Date()
                };
                param = {
                  Entity: temps,
                  ByPassValidate: null,
                  AuditingLog: MSJson.serialize(auditingLog),
                  Type: me.$ms.enum.DeleteType.Multi
                }; // Custom lại param xóa

                param = me.customDeleteParam(records, param);
                me.$ms.commonFn.mask();
                _context9.next = 20;
                return me.requestDeleteData(records, param);

              case 20:
                result = _context9.sent;
                me.$ms.commonFn.unmask();
                me.afterDelete(records, result); //log firebase
                // me.logDataFireBase()

              case 23:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }))();
    },

    /**
     * Hàm custom delete param
     * NTBAO: 07.12.2021
     * @param {*} param
     * @returns
     */
    customDeleteParam: function customDeleteParam(record, param) {
      var me = this;
      return param;
    },

    /**
     * Click vào action chọn nhiều bản ghi: Chọn tất cả
     */
    multiSelectAllClick: function multiSelectAllClick() {
      this.selectAllPage = !this.selectAllPage;

      if (!this.selectAllPage) {
        this.selected = [];
        this.grid.checkall = false;
      } else {
        this.grid.checkall = true;
        this.grid.$emit("input", this.grid.datax);
      }
    },

    /**
     * Bỏ tích chọn các bản ghi
     */
    multiSelectUncheck: function multiSelectUncheck() {
      var me = this;
      me.selected = []; // NMTUAN2 28.11.2021: bỏ tích chọn trên gridEditor

      if (Array.isArray(me.grid.listRowSelected)) {
        me.grid.listRowSelected = [];
      }
    },

    /**
     * Khai báo sự kiện của form
     */
    initEvent: function initEvent() {
      var me = this,
          grid = me.grid,
          actionMulti = me.actionMultiComponent,
          actionMultiBigScrenn = me.actionMultiBigScreenComponent;

      if (grid) {
        grid.$on("loadData", me.loadData);
        grid.$on("dblclick", me.gridRowDbClick);
        grid.$on("rowmouseover", me.gridRowOver);
        grid.$on("rowactionclick", me.gridRowActionClick);
        grid.$on("input", me.selectionChange);
        grid.$on("changepagesize", me.gridChangePageSize);

        if (!grid.isGridTree) {
          grid.$on("filter", me.reload);
        }

        grid.$on("resizeCol", me.gridResizeCol);
      }

      if (actionMulti) {
        actionMulti.$on("actionclick", me.multiSelectActionClick);
        actionMulti.$on("selectall", me.multiSelectAllClick);
        actionMulti.$on("uncheck", me.multiSelectUncheck);
      }

      if (actionMultiBigScrenn) {
        actionMultiBigScrenn.$on("actionclick", me.multiSelectActionClick);
        actionMultiBigScrenn.$on("selectall", me.multiSelectAllClick);
        actionMultiBigScrenn.$on("uncheck", me.multiSelectUncheck);
      }
    },

    /**
     * remove event add động
     */
    removeEvent: function removeEvent() {
      var me = this,
          grid = me.grid,
          actionMulti = me.actionMultiComponent,
          actionMultiBigScrenn = me.actionMultiBigScreenComponent;

      if (grid) {
        grid.$off("loadData", me.loadData);
        grid.$off("dblclick", me.gridRowDbClick);
        grid.$off("rowmouseover", me.gridRowClick);
        grid.$off("rowactionclick", me.gridRowActionClick);
        grid.$off("input", me.selectionChange);
        grid.$off("changepagesize", me.gridChangePageSize);

        if (!grid.isGridTree) {
          grid.$off("filter", me.reload);
        }

        grid.$off("resizeCol", me.gridResizeCol);
      }

      if (actionMulti) {
        actionMulti.$off("actionclick", me.multiSelectActionClick);
        actionMulti.$off("selectall", me.multiSelectAllClick);
        actionMulti.$off("uncheck", me.multiSelectUncheck);
      }

      if (actionMultiBigScrenn) {
        actionMultiBigScrenn.$off("actionclick", me.multiSelectActionClick);
        actionMultiBigScrenn.$off("selectall", me.multiSelectAllClick);
        actionMultiBigScrenn.$off("uncheck", me.multiSelectUncheck);
      }
    },

    /**
     * Xuất khẩu excel
     */
    exportExcel: function exportExcel() {
      var _this10 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var me, param;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                me = _this10;

                if (_this10.checkActionPermissionAlert(me.$t("i18nPermission.SubSystemCode.Code.EXPORT"))) {
                  _context10.next = 3;
                  break;
                }

                return _context10.abrupt("return");

              case 3:
                _context10.next = 5;
                return _this10.getExportExcelParam();

              case 5:
                param = _context10.sent;
                _context10.next = 8;
                return _this10.customParamBeforeExport(param);

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }))();
    },

    /**
     * Lấy tham số xuất khẩu
     */
    getExportExcelParam: function getExportExcelParam() {
      var _this11 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var param, controller;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                param = _this11.getGridExportParameter(_this11.grid);
                param.FileType = "xlsx";
                _context11.next = 4;
                return _this11.$store.dispatch("".concat(_this11.module, "/getController"));

              case 4:
                controller = _context11.sent;
                param.GetDataUrl = [controller, "list"].join("/");
                param.GetDataMethod = "POST";
                param.ReportTitle = _this11.getTitleExport();
                param.FileName = _this11.getFileName();
                return _context11.abrupt("return", param);

              case 10:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }))();
    },

    /**
     * lấy tiêu đề file excel
     * @returns tiêu đề danh sách
     */
    getTitleExport: function getTitleExport() {
      var title = "";
      var el = this.$el.querySelector(".list-title");

      if (el && typeof el.innerHTML === "string") {
        title = el.innerHTML.trim();
      } else {
        title = this.title ? this.title.trim() : "";
      }

      return title;
    },

    /**
     * Lấy tên file khi xuất khẩu
     * @returns tên file : nếu để trống thì mặc định lấy tiêu đề
     */
    getFileName: function getFileName() {
      return null;
    },

    /**
     * Hàm mở popup sửa mẫu
     */
    openPrototype: function openPrototype() {
      this.showDetail("MsConfigListLayout", this.$ms.enum.FormState.Add, {
        layout: this.layout,
        parent: this
      });
    },

    /**
     * @author vvkiet - 18.03.2021
     * Hàm custom lại param trước khi xuất excel
     */
    customParamBeforeExport: function customParamBeforeExport(param) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }))();
    },

    /**
     * @author vvkiet - 14.04.2021
     * Hàm xử lý extData
     */
    decodeExtData: function decodeExtData(data) {
      var me = this; // Xử lý dữ liệu mở rộng

      var originFields = [];

      if (data.hasOwnProperty("ExtData")) {
        // Danh sách các trường dữ liệu gốc của dữ liệu
        for (var i in data) {
          originFields.push(i);
        } // Map dữ liệu mở rộng


        if (data.ExtData && typeof data.ExtData === "string") {
          var extData = JSON.parse(data.ExtData);

          if (extData) {
            me.$ms.commonFn.processServerResponseData(extData);

            for (var m in extData) {
              // Chỉ map các trường không có trong dữ liệu gốc
              if (data && data[m]) {
                data[m] = extData[m];
              }
            }
          }
        }
      }
    },

    /**
     * Xử lý dữ liệu sau khi sửa
     * @param {*} record bản ghi gốc
     * @param {*} saveResult bản ghi trên server trả về
     * @override
     */
    afterSaveEdit: function afterSaveEdit(record, saveResult) {},

    /**
     * Xử lý dữ liệu sau khi sửa tại mode view
     * @param {*} record bản ghi gốc
     * @param {*} saveResult bản ghi trên server trả về
     * @override
     */
    afterSaveView: function afterSaveView(record, saveResult) {},

    /**
     * Hàm show All iconfilter
     * @param {*} record bản ghi gốc
     * @param {*} saveResult bản ghi trên server trả về
     * @override
     */
    funShowAllIconFilter: function funShowAllIconFilter() {
      //this.$nextTick(()=>{
      this.showAllIconFilter = !this.showAllIconFilter;
      this.$refs[this.viewRef].funShowAllIconFilter(this.showAllIconFilter); //})
    },

    /**
     * custom điều kiện lọc/search màn hình grid tree
     * @param {*} record bản ghi check
     * @param properties danh sách field cần check đk
     * @param searchText đoạn text nhập ở ô tìm kiếm
     * Mặc định trả về true
     */
    checkFilterGridTreeCustom: function checkFilterGridTreeCustom(record, properties, searchText) {
      return true;
    },

    /**
     * Hàm show các popup theo tên lấy đường dẫn từ hàm getPopupomponent
     * @param name tên của component
     * Created by LTDAT(17.06.2020)
     */
    showDetail: function showDetail(name, mode, data, option) {
      var me = this;
      popupUtil.show(me, name, data, me.getPopupOption(name, option));
    },

    /**
     * Author: ĐVThi
     * Create date: 11/03/2021
     * Cho phép detail gọi tới submitDetailCallback của danh sách sau khi cất xong
     */
    getPopupOption: function getPopupOption(name, option) {
      var me = this;
      return {
        submit: me.submitDetailCallback,
        single: true
      };
    },

    /**
     * Author: ĐVThi
     * Create date: 11/03/2021
     * Cho phép detail gọi tới submitDetailCallback của danh sách sau khi cất xong
     */
    submitDetailCallback: function submitDetailCallback(result, param, action) {
      var me = this;
    },

    /**
     * @override
     */
    getConditionParameter: function getConditionParameter() {
      var me = this;
      var result = me.super("getConditionParameter");
      return result;
    },

    /**
     * Hàm thực hiện custom entity đối với nghiệp vụ đặc thù
     * @author vvkiet - 27.07.2021
     */
    getEntityType: function getEntityType() {
      return null;
    },

    /**
     * show filter popup
     */
    showActionBox: function showActionBox() {
      if (this.isShowActionGroup == true) {
        this.isShowActionGroup = false;
      } else {
        this.isShowActionGroup = true;
      }
    },

    /**
     * hide filter popup
     */
    hiddenActionBox: function hiddenActionBox(event) {
      this.isShowActionGroup = false;
    },

    /**
     * Cập nhật trạng thái các bản ghi được chọn
     * TDNGHIA 12/11/2021
     * @param {*} records
     * @param {*} command
     */
    setActiveMutiRows: function setActiveMutiRows(records, command) {
      var _this12 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var me, inactive, field, listID, param, result;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                me = _this12;
                inactive = command == "active" ? 0 : 1;

                if (!Array.isArray(records)) {
                  records = [records];
                } //show mask
                // me.loading = true;


                field = me.$store.state[me.module]._config.field;
                listID = records.map(function (item) {
                  return item[field.key];
                }).join(",");
                param = {
                  TableName: field.table,
                  KeyField: field.key,
                  Value: inactive,
                  ListID: listID,
                  OrganizationID: me.getOrganizationFilter()
                };
                _context13.next = 8;
                return me.$store.dispatch("".concat(_this12.module, "/updateStatus"), param);

              case 8:
                result = _context13.sent;
                me.afterUpdateStatus(records, result);

              case 10:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }))();
    },

    /**
     * cập nhật sau khi update status
     * @param {*} record
     * @param {*} result
     */
    afterUpdateStatus: function afterUpdateStatus(record, result) {
      var me = this;

      if (result && result.Success) {
        me.$toast.success(me.$t("i18nBaseForm.SaveSuccessMessage"));
        me.selected = [];
        me.reload();
        me.customAfterUpdate(record);
      } else {
        me.$toast.error(me.$t("i18nBaseForm.Message.Error"));
      }
    },

    /**
     * Lấy organizationID để update status,...
     * TDNGHIA 16/11/2021
     * @returns
     */
    getOrganizationFilter: function getOrganizationFilter() {
      return null;
    },

    /**
     * Hàm custom xử lý sau khi cập nhật trạng thái
     * NMTUAN3 15/3/2022
     * @param {*} record bản ghi cập nhật trạng thái
     */
    customAfterUpdate: function customAfterUpdate(record) {}
  }),
  beforeDestroy: function beforeDestroy() {
    this.removeEvent();
  }
};"},null]}